
RTOS_LEDS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004238  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00004238  000042cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  0080007a  0080007a  000042e6  2**0
                  ALLOC
  3 .stab         00004b54  00000000  00000000  000042e8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004283  00000000  00000000  00008e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000d0bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000d36f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000efb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000fea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00010c50  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00010db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0001103d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001180b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 26 0d 	jmp	0x1a4c	; 0x1a4c <__vector_1>
       8:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <__vector_2>
       c:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_3>
      10:	0c 94 2f 09 	jmp	0x125e	; 0x125e <__vector_4>
      14:	0c 94 e6 08 	jmp	0x11cc	; 0x11cc <__vector_5>
      18:	0c 94 9d 08 	jmp	0x113a	; 0x113a <__vector_6>
      1c:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__vector_7>
      20:	0c 94 54 08 	jmp	0x10a8	; 0x10a8 <__vector_8>
      24:	0c 94 c2 07 	jmp	0xf84	; 0xf84 <__vector_9>
      28:	0c 94 79 07 	jmp	0xef2	; 0xef2 <__vector_10>
      2c:	0c 94 30 07 	jmp	0xe60	; 0xe60 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e3       	ldi	r30, 0x38	; 56
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3c       	cpi	r26, 0xC3	; 195
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 1f 	call	0x3fe2	; 0x3fe2 <main>
      8a:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e3 20 	jmp	0x41c6	; 0x41c6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ff 20 	jmp	0x41fe	; 0x41fe <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ef 20 	jmp	0x41de	; 0x41de <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f3 20 	jmp	0x41e6	; 0x41e6 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0f 21 	jmp	0x421e	; 0x421e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <RTOS_voidStart>:
static CreateTask_FuncArgus System_Tasks[TASK_NUM]={{NULL}};



void RTOS_voidStart(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2b 97       	sbiw	r28, 0x0b	; 11
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	timer_config_type RTOS_TimerConfig;
	RTOS_TimerConfig.timer = TIMER_0;
     b5a:	1a 86       	std	Y+10, r1	; 0x0a
	RTOS_TimerConfig.operated_mode = CTC_MODE;
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	89 87       	std	Y+9, r24	; 0x09
	RTOS_TimerConfig.compared_value = TIMER0_u8_COMP_MATCH_VAL;
     b60:	8d e7       	ldi	r24, 0x7D	; 125
     b62:	90 e0       	ldi	r25, 0x00	; 0
     b64:	9a 83       	std	Y+2, r25	; 0x02
     b66:	89 83       	std	Y+1, r24	; 0x01
	RTOS_TimerConfig.T0_T1_used_freq = TIMER_0_1_PRE_SCALER_e_64;
     b68:	83 e0       	ldi	r24, 0x03	; 3
     b6a:	8f 83       	std	Y+7, r24	; 0x07

	Set_CallBack_TIMER_0_OC_INT(&RTOS_voidScheduler);
     b6c:	85 e8       	ldi	r24, 0x85	; 133
     b6e:	96 e0       	ldi	r25, 0x06	; 6
     b70:	0e 94 63 07 	call	0xec6	; 0xec6 <Set_CallBack_TIMER_0_OC_INT>
	Global_VidINTEnable();
     b74:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <Global_VidINTEnable>
	Timer_init(&RTOS_TimerConfig);
     b78:	ce 01       	movw	r24, r28
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	0e 94 62 09 	call	0x12c4	; 0x12c4 <Timer_init>

}
     b80:	2b 96       	adiw	r28, 0x0b	; 11
     b82:	0f b6       	in	r0, 0x3f	; 63
     b84:	f8 94       	cli
     b86:	de bf       	out	0x3e, r29	; 62
     b88:	0f be       	out	0x3f, r0	; 63
     b8a:	cd bf       	out	0x3d, r28	; 61
     b8c:	cf 91       	pop	r28
     b8e:	df 91       	pop	r29
     b90:	08 95       	ret

00000b92 <RTOS_u8CreateTask>:

u8 RTOS_u8CreateTask(CreateTask_FuncArgus * FuncArgus)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	00 d0       	rcall	.+0      	; 0xb98 <RTOS_u8CreateTask+0x6>
     b98:	0f 92       	push	r0
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	9b 83       	std	Y+3, r25	; 0x03
     ba0:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ErrorState = OK;
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	89 83       	std	Y+1, r24	; 0x01
	/*Check if the required priority is empty or used before for another task*/
	if(System_Tasks[FuncArgus->Copy_u8Priority].Copy_pvTaskFunc == NULL)
     ba6:	ea 81       	ldd	r30, Y+2	; 0x02
     ba8:	fb 81       	ldd	r31, Y+3	; 0x03
     baa:	83 81       	ldd	r24, Z+3	; 0x03
     bac:	88 2f       	mov	r24, r24
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	88 0f       	add	r24, r24
     bb2:	99 1f       	adc	r25, r25
     bb4:	88 0f       	add	r24, r24
     bb6:	99 1f       	adc	r25, r25
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	fc 01       	movw	r30, r24
     bbe:	e6 58       	subi	r30, 0x86	; 134
     bc0:	ff 4f       	sbci	r31, 0xFF	; 255
     bc2:	80 81       	ld	r24, Z
     bc4:	91 81       	ldd	r25, Z+1	; 0x01
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	09 f0       	breq	.+2      	; 0xbcc <RTOS_u8CreateTask+0x3a>
     bca:	4e c0       	rjmp	.+156    	; 0xc68 <RTOS_u8CreateTask+0xd6>
	{
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_u16Periodicity = FuncArgus->Copy_u16Periodicity;
     bcc:	ea 81       	ldd	r30, Y+2	; 0x02
     bce:	fb 81       	ldd	r31, Y+3	; 0x03
     bd0:	83 81       	ldd	r24, Z+3	; 0x03
     bd2:	88 2f       	mov	r24, r24
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	ea 81       	ldd	r30, Y+2	; 0x02
     bd8:	fb 81       	ldd	r31, Y+3	; 0x03
     bda:	24 81       	ldd	r18, Z+4	; 0x04
     bdc:	35 81       	ldd	r19, Z+5	; 0x05
     bde:	88 0f       	add	r24, r24
     be0:	99 1f       	adc	r25, r25
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	88 0f       	add	r24, r24
     be6:	99 1f       	adc	r25, r25
     be8:	88 0f       	add	r24, r24
     bea:	99 1f       	adc	r25, r25
     bec:	fc 01       	movw	r30, r24
     bee:	e6 58       	subi	r30, 0x86	; 134
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	31 83       	std	Z+1, r19	; 0x01
     bf4:	20 83       	st	Z, r18
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_pvTaskFunc = FuncArgus->Copy_pvTaskFunc;
     bf6:	ea 81       	ldd	r30, Y+2	; 0x02
     bf8:	fb 81       	ldd	r31, Y+3	; 0x03
     bfa:	83 81       	ldd	r24, Z+3	; 0x03
     bfc:	88 2f       	mov	r24, r24
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	ea 81       	ldd	r30, Y+2	; 0x02
     c02:	fb 81       	ldd	r31, Y+3	; 0x03
     c04:	20 81       	ld	r18, Z
     c06:	31 81       	ldd	r19, Z+1	; 0x01
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	88 0f       	add	r24, r24
     c0e:	99 1f       	adc	r25, r25
     c10:	88 0f       	add	r24, r24
     c12:	99 1f       	adc	r25, r25
     c14:	fc 01       	movw	r30, r24
     c16:	e6 58       	subi	r30, 0x86	; 134
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	31 83       	std	Z+1, r19	; 0x01
     c1c:	20 83       	st	Z, r18
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_u8State = TASK_RESUMED;      //Initialize the task state
     c1e:	ea 81       	ldd	r30, Y+2	; 0x02
     c20:	fb 81       	ldd	r31, Y+3	; 0x03
     c22:	83 81       	ldd	r24, Z+3	; 0x03
     c24:	88 2f       	mov	r24, r24
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	88 0f       	add	r24, r24
     c2e:	99 1f       	adc	r25, r25
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	88 0f       	add	r24, r24
     c34:	99 1f       	adc	r25, r25
     c36:	fc 01       	movw	r30, r24
     c38:	e6 58       	subi	r30, 0x86	; 134
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	10 82       	st	Z, r1
		System_Tasks[FuncArgus->Copy_u8Priority].Copy_u16FirstDelay = FuncArgus->Copy_u16FirstDelay;
     c3e:	ea 81       	ldd	r30, Y+2	; 0x02
     c40:	fb 81       	ldd	r31, Y+3	; 0x03
     c42:	83 81       	ldd	r24, Z+3	; 0x03
     c44:	88 2f       	mov	r24, r24
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	ea 81       	ldd	r30, Y+2	; 0x02
     c4a:	fb 81       	ldd	r31, Y+3	; 0x03
     c4c:	26 81       	ldd	r18, Z+6	; 0x06
     c4e:	37 81       	ldd	r19, Z+7	; 0x07
     c50:	88 0f       	add	r24, r24
     c52:	99 1f       	adc	r25, r25
     c54:	88 0f       	add	r24, r24
     c56:	99 1f       	adc	r25, r25
     c58:	88 0f       	add	r24, r24
     c5a:	99 1f       	adc	r25, r25
     c5c:	fc 01       	movw	r30, r24
     c5e:	e0 58       	subi	r30, 0x80	; 128
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	31 83       	std	Z+1, r19	; 0x01
     c64:	20 83       	st	Z, r18
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <RTOS_u8CreateTask+0xd8>
	}
	else
	{
		/*Priority is reserved before, don't create the task*/
		Local_u8ErrorState = NOK;
     c68:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorState;
     c6a:	89 81       	ldd	r24, Y+1	; 0x01
}
     c6c:	0f 90       	pop	r0
     c6e:	0f 90       	pop	r0
     c70:	0f 90       	pop	r0
     c72:	cf 91       	pop	r28
     c74:	df 91       	pop	r29
     c76:	08 95       	ret

00000c78 <RTOS_voidSuspendTask>:

void RTOS_voidSuspendTask(u8 Copy_u8Priority)
{
     c78:	df 93       	push	r29
     c7a:	cf 93       	push	r28
     c7c:	0f 92       	push	r0
     c7e:	cd b7       	in	r28, 0x3d	; 61
     c80:	de b7       	in	r29, 0x3e	; 62
     c82:	89 83       	std	Y+1, r24	; 0x01
	System_Tasks[Copy_u8Priority].Copy_u8State = TASK_SUSPENDED;
     c84:	89 81       	ldd	r24, Y+1	; 0x01
     c86:	88 2f       	mov	r24, r24
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	88 0f       	add	r24, r24
     c8c:	99 1f       	adc	r25, r25
     c8e:	88 0f       	add	r24, r24
     c90:	99 1f       	adc	r25, r25
     c92:	01 96       	adiw	r24, 0x01	; 1
     c94:	88 0f       	add	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	fc 01       	movw	r30, r24
     c9a:	e6 58       	subi	r30, 0x86	; 134
     c9c:	ff 4f       	sbci	r31, 0xFF	; 255
     c9e:	81 e0       	ldi	r24, 0x01	; 1
     ca0:	80 83       	st	Z, r24
}
     ca2:	0f 90       	pop	r0
     ca4:	cf 91       	pop	r28
     ca6:	df 91       	pop	r29
     ca8:	08 95       	ret

00000caa <RTOS_voidResumeTask>:

void RTOS_voidResumeTask(u8 Copy_u8Priority)
{
     caa:	df 93       	push	r29
     cac:	cf 93       	push	r28
     cae:	0f 92       	push	r0
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	89 83       	std	Y+1, r24	; 0x01
	System_Tasks[Copy_u8Priority].Copy_u8State = TASK_RESUMED;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	88 2f       	mov	r24, r24
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	88 0f       	add	r24, r24
     cbe:	99 1f       	adc	r25, r25
     cc0:	88 0f       	add	r24, r24
     cc2:	99 1f       	adc	r25, r25
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	fc 01       	movw	r30, r24
     ccc:	e6 58       	subi	r30, 0x86	; 134
     cce:	ff 4f       	sbci	r31, 0xFF	; 255
     cd0:	10 82       	st	Z, r1
}
     cd2:	0f 90       	pop	r0
     cd4:	cf 91       	pop	r28
     cd6:	df 91       	pop	r29
     cd8:	08 95       	ret

00000cda <RTOS_voidDeleteTask>:

void RTOS_voidDeleteTask(u8 Copy_u8Priority)
{
     cda:	df 93       	push	r29
     cdc:	cf 93       	push	r28
     cde:	0f 92       	push	r0
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	89 83       	std	Y+1, r24	; 0x01
	System_Tasks[Copy_u8Priority].Copy_pvTaskFunc = NULL;
     ce6:	89 81       	ldd	r24, Y+1	; 0x01
     ce8:	88 2f       	mov	r24, r24
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	88 0f       	add	r24, r24
     cee:	99 1f       	adc	r25, r25
     cf0:	88 0f       	add	r24, r24
     cf2:	99 1f       	adc	r25, r25
     cf4:	88 0f       	add	r24, r24
     cf6:	99 1f       	adc	r25, r25
     cf8:	fc 01       	movw	r30, r24
     cfa:	e6 58       	subi	r30, 0x86	; 134
     cfc:	ff 4f       	sbci	r31, 0xFF	; 255
     cfe:	11 82       	std	Z+1, r1	; 0x01
     d00:	10 82       	st	Z, r1
}
     d02:	0f 90       	pop	r0
     d04:	cf 91       	pop	r28
     d06:	df 91       	pop	r29
     d08:	08 95       	ret

00000d0a <RTOS_voidScheduler>:

static void RTOS_voidScheduler(void)
{
     d0a:	df 93       	push	r29
     d0c:	cf 93       	push	r28
     d0e:	0f 92       	push	r0
     d10:	cd b7       	in	r28, 0x3d	; 61
     d12:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8TaskCounter;

	/*
	 * Loop on all tasks to check their periodicity
	 */
	for(Local_u8TaskCounter=0 ; Local_u8TaskCounter<TASK_NUM ; Local_u8TaskCounter++)
     d14:	19 82       	std	Y+1, r1	; 0x01
     d16:	86 c0       	rjmp	.+268    	; 0xe24 <RTOS_voidScheduler+0x11a>
	{
		/*Check if the task suspended or not*/
		if(System_Tasks[Local_u8TaskCounter].Copy_u8State == TASK_RESUMED)
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	88 2f       	mov	r24, r24
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	01 96       	adiw	r24, 0x01	; 1
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	fc 01       	movw	r30, r24
     d2e:	e6 58       	subi	r30, 0x86	; 134
     d30:	ff 4f       	sbci	r31, 0xFF	; 255
     d32:	80 81       	ld	r24, Z
     d34:	88 23       	and	r24, r24
     d36:	09 f0       	breq	.+2      	; 0xd3a <RTOS_voidScheduler+0x30>
     d38:	72 c0       	rjmp	.+228    	; 0xe1e <RTOS_voidScheduler+0x114>
		{
			if(( System_Tasks[Local_u8TaskCounter].Copy_u16FirstDelay)==0)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 2f       	mov	r24, r24
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	88 0f       	add	r24, r24
     d46:	99 1f       	adc	r25, r25
     d48:	88 0f       	add	r24, r24
     d4a:	99 1f       	adc	r25, r25
     d4c:	fc 01       	movw	r30, r24
     d4e:	e0 58       	subi	r30, 0x80	; 128
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	80 81       	ld	r24, Z
     d54:	91 81       	ldd	r25, Z+1	; 0x01
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	09 f0       	breq	.+2      	; 0xd5c <RTOS_voidScheduler+0x52>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <RTOS_voidScheduler+0xd8>
			{
				/*Invoke The Task Function*/
				if(System_Tasks[Local_u8TaskCounter].Copy_pvTaskFunc != NULL)
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	88 0f       	add	r24, r24
     d64:	99 1f       	adc	r25, r25
     d66:	88 0f       	add	r24, r24
     d68:	99 1f       	adc	r25, r25
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	fc 01       	movw	r30, r24
     d70:	e6 58       	subi	r30, 0x86	; 134
     d72:	ff 4f       	sbci	r31, 0xFF	; 255
     d74:	80 81       	ld	r24, Z
     d76:	91 81       	ldd	r25, Z+1	; 0x01
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	09 f4       	brne	.+2      	; 0xd7e <RTOS_voidScheduler+0x74>
     d7c:	50 c0       	rjmp	.+160    	; 0xe1e <RTOS_voidScheduler+0x114>
				{
					System_Tasks[Local_u8TaskCounter].Copy_pvTaskFunc();
     d7e:	89 81       	ldd	r24, Y+1	; 0x01
     d80:	88 2f       	mov	r24, r24
     d82:	90 e0       	ldi	r25, 0x00	; 0
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	88 0f       	add	r24, r24
     d8a:	99 1f       	adc	r25, r25
     d8c:	88 0f       	add	r24, r24
     d8e:	99 1f       	adc	r25, r25
     d90:	fc 01       	movw	r30, r24
     d92:	e6 58       	subi	r30, 0x86	; 134
     d94:	ff 4f       	sbci	r31, 0xFF	; 255
     d96:	01 90       	ld	r0, Z+
     d98:	f0 81       	ld	r31, Z
     d9a:	e0 2d       	mov	r30, r0
     d9c:	09 95       	icall

					/*Assign The first delay parameter to periodicity minus 1*/
					System_Tasks[Local_u8TaskCounter].Copy_u16FirstDelay = ((System_Tasks[Local_u8TaskCounter].Copy_u16Periodicity)-1);
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	48 2f       	mov	r20, r24
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	88 2f       	mov	r24, r24
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	88 0f       	add	r24, r24
     db2:	99 1f       	adc	r25, r25
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	fc 01       	movw	r30, r24
     dba:	e6 58       	subi	r30, 0x86	; 134
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	80 81       	ld	r24, Z
     dc0:	91 81       	ldd	r25, Z+1	; 0x01
     dc2:	9c 01       	movw	r18, r24
     dc4:	21 50       	subi	r18, 0x01	; 1
     dc6:	30 40       	sbci	r19, 0x00	; 0
     dc8:	ca 01       	movw	r24, r20
     dca:	88 0f       	add	r24, r24
     dcc:	99 1f       	adc	r25, r25
     dce:	88 0f       	add	r24, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	88 0f       	add	r24, r24
     dd4:	99 1f       	adc	r25, r25
     dd6:	fc 01       	movw	r30, r24
     dd8:	e0 58       	subi	r30, 0x80	; 128
     dda:	ff 4f       	sbci	r31, 0xFF	; 255
     ddc:	31 83       	std	Z+1, r19	; 0x01
     dde:	20 83       	st	Z, r18
     de0:	1e c0       	rjmp	.+60     	; 0xe1e <RTOS_voidScheduler+0x114>
				}
			}
			else
			{
				/*Decrement The first delay*/
				(System_Tasks[Local_u8TaskCounter].Copy_u16FirstDelay)--;
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	28 2f       	mov	r18, r24
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	c9 01       	movw	r24, r18
     dea:	88 0f       	add	r24, r24
     dec:	99 1f       	adc	r25, r25
     dee:	88 0f       	add	r24, r24
     df0:	99 1f       	adc	r25, r25
     df2:	88 0f       	add	r24, r24
     df4:	99 1f       	adc	r25, r25
     df6:	fc 01       	movw	r30, r24
     df8:	e0 58       	subi	r30, 0x80	; 128
     dfa:	ff 4f       	sbci	r31, 0xFF	; 255
     dfc:	80 81       	ld	r24, Z
     dfe:	91 81       	ldd	r25, Z+1	; 0x01
     e00:	ac 01       	movw	r20, r24
     e02:	41 50       	subi	r20, 0x01	; 1
     e04:	50 40       	sbci	r21, 0x00	; 0
     e06:	c9 01       	movw	r24, r18
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	88 0f       	add	r24, r24
     e0e:	99 1f       	adc	r25, r25
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	fc 01       	movw	r30, r24
     e16:	e0 58       	subi	r30, 0x80	; 128
     e18:	ff 4f       	sbci	r31, 0xFF	; 255
     e1a:	51 83       	std	Z+1, r21	; 0x01
     e1c:	40 83       	st	Z, r20
	u8 Local_u8TaskCounter;

	/*
	 * Loop on all tasks to check their periodicity
	 */
	for(Local_u8TaskCounter=0 ; Local_u8TaskCounter<TASK_NUM ; Local_u8TaskCounter++)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	8f 5f       	subi	r24, 0xFF	; 255
     e22:	89 83       	std	Y+1, r24	; 0x01
     e24:	89 81       	ldd	r24, Y+1	; 0x01
     e26:	86 30       	cpi	r24, 0x06	; 6
     e28:	08 f4       	brcc	.+2      	; 0xe2c <RTOS_voidScheduler+0x122>
     e2a:	76 cf       	rjmp	.-276    	; 0xd18 <RTOS_voidScheduler+0xe>
		{
			//Task is suspended,do Nothing
		}

	}
}
     e2c:	0f 90       	pop	r0
     e2e:	cf 91       	pop	r28
     e30:	df 91       	pop	r29
     e32:	08 95       	ret

00000e34 <Set_CallBack_TIMER_0_OVF_INT>:




void Set_CallBack_TIMER_0_OVF_INT(void (*ptr)(void))
{
     e34:	df 93       	push	r29
     e36:	cf 93       	push	r28
     e38:	00 d0       	rcall	.+0      	; 0xe3a <Set_CallBack_TIMER_0_OVF_INT+0x6>
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	9a 83       	std	Y+2, r25	; 0x02
     e40:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     e42:	89 81       	ldd	r24, Y+1	; 0x01
     e44:	9a 81       	ldd	r25, Y+2	; 0x02
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	31 f0       	breq	.+12     	; 0xe56 <Set_CallBack_TIMER_0_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_0_OVF_INT = ptr;
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	90 93 ac 00 	sts	0x00AC, r25
     e52:	80 93 ab 00 	sts	0x00AB, r24
	}
}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <__vector_11>:
void __vector_11 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_11 (void)
{
     e60:	1f 92       	push	r1
     e62:	0f 92       	push	r0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	0f 92       	push	r0
     e68:	11 24       	eor	r1, r1
     e6a:	2f 93       	push	r18
     e6c:	3f 93       	push	r19
     e6e:	4f 93       	push	r20
     e70:	5f 93       	push	r21
     e72:	6f 93       	push	r22
     e74:	7f 93       	push	r23
     e76:	8f 93       	push	r24
     e78:	9f 93       	push	r25
     e7a:	af 93       	push	r26
     e7c:	bf 93       	push	r27
     e7e:	ef 93       	push	r30
     e80:	ff 93       	push	r31
     e82:	df 93       	push	r29
     e84:	cf 93       	push	r28
     e86:	cd b7       	in	r28, 0x3d	; 61
     e88:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_0_OVF_INT != NULL)
     e8a:	80 91 ab 00 	lds	r24, 0x00AB
     e8e:	90 91 ac 00 	lds	r25, 0x00AC
     e92:	00 97       	sbiw	r24, 0x00	; 0
     e94:	29 f0       	breq	.+10     	; 0xea0 <__vector_11+0x40>
	{
		TIMER_ISR.TIMER_0_OVF_INT();
     e96:	e0 91 ab 00 	lds	r30, 0x00AB
     e9a:	f0 91 ac 00 	lds	r31, 0x00AC
     e9e:	09 95       	icall
	}
}
     ea0:	cf 91       	pop	r28
     ea2:	df 91       	pop	r29
     ea4:	ff 91       	pop	r31
     ea6:	ef 91       	pop	r30
     ea8:	bf 91       	pop	r27
     eaa:	af 91       	pop	r26
     eac:	9f 91       	pop	r25
     eae:	8f 91       	pop	r24
     eb0:	7f 91       	pop	r23
     eb2:	6f 91       	pop	r22
     eb4:	5f 91       	pop	r21
     eb6:	4f 91       	pop	r20
     eb8:	3f 91       	pop	r19
     eba:	2f 91       	pop	r18
     ebc:	0f 90       	pop	r0
     ebe:	0f be       	out	0x3f, r0	; 63
     ec0:	0f 90       	pop	r0
     ec2:	1f 90       	pop	r1
     ec4:	18 95       	reti

00000ec6 <Set_CallBack_TIMER_0_OC_INT>:

void Set_CallBack_TIMER_0_OC_INT(void (*ptr)(void))
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	00 d0       	rcall	.+0      	; 0xecc <Set_CallBack_TIMER_0_OC_INT+0x6>
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	9a 83       	std	Y+2, r25	; 0x02
     ed2:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	00 97       	sbiw	r24, 0x00	; 0
     eda:	31 f0       	breq	.+12     	; 0xee8 <Set_CallBack_TIMER_0_OC_INT+0x22>
	{
		TIMER_ISR.TIMER_0_OC_INT = ptr;
     edc:	89 81       	ldd	r24, Y+1	; 0x01
     ede:	9a 81       	ldd	r25, Y+2	; 0x02
     ee0:	90 93 ae 00 	sts	0x00AE, r25
     ee4:	80 93 ad 00 	sts	0x00AD, r24
	}
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <__vector_10>:
void __vector_10 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_10 (void)
{
     ef2:	1f 92       	push	r1
     ef4:	0f 92       	push	r0
     ef6:	0f b6       	in	r0, 0x3f	; 63
     ef8:	0f 92       	push	r0
     efa:	11 24       	eor	r1, r1
     efc:	2f 93       	push	r18
     efe:	3f 93       	push	r19
     f00:	4f 93       	push	r20
     f02:	5f 93       	push	r21
     f04:	6f 93       	push	r22
     f06:	7f 93       	push	r23
     f08:	8f 93       	push	r24
     f0a:	9f 93       	push	r25
     f0c:	af 93       	push	r26
     f0e:	bf 93       	push	r27
     f10:	ef 93       	push	r30
     f12:	ff 93       	push	r31
     f14:	df 93       	push	r29
     f16:	cf 93       	push	r28
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_0_OC_INT != NULL)
     f1c:	80 91 ad 00 	lds	r24, 0x00AD
     f20:	90 91 ae 00 	lds	r25, 0x00AE
     f24:	00 97       	sbiw	r24, 0x00	; 0
     f26:	29 f0       	breq	.+10     	; 0xf32 <__vector_10+0x40>
	{
		TIMER_ISR.TIMER_0_OC_INT();
     f28:	e0 91 ad 00 	lds	r30, 0x00AD
     f2c:	f0 91 ae 00 	lds	r31, 0x00AE
     f30:	09 95       	icall
	}
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	ff 91       	pop	r31
     f38:	ef 91       	pop	r30
     f3a:	bf 91       	pop	r27
     f3c:	af 91       	pop	r26
     f3e:	9f 91       	pop	r25
     f40:	8f 91       	pop	r24
     f42:	7f 91       	pop	r23
     f44:	6f 91       	pop	r22
     f46:	5f 91       	pop	r21
     f48:	4f 91       	pop	r20
     f4a:	3f 91       	pop	r19
     f4c:	2f 91       	pop	r18
     f4e:	0f 90       	pop	r0
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	0f 90       	pop	r0
     f54:	1f 90       	pop	r1
     f56:	18 95       	reti

00000f58 <Set_CallBack_TIMER_1_OVF_INT>:




void Set_CallBack_TIMER_1_OVF_INT(void (*ptr)(void))
{
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	00 d0       	rcall	.+0      	; 0xf5e <Set_CallBack_TIMER_1_OVF_INT+0x6>
     f5e:	cd b7       	in	r28, 0x3d	; 61
     f60:	de b7       	in	r29, 0x3e	; 62
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     f66:	89 81       	ldd	r24, Y+1	; 0x01
     f68:	9a 81       	ldd	r25, Y+2	; 0x02
     f6a:	00 97       	sbiw	r24, 0x00	; 0
     f6c:	31 f0       	breq	.+12     	; 0xf7a <Set_CallBack_TIMER_1_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OVF_INT = ptr;
     f6e:	89 81       	ldd	r24, Y+1	; 0x01
     f70:	9a 81       	ldd	r25, Y+2	; 0x02
     f72:	90 93 b0 00 	sts	0x00B0, r25
     f76:	80 93 af 00 	sts	0x00AF, r24
	}
}
     f7a:	0f 90       	pop	r0
     f7c:	0f 90       	pop	r0
     f7e:	cf 91       	pop	r28
     f80:	df 91       	pop	r29
     f82:	08 95       	ret

00000f84 <__vector_9>:
void __vector_9 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_9 (void)
{
     f84:	1f 92       	push	r1
     f86:	0f 92       	push	r0
     f88:	0f b6       	in	r0, 0x3f	; 63
     f8a:	0f 92       	push	r0
     f8c:	11 24       	eor	r1, r1
     f8e:	2f 93       	push	r18
     f90:	3f 93       	push	r19
     f92:	4f 93       	push	r20
     f94:	5f 93       	push	r21
     f96:	6f 93       	push	r22
     f98:	7f 93       	push	r23
     f9a:	8f 93       	push	r24
     f9c:	9f 93       	push	r25
     f9e:	af 93       	push	r26
     fa0:	bf 93       	push	r27
     fa2:	ef 93       	push	r30
     fa4:	ff 93       	push	r31
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OVF_INT != NULL)
     fae:	80 91 af 00 	lds	r24, 0x00AF
     fb2:	90 91 b0 00 	lds	r25, 0x00B0
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	29 f0       	breq	.+10     	; 0xfc4 <__vector_9+0x40>
	{
		TIMER_ISR.TIMER_1_OVF_INT();
     fba:	e0 91 af 00 	lds	r30, 0x00AF
     fbe:	f0 91 b0 00 	lds	r31, 0x00B0
     fc2:	09 95       	icall
	}
}
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	ff 91       	pop	r31
     fca:	ef 91       	pop	r30
     fcc:	bf 91       	pop	r27
     fce:	af 91       	pop	r26
     fd0:	9f 91       	pop	r25
     fd2:	8f 91       	pop	r24
     fd4:	7f 91       	pop	r23
     fd6:	6f 91       	pop	r22
     fd8:	5f 91       	pop	r21
     fda:	4f 91       	pop	r20
     fdc:	3f 91       	pop	r19
     fde:	2f 91       	pop	r18
     fe0:	0f 90       	pop	r0
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	0f 90       	pop	r0
     fe6:	1f 90       	pop	r1
     fe8:	18 95       	reti

00000fea <Set_CallBack_TIMER_1_OCA_INT>:

void Set_CallBack_TIMER_1_OCA_INT(void (*ptr)(void))
{
     fea:	df 93       	push	r29
     fec:	cf 93       	push	r28
     fee:	00 d0       	rcall	.+0      	; 0xff0 <Set_CallBack_TIMER_1_OCA_INT+0x6>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	31 f0       	breq	.+12     	; 0x100c <Set_CallBack_TIMER_1_OCA_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OCA_INT = ptr;
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	90 93 b2 00 	sts	0x00B2, r25
    1008:	80 93 b1 00 	sts	0x00B1, r24
	}
}
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	cf 91       	pop	r28
    1012:	df 91       	pop	r29
    1014:	08 95       	ret

00001016 <__vector_7>:
void __vector_7 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_7 (void)
{
    1016:	1f 92       	push	r1
    1018:	0f 92       	push	r0
    101a:	0f b6       	in	r0, 0x3f	; 63
    101c:	0f 92       	push	r0
    101e:	11 24       	eor	r1, r1
    1020:	2f 93       	push	r18
    1022:	3f 93       	push	r19
    1024:	4f 93       	push	r20
    1026:	5f 93       	push	r21
    1028:	6f 93       	push	r22
    102a:	7f 93       	push	r23
    102c:	8f 93       	push	r24
    102e:	9f 93       	push	r25
    1030:	af 93       	push	r26
    1032:	bf 93       	push	r27
    1034:	ef 93       	push	r30
    1036:	ff 93       	push	r31
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	cd b7       	in	r28, 0x3d	; 61
    103e:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OCA_INT != NULL)
    1040:	80 91 b1 00 	lds	r24, 0x00B1
    1044:	90 91 b2 00 	lds	r25, 0x00B2
    1048:	00 97       	sbiw	r24, 0x00	; 0
    104a:	29 f0       	breq	.+10     	; 0x1056 <__vector_7+0x40>
	{
		TIMER_ISR.TIMER_1_OCA_INT();
    104c:	e0 91 b1 00 	lds	r30, 0x00B1
    1050:	f0 91 b2 00 	lds	r31, 0x00B2
    1054:	09 95       	icall
	}
}
    1056:	cf 91       	pop	r28
    1058:	df 91       	pop	r29
    105a:	ff 91       	pop	r31
    105c:	ef 91       	pop	r30
    105e:	bf 91       	pop	r27
    1060:	af 91       	pop	r26
    1062:	9f 91       	pop	r25
    1064:	8f 91       	pop	r24
    1066:	7f 91       	pop	r23
    1068:	6f 91       	pop	r22
    106a:	5f 91       	pop	r21
    106c:	4f 91       	pop	r20
    106e:	3f 91       	pop	r19
    1070:	2f 91       	pop	r18
    1072:	0f 90       	pop	r0
    1074:	0f be       	out	0x3f, r0	; 63
    1076:	0f 90       	pop	r0
    1078:	1f 90       	pop	r1
    107a:	18 95       	reti

0000107c <Set_CallBack_TIMER_1_OCB_INT>:


void Set_CallBack_TIMER_1_OCB_INT(void (*ptr)(void))
{
    107c:	df 93       	push	r29
    107e:	cf 93       	push	r28
    1080:	00 d0       	rcall	.+0      	; 0x1082 <Set_CallBack_TIMER_1_OCB_INT+0x6>
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	9a 83       	std	Y+2, r25	; 0x02
    1088:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	31 f0       	breq	.+12     	; 0x109e <Set_CallBack_TIMER_1_OCB_INT+0x22>
	{
		TIMER_ISR.TIMER_1_OCB_INT = ptr;
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	90 93 b4 00 	sts	0x00B4, r25
    109a:	80 93 b3 00 	sts	0x00B3, r24
	}
}
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	cf 91       	pop	r28
    10a4:	df 91       	pop	r29
    10a6:	08 95       	ret

000010a8 <__vector_8>:
void __vector_8 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_8 (void)
{
    10a8:	1f 92       	push	r1
    10aa:	0f 92       	push	r0
    10ac:	0f b6       	in	r0, 0x3f	; 63
    10ae:	0f 92       	push	r0
    10b0:	11 24       	eor	r1, r1
    10b2:	2f 93       	push	r18
    10b4:	3f 93       	push	r19
    10b6:	4f 93       	push	r20
    10b8:	5f 93       	push	r21
    10ba:	6f 93       	push	r22
    10bc:	7f 93       	push	r23
    10be:	8f 93       	push	r24
    10c0:	9f 93       	push	r25
    10c2:	af 93       	push	r26
    10c4:	bf 93       	push	r27
    10c6:	ef 93       	push	r30
    10c8:	ff 93       	push	r31
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_OCB_INT != NULL)
    10d2:	80 91 b3 00 	lds	r24, 0x00B3
    10d6:	90 91 b4 00 	lds	r25, 0x00B4
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	29 f0       	breq	.+10     	; 0x10e8 <__vector_8+0x40>
	{
		TIMER_ISR.TIMER_1_OCB_INT();
    10de:	e0 91 b3 00 	lds	r30, 0x00B3
    10e2:	f0 91 b4 00 	lds	r31, 0x00B4
    10e6:	09 95       	icall
	}
}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <Set_CallBack_TIMER_1_CAPT_INT>:


void Set_CallBack_TIMER_1_CAPT_INT(void (*ptr)(void))
{
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <Set_CallBack_TIMER_1_CAPT_INT+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	9a 81       	ldd	r25, Y+2	; 0x02
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	31 f0       	breq	.+12     	; 0x1130 <Set_CallBack_TIMER_1_CAPT_INT+0x22>
	{
		TIMER_ISR.TIMER_1_CAPT_INT = ptr;
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	9a 81       	ldd	r25, Y+2	; 0x02
    1128:	90 93 b6 00 	sts	0x00B6, r25
    112c:	80 93 b5 00 	sts	0x00B5, r24
	}
}
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	cf 91       	pop	r28
    1136:	df 91       	pop	r29
    1138:	08 95       	ret

0000113a <__vector_6>:
void __vector_6 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_6 (void)
{
    113a:	1f 92       	push	r1
    113c:	0f 92       	push	r0
    113e:	0f b6       	in	r0, 0x3f	; 63
    1140:	0f 92       	push	r0
    1142:	11 24       	eor	r1, r1
    1144:	2f 93       	push	r18
    1146:	3f 93       	push	r19
    1148:	4f 93       	push	r20
    114a:	5f 93       	push	r21
    114c:	6f 93       	push	r22
    114e:	7f 93       	push	r23
    1150:	8f 93       	push	r24
    1152:	9f 93       	push	r25
    1154:	af 93       	push	r26
    1156:	bf 93       	push	r27
    1158:	ef 93       	push	r30
    115a:	ff 93       	push	r31
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_1_CAPT_INT != NULL)
    1164:	80 91 b5 00 	lds	r24, 0x00B5
    1168:	90 91 b6 00 	lds	r25, 0x00B6
    116c:	00 97       	sbiw	r24, 0x00	; 0
    116e:	29 f0       	breq	.+10     	; 0x117a <__vector_6+0x40>
	{
		TIMER_ISR.TIMER_1_CAPT_INT();
    1170:	e0 91 b5 00 	lds	r30, 0x00B5
    1174:	f0 91 b6 00 	lds	r31, 0x00B6
    1178:	09 95       	icall
	}
}
    117a:	cf 91       	pop	r28
    117c:	df 91       	pop	r29
    117e:	ff 91       	pop	r31
    1180:	ef 91       	pop	r30
    1182:	bf 91       	pop	r27
    1184:	af 91       	pop	r26
    1186:	9f 91       	pop	r25
    1188:	8f 91       	pop	r24
    118a:	7f 91       	pop	r23
    118c:	6f 91       	pop	r22
    118e:	5f 91       	pop	r21
    1190:	4f 91       	pop	r20
    1192:	3f 91       	pop	r19
    1194:	2f 91       	pop	r18
    1196:	0f 90       	pop	r0
    1198:	0f be       	out	0x3f, r0	; 63
    119a:	0f 90       	pop	r0
    119c:	1f 90       	pop	r1
    119e:	18 95       	reti

000011a0 <Set_CallBack_TIMER_2_OVF_INT>:
 */



void Set_CallBack_TIMER_2_OVF_INT(void (*ptr)(void))
{
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <Set_CallBack_TIMER_2_OVF_INT+0x6>
    11a6:	cd b7       	in	r28, 0x3d	; 61
    11a8:	de b7       	in	r29, 0x3e	; 62
    11aa:	9a 83       	std	Y+2, r25	; 0x02
    11ac:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	00 97       	sbiw	r24, 0x00	; 0
    11b4:	31 f0       	breq	.+12     	; 0x11c2 <Set_CallBack_TIMER_2_OVF_INT+0x22>
	{
		TIMER_ISR.TIMER_2_OVF_INT = ptr;
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ba:	90 93 b8 00 	sts	0x00B8, r25
    11be:	80 93 b7 00 	sts	0x00B7, r24
	}
}
    11c2:	0f 90       	pop	r0
    11c4:	0f 90       	pop	r0
    11c6:	cf 91       	pop	r28
    11c8:	df 91       	pop	r29
    11ca:	08 95       	ret

000011cc <__vector_5>:
void __vector_5 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_5 (void)
{
    11cc:	1f 92       	push	r1
    11ce:	0f 92       	push	r0
    11d0:	0f b6       	in	r0, 0x3f	; 63
    11d2:	0f 92       	push	r0
    11d4:	11 24       	eor	r1, r1
    11d6:	2f 93       	push	r18
    11d8:	3f 93       	push	r19
    11da:	4f 93       	push	r20
    11dc:	5f 93       	push	r21
    11de:	6f 93       	push	r22
    11e0:	7f 93       	push	r23
    11e2:	8f 93       	push	r24
    11e4:	9f 93       	push	r25
    11e6:	af 93       	push	r26
    11e8:	bf 93       	push	r27
    11ea:	ef 93       	push	r30
    11ec:	ff 93       	push	r31
    11ee:	df 93       	push	r29
    11f0:	cf 93       	push	r28
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_2_OVF_INT != NULL)
    11f6:	80 91 b7 00 	lds	r24, 0x00B7
    11fa:	90 91 b8 00 	lds	r25, 0x00B8
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	29 f0       	breq	.+10     	; 0x120c <__vector_5+0x40>
	{
		TIMER_ISR.TIMER_2_OVF_INT();
    1202:	e0 91 b7 00 	lds	r30, 0x00B7
    1206:	f0 91 b8 00 	lds	r31, 0x00B8
    120a:	09 95       	icall
	}
}
    120c:	cf 91       	pop	r28
    120e:	df 91       	pop	r29
    1210:	ff 91       	pop	r31
    1212:	ef 91       	pop	r30
    1214:	bf 91       	pop	r27
    1216:	af 91       	pop	r26
    1218:	9f 91       	pop	r25
    121a:	8f 91       	pop	r24
    121c:	7f 91       	pop	r23
    121e:	6f 91       	pop	r22
    1220:	5f 91       	pop	r21
    1222:	4f 91       	pop	r20
    1224:	3f 91       	pop	r19
    1226:	2f 91       	pop	r18
    1228:	0f 90       	pop	r0
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	0f 90       	pop	r0
    122e:	1f 90       	pop	r1
    1230:	18 95       	reti

00001232 <Set_CallBack_TIMER_2_OC_INT>:


void Set_CallBack_TIMER_2_OC_INT(void (*ptr)(void))
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <Set_CallBack_TIMER_2_OC_INT+0x6>
    1238:	cd b7       	in	r28, 0x3d	; 61
    123a:	de b7       	in	r29, 0x3e	; 62
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	31 f0       	breq	.+12     	; 0x1254 <Set_CallBack_TIMER_2_OC_INT+0x22>
	{
		TIMER_ISR.TIMER_2_OC_INT = ptr;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	90 93 ba 00 	sts	0x00BA, r25
    1250:	80 93 b9 00 	sts	0x00B9, r24
	}
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	08 95       	ret

0000125e <__vector_4>:
void __vector_4 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_4 (void)
{
    125e:	1f 92       	push	r1
    1260:	0f 92       	push	r0
    1262:	0f b6       	in	r0, 0x3f	; 63
    1264:	0f 92       	push	r0
    1266:	11 24       	eor	r1, r1
    1268:	2f 93       	push	r18
    126a:	3f 93       	push	r19
    126c:	4f 93       	push	r20
    126e:	5f 93       	push	r21
    1270:	6f 93       	push	r22
    1272:	7f 93       	push	r23
    1274:	8f 93       	push	r24
    1276:	9f 93       	push	r25
    1278:	af 93       	push	r26
    127a:	bf 93       	push	r27
    127c:	ef 93       	push	r30
    127e:	ff 93       	push	r31
    1280:	df 93       	push	r29
    1282:	cf 93       	push	r28
    1284:	cd b7       	in	r28, 0x3d	; 61
    1286:	de b7       	in	r29, 0x3e	; 62
	if(TIMER_ISR.TIMER_2_OC_INT != NULL)
    1288:	80 91 b9 00 	lds	r24, 0x00B9
    128c:	90 91 ba 00 	lds	r25, 0x00BA
    1290:	00 97       	sbiw	r24, 0x00	; 0
    1292:	29 f0       	breq	.+10     	; 0x129e <__vector_4+0x40>
	{
		TIMER_ISR.TIMER_2_OC_INT();
    1294:	e0 91 b9 00 	lds	r30, 0x00B9
    1298:	f0 91 ba 00 	lds	r31, 0x00BA
    129c:	09 95       	icall
	}
}
    129e:	cf 91       	pop	r28
    12a0:	df 91       	pop	r29
    12a2:	ff 91       	pop	r31
    12a4:	ef 91       	pop	r30
    12a6:	bf 91       	pop	r27
    12a8:	af 91       	pop	r26
    12aa:	9f 91       	pop	r25
    12ac:	8f 91       	pop	r24
    12ae:	7f 91       	pop	r23
    12b0:	6f 91       	pop	r22
    12b2:	5f 91       	pop	r21
    12b4:	4f 91       	pop	r20
    12b6:	3f 91       	pop	r19
    12b8:	2f 91       	pop	r18
    12ba:	0f 90       	pop	r0
    12bc:	0f be       	out	0x3f, r0	; 63
    12be:	0f 90       	pop	r0
    12c0:	1f 90       	pop	r1
    12c2:	18 95       	reti

000012c4 <Timer_init>:
 */



void Timer_init(timer_config_type *timer_config_ptr)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	00 d0       	rcall	.+0      	; 0x12ca <Timer_init+0x6>
    12ca:	00 d0       	rcall	.+0      	; 0x12cc <Timer_init+0x8>
    12cc:	cd b7       	in	r28, 0x3d	; 61
    12ce:	de b7       	in	r29, 0x3e	; 62
    12d0:	9a 83       	std	Y+2, r25	; 0x02
    12d2:	89 83       	std	Y+1, r24	; 0x01
	Timer_DeInit(timer_config_ptr->timer);/*deinitialize the desired timer */
    12d4:	e9 81       	ldd	r30, Y+1	; 0x01
    12d6:	fa 81       	ldd	r31, Y+2	; 0x02
    12d8:	81 85       	ldd	r24, Z+9	; 0x09
    12da:	0e 94 c8 0a 	call	0x1590	; 0x1590 <Timer_DeInit>
	switch(timer_config_ptr->timer)
    12de:	e9 81       	ldd	r30, Y+1	; 0x01
    12e0:	fa 81       	ldd	r31, Y+2	; 0x02
    12e2:	81 85       	ldd	r24, Z+9	; 0x09
    12e4:	28 2f       	mov	r18, r24
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	3c 83       	std	Y+4, r19	; 0x04
    12ea:	2b 83       	std	Y+3, r18	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	81 30       	cpi	r24, 0x01	; 1
    12f2:	91 05       	cpc	r25, r1
    12f4:	09 f4       	brne	.+2      	; 0x12f8 <Timer_init+0x34>
    12f6:	4e c0       	rjmp	.+156    	; 0x1394 <Timer_init+0xd0>
    12f8:	2b 81       	ldd	r18, Y+3	; 0x03
    12fa:	3c 81       	ldd	r19, Y+4	; 0x04
    12fc:	22 30       	cpi	r18, 0x02	; 2
    12fe:	31 05       	cpc	r19, r1
    1300:	09 f4       	brne	.+2      	; 0x1304 <Timer_init+0x40>
    1302:	b1 c0       	rjmp	.+354    	; 0x1466 <Timer_init+0x1a2>
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	09 f0       	breq	.+2      	; 0x130e <Timer_init+0x4a>
    130c:	ee c0       	rjmp	.+476    	; 0x14ea <Timer_init+0x226>
		 * FOC0= 0 ; because non_pwm mode
		 * select a prescaler
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * */
		TCNT0_REG = timer_config_ptr->initial_value; /*Set Timer0 initial value to 0*/
    130e:	a2 e5       	ldi	r26, 0x52	; 82
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	e9 81       	ldd	r30, Y+1	; 0x01
    1314:	fa 81       	ldd	r31, Y+2	; 0x02
    1316:	84 81       	ldd	r24, Z+4	; 0x04
    1318:	95 81       	ldd	r25, Z+5	; 0x05
    131a:	8c 93       	st	X, r24
		SET_BIT(TCC0_REG,7)   ; /* non-pwm mode*/
    131c:	a3 e5       	ldi	r26, 0x53	; 83
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e3 e5       	ldi	r30, 0x53	; 83
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	80 68       	ori	r24, 0x80	; 128
    1328:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    132a:	e9 81       	ldd	r30, Y+1	; 0x01
    132c:	fa 81       	ldd	r31, Y+2	; 0x02
    132e:	80 85       	ldd	r24, Z+8	; 0x08
    1330:	88 23       	and	r24, r24
    1332:	41 f4       	brne	.+16     	; 0x1344 <Timer_init+0x80>
		{
			SET_BIT(TIMSK_REG,0)    ;/* Enable Timer0 over flow Interrupt*/
    1334:	a9 e5       	ldi	r26, 0x59	; 89
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e9 e5       	ldi	r30, 0x59	; 89
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	81 60       	ori	r24, 0x01	; 1
    1340:	8c 93       	st	X, r24
    1342:	1a c0       	rjmp	.+52     	; 0x1378 <Timer_init+0xb4>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    1344:	e9 81       	ldd	r30, Y+1	; 0x01
    1346:	fa 81       	ldd	r31, Y+2	; 0x02
    1348:	80 85       	ldd	r24, Z+8	; 0x08
    134a:	81 30       	cpi	r24, 0x01	; 1
    134c:	a9 f4       	brne	.+42     	; 0x1378 <Timer_init+0xb4>
		{
			OCR0_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    134e:	ac e5       	ldi	r26, 0x5C	; 92
    1350:	b0 e0       	ldi	r27, 0x00	; 0
    1352:	e9 81       	ldd	r30, Y+1	; 0x01
    1354:	fa 81       	ldd	r31, Y+2	; 0x02
    1356:	80 81       	ld	r24, Z
    1358:	91 81       	ldd	r25, Z+1	; 0x01
    135a:	8c 93       	st	X, r24
			SET_BIT(TCC0_REG,3)    ; /* CTC mode */
    135c:	a3 e5       	ldi	r26, 0x53	; 83
    135e:	b0 e0       	ldi	r27, 0x00	; 0
    1360:	e3 e5       	ldi	r30, 0x53	; 83
    1362:	f0 e0       	ldi	r31, 0x00	; 0
    1364:	80 81       	ld	r24, Z
    1366:	88 60       	ori	r24, 0x08	; 8
    1368:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,1)    ; /* Enable CTC mode interrupt */
    136a:	a9 e5       	ldi	r26, 0x59	; 89
    136c:	b0 e0       	ldi	r27, 0x00	; 0
    136e:	e9 e5       	ldi	r30, 0x59	; 89
    1370:	f0 e0       	ldi	r31, 0x00	; 0
    1372:	80 81       	ld	r24, Z
    1374:	82 60       	ori	r24, 0x02	; 2
    1376:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC0_REG=(TCC0_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111 );
    1378:	a3 e5       	ldi	r26, 0x53	; 83
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e3 e5       	ldi	r30, 0x53	; 83
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	98 2f       	mov	r25, r24
    1384:	98 7f       	andi	r25, 0xF8	; 248
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	86 81       	ldd	r24, Z+6	; 0x06
    138c:	87 70       	andi	r24, 0x07	; 7
    138e:	89 2b       	or	r24, r25
    1390:	8c 93       	st	X, r24
    1392:	ab c0       	rjmp	.+342    	; 0x14ea <Timer_init+0x226>
		break;
	case TIMER_1:
		TCNT1_REG = timer_config_ptr->initial_value;/*set timer1 initial value */
    1394:	ac e4       	ldi	r26, 0x4C	; 76
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	e9 81       	ldd	r30, Y+1	; 0x01
    139a:	fa 81       	ldd	r31, Y+2	; 0x02
    139c:	84 81       	ldd	r24, Z+4	; 0x04
    139e:	95 81       	ldd	r25, Z+5	; 0x05
    13a0:	11 96       	adiw	r26, 0x01	; 1
    13a2:	9c 93       	st	X, r25
    13a4:	8e 93       	st	-X, r24
		SET_BIT(TCC1A_REG,3)   ;/*non-pwm mode */
    13a6:	af e4       	ldi	r26, 0x4F	; 79
    13a8:	b0 e0       	ldi	r27, 0x00	; 0
    13aa:	ef e4       	ldi	r30, 0x4F	; 79
    13ac:	f0 e0       	ldi	r31, 0x00	; 0
    13ae:	80 81       	ld	r24, Z
    13b0:	88 60       	ori	r24, 0x08	; 8
    13b2:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    13b4:	e9 81       	ldd	r30, Y+1	; 0x01
    13b6:	fa 81       	ldd	r31, Y+2	; 0x02
    13b8:	80 85       	ldd	r24, Z+8	; 0x08
    13ba:	88 23       	and	r24, r24
    13bc:	41 f4       	brne	.+16     	; 0x13ce <Timer_init+0x10a>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM12)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
			 */
			/**************************************************************************/
			SET_BIT(TIMSK_REG,2)    ;/*Enable Timer1 over flow Interrupt*/
    13be:	a9 e5       	ldi	r26, 0x59	; 89
    13c0:	b0 e0       	ldi	r27, 0x00	; 0
    13c2:	e9 e5       	ldi	r30, 0x59	; 89
    13c4:	f0 e0       	ldi	r31, 0x00	; 0
    13c6:	80 81       	ld	r24, Z
    13c8:	84 60       	ori	r24, 0x04	; 4
    13ca:	8c 93       	st	X, r24
    13cc:	3e c0       	rjmp	.+124    	; 0x144a <Timer_init+0x186>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    13ce:	e9 81       	ldd	r30, Y+1	; 0x01
    13d0:	fa 81       	ldd	r31, Y+2	; 0x02
    13d2:	80 85       	ldd	r24, Z+8	; 0x08
    13d4:	81 30       	cpi	r24, 0x01	; 1
    13d6:	c9 f5       	brne	.+114    	; 0x144a <Timer_init+0x186>
		{
			if(timer_config_ptr->channels_number == CHANNEL_1A)
    13d8:	e9 81       	ldd	r30, Y+1	; 0x01
    13da:	fa 81       	ldd	r31, Y+2	; 0x02
    13dc:	82 85       	ldd	r24, Z+10	; 0x0a
    13de:	88 23       	and	r24, r24
    13e0:	c1 f4       	brne	.+48     	; 0x1412 <Timer_init+0x14e>
			{
				OCR1A_REG = timer_config_ptr->compared_value; /*Set timer1 Compare Value*/
    13e2:	aa e4       	ldi	r26, 0x4A	; 74
    13e4:	b0 e0       	ldi	r27, 0x00	; 0
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	80 81       	ld	r24, Z
    13ec:	91 81       	ldd	r25, Z+1	; 0x01
    13ee:	11 96       	adiw	r26, 0x01	; 1
    13f0:	9c 93       	st	X, r25
    13f2:	8e 93       	st	-X, r24
				SET_BIT(TCC1B_REG,3)    ;/* enable CTC  mode*/
    13f4:	ae e4       	ldi	r26, 0x4E	; 78
    13f6:	b0 e0       	ldi	r27, 0x00	; 0
    13f8:	ee e4       	ldi	r30, 0x4E	; 78
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
    13fe:	88 60       	ori	r24, 0x08	; 8
    1400:	8c 93       	st	X, r24
				SET_BIT(TIMSK_REG,4)    ; /* enable CTC channel A Interrupt*/
    1402:	a9 e5       	ldi	r26, 0x59	; 89
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e9 e5       	ldi	r30, 0x59	; 89
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	80 61       	ori	r24, 0x10	; 16
    140e:	8c 93       	st	X, r24
    1410:	1c c0       	rjmp	.+56     	; 0x144a <Timer_init+0x186>
			CLEAR_BIT(TCCR1A,WGM11)  ;
			CLEAR_BIT(TCCR1B,WGM13)  ;
				 */
				/**************************************************************************/
			}
			else if (timer_config_ptr->channels_number==CHANNEL_1B)
    1412:	e9 81       	ldd	r30, Y+1	; 0x01
    1414:	fa 81       	ldd	r31, Y+2	; 0x02
    1416:	82 85       	ldd	r24, Z+10	; 0x0a
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	b9 f4       	brne	.+46     	; 0x144a <Timer_init+0x186>
			{
				SET_BIT(TCC1A_REG,2)   ;/*non-pwm mode channel B*/
    141c:	af e4       	ldi	r26, 0x4F	; 79
    141e:	b0 e0       	ldi	r27, 0x00	; 0
    1420:	ef e4       	ldi	r30, 0x4F	; 79
    1422:	f0 e0       	ldi	r31, 0x00	; 0
    1424:	80 81       	ld	r24, Z
    1426:	84 60       	ori	r24, 0x04	; 4
    1428:	8c 93       	st	X, r24
				OCR1B_REG = timer_config_ptr->compared_value_B_channel; /*Set timer1 Compare Value*/
    142a:	a8 e4       	ldi	r26, 0x48	; 72
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e9 81       	ldd	r30, Y+1	; 0x01
    1430:	fa 81       	ldd	r31, Y+2	; 0x02
    1432:	82 81       	ldd	r24, Z+2	; 0x02
    1434:	93 81       	ldd	r25, Z+3	; 0x03
    1436:	11 96       	adiw	r26, 0x01	; 1
    1438:	9c 93       	st	X, r25
    143a:	8e 93       	st	-X, r24
				SET_BIT(TIMSK_REG,3);/* enable CTC channel B Interrupt*/
    143c:	a9 e5       	ldi	r26, 0x59	; 89
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e9 e5       	ldi	r30, 0x59	; 89
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	88 60       	ori	r24, 0x08	; 8
    1448:	8c 93       	st	X, r24
			}
		}

		TCC1B_REG=(TCC1B_REG &0b11111000)|(timer_config_ptr->T0_T1_used_freq & 0b00000111);/*select the prescaler */
    144a:	ae e4       	ldi	r26, 0x4E	; 78
    144c:	b0 e0       	ldi	r27, 0x00	; 0
    144e:	ee e4       	ldi	r30, 0x4E	; 78
    1450:	f0 e0       	ldi	r31, 0x00	; 0
    1452:	80 81       	ld	r24, Z
    1454:	98 2f       	mov	r25, r24
    1456:	98 7f       	andi	r25, 0xF8	; 248
    1458:	e9 81       	ldd	r30, Y+1	; 0x01
    145a:	fa 81       	ldd	r31, Y+2	; 0x02
    145c:	86 81       	ldd	r24, Z+6	; 0x06
    145e:	87 70       	andi	r24, 0x07	; 7
    1460:	89 2b       	or	r24, r25
    1462:	8c 93       	st	X, r24
    1464:	42 c0       	rjmp	.+132    	; 0x14ea <Timer_init+0x226>
		 * if mode is Normal mode we enable  Timer0 normal mode Interrupt
		 * and disable Timer0 compare Interrupt
		 * else if mode is CTC mode we enable Timer0  compare mode Interrupt
		 * and disable Timer0 normal Interrupt ad select the state of OSR0 pin
		 * */
		TCNT2_REG = timer_config_ptr->initial_value; /*Set Timer2 initial value */
    1466:	a4 e4       	ldi	r26, 0x44	; 68
    1468:	b0 e0       	ldi	r27, 0x00	; 0
    146a:	e9 81       	ldd	r30, Y+1	; 0x01
    146c:	fa 81       	ldd	r31, Y+2	; 0x02
    146e:	84 81       	ldd	r24, Z+4	; 0x04
    1470:	95 81       	ldd	r25, Z+5	; 0x05
    1472:	8c 93       	st	X, r24
		SET_BIT(TCC2_REG,7); /* non-pwm mode*/
    1474:	a5 e4       	ldi	r26, 0x45	; 69
    1476:	b0 e0       	ldi	r27, 0x00	; 0
    1478:	e5 e4       	ldi	r30, 0x45	; 69
    147a:	f0 e0       	ldi	r31, 0x00	; 0
    147c:	80 81       	ld	r24, Z
    147e:	80 68       	ori	r24, 0x80	; 128
    1480:	8c 93       	st	X, r24
		if (timer_config_ptr->operated_mode==NORMAL_MODE)
    1482:	e9 81       	ldd	r30, Y+1	; 0x01
    1484:	fa 81       	ldd	r31, Y+2	; 0x02
    1486:	80 85       	ldd	r24, Z+8	; 0x08
    1488:	88 23       	and	r24, r24
    148a:	41 f4       	brne	.+16     	; 0x149c <Timer_init+0x1d8>
			/*Normal mode*/
			/*
			CLEAR_BIT(TCCR2,WGM21)  ;
			CLEAR_BIT(TCCR2,WGM20)  ;
			 */
			SET_BIT(TIMSK_REG,6)    ;/* Enable Timer0 over flow Interrupt*/
    148c:	a9 e5       	ldi	r26, 0x59	; 89
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e9 e5       	ldi	r30, 0x59	; 89
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	80 64       	ori	r24, 0x40	; 64
    1498:	8c 93       	st	X, r24
    149a:	1a c0       	rjmp	.+52     	; 0x14d0 <Timer_init+0x20c>
		}
		else if (timer_config_ptr->operated_mode==CTC_MODE)
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	80 85       	ldd	r24, Z+8	; 0x08
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	a9 f4       	brne	.+42     	; 0x14d0 <Timer_init+0x20c>
		{
			OCR2_REG = timer_config_ptr->compared_value; /*Set Compare Value*/
    14a6:	a3 e4       	ldi	r26, 0x43	; 67
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e9 81       	ldd	r30, Y+1	; 0x01
    14ac:	fa 81       	ldd	r31, Y+2	; 0x02
    14ae:	80 81       	ld	r24, Z
    14b0:	91 81       	ldd	r25, Z+1	; 0x01
    14b2:	8c 93       	st	X, r24
			SET_BIT(TCC2_REG,3)    ; /* CTC mode */
    14b4:	a5 e4       	ldi	r26, 0x45	; 69
    14b6:	b0 e0       	ldi	r27, 0x00	; 0
    14b8:	e5 e4       	ldi	r30, 0x45	; 69
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 81       	ld	r24, Z
    14be:	88 60       	ori	r24, 0x08	; 8
    14c0:	8c 93       	st	X, r24
			SET_BIT(TIMSK_REG,7)    ; /* enable CTC Interrupt*/
    14c2:	a9 e5       	ldi	r26, 0x59	; 89
    14c4:	b0 e0       	ldi	r27, 0x00	; 0
    14c6:	e9 e5       	ldi	r30, 0x59	; 89
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	80 81       	ld	r24, Z
    14cc:	80 68       	ori	r24, 0x80	; 128
    14ce:	8c 93       	st	X, r24
		}
		/*select the clk to start counting */
		TCC2_REG=(TCC2_REG &0b11111000)|(timer_config_ptr->T2_used_freq & 0b00000111 );
    14d0:	a5 e4       	ldi	r26, 0x45	; 69
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e5 e4       	ldi	r30, 0x45	; 69
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	98 2f       	mov	r25, r24
    14dc:	98 7f       	andi	r25, 0xF8	; 248
    14de:	e9 81       	ldd	r30, Y+1	; 0x01
    14e0:	fa 81       	ldd	r31, Y+2	; 0x02
    14e2:	87 81       	ldd	r24, Z+7	; 0x07
    14e4:	87 70       	andi	r24, 0x07	; 7
    14e6:	89 2b       	or	r24, r25
    14e8:	8c 93       	st	X, r24
		break;
	case ALL:
		break;
	}
}
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	0f 90       	pop	r0
    14f0:	0f 90       	pop	r0
    14f2:	cf 91       	pop	r28
    14f4:	df 91       	pop	r29
    14f6:	08 95       	ret

000014f8 <change_compared_and_duty_value>:
 * it assign the compared value or duty cycle value for
 * every desired timer
 * */

void change_compared_and_duty_value(timer_config_type * config_ptr)
{
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <change_compared_and_duty_value+0x6>
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <change_compared_and_duty_value+0x8>
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	9a 83       	std	Y+2, r25	; 0x02
    1506:	89 83       	std	Y+1, r24	; 0x01
	switch(config_ptr->timer)
    1508:	e9 81       	ldd	r30, Y+1	; 0x01
    150a:	fa 81       	ldd	r31, Y+2	; 0x02
    150c:	81 85       	ldd	r24, Z+9	; 0x09
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	3c 83       	std	Y+4, r19	; 0x04
    1514:	2b 83       	std	Y+3, r18	; 0x03
    1516:	8b 81       	ldd	r24, Y+3	; 0x03
    1518:	9c 81       	ldd	r25, Y+4	; 0x04
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	91 05       	cpc	r25, r1
    151e:	89 f0       	breq	.+34     	; 0x1542 <change_compared_and_duty_value+0x4a>
    1520:	2b 81       	ldd	r18, Y+3	; 0x03
    1522:	3c 81       	ldd	r19, Y+4	; 0x04
    1524:	22 30       	cpi	r18, 0x02	; 2
    1526:	31 05       	cpc	r19, r1
    1528:	29 f1       	breq	.+74     	; 0x1574 <change_compared_and_duty_value+0x7c>
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	9c 81       	ldd	r25, Y+4	; 0x04
    152e:	00 97       	sbiw	r24, 0x00	; 0
    1530:	41 f5       	brne	.+80     	; 0x1582 <change_compared_and_duty_value+0x8a>
	{
	case TIMER_0:
		OCR0_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    1532:	ac e5       	ldi	r26, 0x5C	; 92
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e9 81       	ldd	r30, Y+1	; 0x01
    1538:	fa 81       	ldd	r31, Y+2	; 0x02
    153a:	80 81       	ld	r24, Z
    153c:	91 81       	ldd	r25, Z+1	; 0x01
    153e:	8c 93       	st	X, r24
    1540:	20 c0       	rjmp	.+64     	; 0x1582 <change_compared_and_duty_value+0x8a>
		break ;
	case TIMER_1:
		OCR1A_REG = config_ptr->compared_value; /*Set timer1 Compare Value*/
    1542:	aa e4       	ldi	r26, 0x4A	; 74
    1544:	b0 e0       	ldi	r27, 0x00	; 0
    1546:	e9 81       	ldd	r30, Y+1	; 0x01
    1548:	fa 81       	ldd	r31, Y+2	; 0x02
    154a:	80 81       	ld	r24, Z
    154c:	91 81       	ldd	r25, Z+1	; 0x01
    154e:	11 96       	adiw	r26, 0x01	; 1
    1550:	9c 93       	st	X, r25
    1552:	8e 93       	st	-X, r24
		if (config_ptr->channels_number==CHANNEL_1B)
    1554:	e9 81       	ldd	r30, Y+1	; 0x01
    1556:	fa 81       	ldd	r31, Y+2	; 0x02
    1558:	82 85       	ldd	r24, Z+10	; 0x0a
    155a:	81 30       	cpi	r24, 0x01	; 1
    155c:	91 f4       	brne	.+36     	; 0x1582 <change_compared_and_duty_value+0x8a>
		{
			OCR1B_REG = config_ptr->compared_value_B_channel; /*Set timer1 B Compare Value*/
    155e:	e8 e4       	ldi	r30, 0x48	; 72
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	a9 81       	ldd	r26, Y+1	; 0x01
    1564:	ba 81       	ldd	r27, Y+2	; 0x02
    1566:	12 96       	adiw	r26, 0x02	; 2
    1568:	8d 91       	ld	r24, X+
    156a:	9c 91       	ld	r25, X
    156c:	13 97       	sbiw	r26, 0x03	; 3
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
    1572:	07 c0       	rjmp	.+14     	; 0x1582 <change_compared_and_duty_value+0x8a>
		}
		break ;
	case TIMER_2:
		OCR2_REG = (u8)(config_ptr->compared_value); /*Set Compare Value*/
    1574:	a3 e4       	ldi	r26, 0x43	; 67
    1576:	b0 e0       	ldi	r27, 0x00	; 0
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	8c 93       	st	X, r24
		break ;
	}
}
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <Timer_DeInit>:

/*Description
 * this function is responsible for reset all timer registers
 * */
void Timer_DeInit(TIMER_e timer)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	00 d0       	rcall	.+0      	; 0x1596 <Timer_DeInit+0x6>
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	28 2f       	mov	r18, r24
    15a2:	30 e0       	ldi	r19, 0x00	; 0
    15a4:	3b 83       	std	Y+3, r19	; 0x03
    15a6:	2a 83       	std	Y+2, r18	; 0x02
    15a8:	8a 81       	ldd	r24, Y+2	; 0x02
    15aa:	9b 81       	ldd	r25, Y+3	; 0x03
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	91 05       	cpc	r25, r1
    15b0:	19 f1       	breq	.+70     	; 0x15f8 <Timer_DeInit+0x68>
    15b2:	2a 81       	ldd	r18, Y+2	; 0x02
    15b4:	3b 81       	ldd	r19, Y+3	; 0x03
    15b6:	22 30       	cpi	r18, 0x02	; 2
    15b8:	31 05       	cpc	r19, r1
    15ba:	2c f4       	brge	.+10     	; 0x15c6 <Timer_DeInit+0x36>
    15bc:	8a 81       	ldd	r24, Y+2	; 0x02
    15be:	9b 81       	ldd	r25, Y+3	; 0x03
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	61 f0       	breq	.+24     	; 0x15dc <Timer_DeInit+0x4c>
    15c4:	56 c0       	rjmp	.+172    	; 0x1672 <Timer_DeInit+0xe2>
    15c6:	2a 81       	ldd	r18, Y+2	; 0x02
    15c8:	3b 81       	ldd	r19, Y+3	; 0x03
    15ca:	22 30       	cpi	r18, 0x02	; 2
    15cc:	31 05       	cpc	r19, r1
    15ce:	31 f1       	breq	.+76     	; 0x161c <Timer_DeInit+0x8c>
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	9b 81       	ldd	r25, Y+3	; 0x03
    15d4:	83 30       	cpi	r24, 0x03	; 3
    15d6:	91 05       	cpc	r25, r1
    15d8:	79 f1       	breq	.+94     	; 0x1638 <Timer_DeInit+0xa8>
    15da:	4b c0       	rjmp	.+150    	; 0x1672 <Timer_DeInit+0xe2>
	{
	case TIMER_0:
		TCC0_REG= 0; /* clear control register*/
    15dc:	e3 e5       	ldi	r30, 0x53	; 83
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer 0*/
    15e2:	e2 e5       	ldi	r30, 0x52	; 82
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11111100);/*Disable module interrupt interrupt*/
    15e8:	a9 e5       	ldi	r26, 0x59	; 89
    15ea:	b0 e0       	ldi	r27, 0x00	; 0
    15ec:	e9 e5       	ldi	r30, 0x59	; 89
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	8c 7f       	andi	r24, 0xFC	; 252
    15f4:	8c 93       	st	X, r24
    15f6:	3d c0       	rjmp	.+122    	; 0x1672 <Timer_DeInit+0xe2>
		break;
	case TIMER_1:
		TCC1A_REG=0; /* clear control register*/
    15f8:	ef e4       	ldi	r30, 0x4F	; 79
    15fa:	f0 e0       	ldi	r31, 0x00	; 0
    15fc:	10 82       	st	Z, r1
		TCC1B_REG=0 ;
    15fe:	ee e4       	ldi	r30, 0x4E	; 78
    1600:	f0 e0       	ldi	r31, 0x00	; 0
    1602:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer 0*/
    1604:	ec e4       	ldi	r30, 0x4C	; 76
    1606:	f0 e0       	ldi	r31, 0x00	; 0
    1608:	11 82       	std	Z+1, r1	; 0x01
    160a:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b11100011);/*Disable module interrupt interrupt*/
    160c:	a9 e5       	ldi	r26, 0x59	; 89
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e9 e5       	ldi	r30, 0x59	; 89
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	83 7e       	andi	r24, 0xE3	; 227
    1618:	8c 93       	st	X, r24
    161a:	2b c0       	rjmp	.+86     	; 0x1672 <Timer_DeInit+0xe2>
		break;
	case TIMER_2:
		TCC2_REG= 0; /* clear control register*/
    161c:	e5 e4       	ldi	r30, 0x45	; 69
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer 0*/
    1622:	e4 e4       	ldi	r30, 0x44	; 68
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	10 82       	st	Z, r1
		TIMSK_REG=(TIMSK_REG & 0b00111111);/*Disable module interrupt interrupt*/
    1628:	a9 e5       	ldi	r26, 0x59	; 89
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e9 e5       	ldi	r30, 0x59	; 89
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	8f 73       	andi	r24, 0x3F	; 63
    1634:	8c 93       	st	X, r24
    1636:	1d c0       	rjmp	.+58     	; 0x1672 <Timer_DeInit+0xe2>
		break;
	case ALL:
		TIMSK_REG=(TIMSK_REG &0b00100000);/*Disable all timers modules interrupt interrupt*/
    1638:	a9 e5       	ldi	r26, 0x59	; 89
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e9 e5       	ldi	r30, 0x59	; 89
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	80 72       	andi	r24, 0x20	; 32
    1644:	8c 93       	st	X, r24
		/*===============Deinitialize Timer0=============================*/
		TCC0_REG= 0; /* clear control register*/
    1646:	e3 e5       	ldi	r30, 0x53	; 83
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	10 82       	st	Z, r1
		TCNT0_REG= 0; /* clear the timer */
    164c:	e2 e5       	ldi	r30, 0x52	; 82
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	10 82       	st	Z, r1
		/*===============Deinitialize Timer1=============================*/
		TCC1A_REG= 0; /* clear A control register*/
    1652:	ef e4       	ldi	r30, 0x4F	; 79
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	10 82       	st	Z, r1
		TCC1B_REG= 0;/* clear B control register*/
    1658:	ee e4       	ldi	r30, 0x4E	; 78
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	10 82       	st	Z, r1
		TCNT1_REG= 0; /* clear the timer */
    165e:	ec e4       	ldi	r30, 0x4C	; 76
    1660:	f0 e0       	ldi	r31, 0x00	; 0
    1662:	11 82       	std	Z+1, r1	; 0x01
    1664:	10 82       	st	Z, r1
		/*===============Deinitialize Timer2=============================*/
		TCC2_REG= 0; /* clear control register*/
    1666:	e5 e4       	ldi	r30, 0x45	; 69
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	10 82       	st	Z, r1
		TCNT2_REG= 0; /* clear the timer */
    166c:	e4 e4       	ldi	r30, 0x44	; 68
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	10 82       	st	Z, r1
		break;
	}
}
    1672:	0f 90       	pop	r0
    1674:	0f 90       	pop	r0
    1676:	0f 90       	pop	r0
    1678:	cf 91       	pop	r28
    167a:	df 91       	pop	r29
    167c:	08 95       	ret

0000167e <clear_timer>:
 * this func used to reset the timer to start count again from the beginning
 * we chose the timer to be cleared
 * */

void clear_timer(TIMER_e timer)
{
    167e:	df 93       	push	r29
    1680:	cf 93       	push	r28
    1682:	00 d0       	rcall	.+0      	; 0x1684 <clear_timer+0x6>
    1684:	0f 92       	push	r0
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	89 83       	std	Y+1, r24	; 0x01
	switch(timer)
    168c:	89 81       	ldd	r24, Y+1	; 0x01
    168e:	28 2f       	mov	r18, r24
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	3b 83       	std	Y+3, r19	; 0x03
    1694:	2a 83       	std	Y+2, r18	; 0x02
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	9b 81       	ldd	r25, Y+3	; 0x03
    169a:	81 30       	cpi	r24, 0x01	; 1
    169c:	91 05       	cpc	r25, r1
    169e:	c9 f0       	breq	.+50     	; 0x16d2 <clear_timer+0x54>
    16a0:	2a 81       	ldd	r18, Y+2	; 0x02
    16a2:	3b 81       	ldd	r19, Y+3	; 0x03
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <clear_timer+0x36>
    16aa:	8a 81       	ldd	r24, Y+2	; 0x02
    16ac:	9b 81       	ldd	r25, Y+3	; 0x03
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	61 f0       	breq	.+24     	; 0x16ca <clear_timer+0x4c>
    16b2:	22 c0       	rjmp	.+68     	; 0x16f8 <clear_timer+0x7a>
    16b4:	2a 81       	ldd	r18, Y+2	; 0x02
    16b6:	3b 81       	ldd	r19, Y+3	; 0x03
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	79 f0       	breq	.+30     	; 0x16dc <clear_timer+0x5e>
    16be:	8a 81       	ldd	r24, Y+2	; 0x02
    16c0:	9b 81       	ldd	r25, Y+3	; 0x03
    16c2:	83 30       	cpi	r24, 0x03	; 3
    16c4:	91 05       	cpc	r25, r1
    16c6:	71 f0       	breq	.+28     	; 0x16e4 <clear_timer+0x66>
    16c8:	17 c0       	rjmp	.+46     	; 0x16f8 <clear_timer+0x7a>
	{
	case TIMER_0:
		TCNT0_REG = 0; /* Set Timer0 initial value to 0*/
    16ca:	e2 e5       	ldi	r30, 0x52	; 82
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	10 82       	st	Z, r1
    16d0:	13 c0       	rjmp	.+38     	; 0x16f8 <clear_timer+0x7a>
		break;
	case TIMER_1:
		TCNT1_REG = 0; /* Set Timer1 initial value to 0*/
    16d2:	ec e4       	ldi	r30, 0x4C	; 76
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	11 82       	std	Z+1, r1	; 0x01
    16d8:	10 82       	st	Z, r1
    16da:	0e c0       	rjmp	.+28     	; 0x16f8 <clear_timer+0x7a>
		break;
	case TIMER_2:
		TCNT2_REG = 0; /* Set Timer2 initial value to 0*/
    16dc:	e4 e4       	ldi	r30, 0x44	; 68
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	10 82       	st	Z, r1
    16e2:	0a c0       	rjmp	.+20     	; 0x16f8 <clear_timer+0x7a>
		break;
	case ALL:
		TCNT0_REG = 0;  /* Set Timer0 initial value to 0*/
    16e4:	e2 e5       	ldi	r30, 0x52	; 82
    16e6:	f0 e0       	ldi	r31, 0x00	; 0
    16e8:	10 82       	st	Z, r1
		TCNT1_REG = 0;  /* Set Timer1 initial value to 0*/
    16ea:	ec e4       	ldi	r30, 0x4C	; 76
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	11 82       	std	Z+1, r1	; 0x01
    16f0:	10 82       	st	Z, r1
		TCNT2_REG = 0;  /* Set Timer2 initial value to 0*/
    16f2:	e4 e4       	ldi	r30, 0x44	; 68
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	10 82       	st	Z, r1
		break;
	default:
		break  ;
	}
}
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	cf 91       	pop	r28
    1700:	df 91       	pop	r29
    1702:	08 95       	ret

00001704 <PWM_timers_init>:
 * this function is responsible for pwm init for the desired timer
 * it take a ptr to struct
 *
 * */
void PWM_timers_init(PWM_timers_config *timer_config)
{
    1704:	0f 93       	push	r16
    1706:	1f 93       	push	r17
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <PWM_timers_init+0xa>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <PWM_timers_init+0xc>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01

	switch (timer_config->timer)
    1718:	e9 81       	ldd	r30, Y+1	; 0x01
    171a:	fa 81       	ldd	r31, Y+2	; 0x02
    171c:	81 85       	ldd	r24, Z+9	; 0x09
    171e:	28 2f       	mov	r18, r24
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	3c 83       	std	Y+4, r19	; 0x04
    1724:	2b 83       	std	Y+3, r18	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	81 30       	cpi	r24, 0x01	; 1
    172c:	91 05       	cpc	r25, r1
    172e:	09 f4       	brne	.+2      	; 0x1732 <PWM_timers_init+0x2e>
    1730:	43 c0       	rjmp	.+134    	; 0x17b8 <PWM_timers_init+0xb4>
    1732:	eb 81       	ldd	r30, Y+3	; 0x03
    1734:	fc 81       	ldd	r31, Y+4	; 0x04
    1736:	e2 30       	cpi	r30, 0x02	; 2
    1738:	f1 05       	cpc	r31, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <PWM_timers_init+0x3a>
    173c:	0f c1       	rjmp	.+542    	; 0x195c <PWM_timers_init+0x258>
    173e:	2b 81       	ldd	r18, Y+3	; 0x03
    1740:	3c 81       	ldd	r19, Y+4	; 0x04
    1742:	21 15       	cp	r18, r1
    1744:	31 05       	cpc	r19, r1
    1746:	09 f0       	breq	.+2      	; 0x174a <PWM_timers_init+0x46>
    1748:	46 c1       	rjmp	.+652    	; 0x19d6 <PWM_timers_init+0x2d2>
	{

	case TIMER_0:
		clear_timer(TIMER_0); /* Set Timer Initial Value to 0*/
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_timer>
		OCR0_REG  = timer_config->set_duty_cycle ; /* Set Compare Value*/
    1750:	ac e5       	ldi	r26, 0x5C	; 92
    1752:	b0 e0       	ldi	r27, 0x00	; 0
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	82 81       	ldd	r24, Z+2	; 0x02
    175a:	93 81       	ldd	r25, Z+3	; 0x03
    175c:	8c 93       	st	X, r24
		/*Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_B, PIN_3, OUTPUT);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	63 e0       	ldi	r22, 0x03	; 3
    1762:	41 e0       	ldi	r20, 0x01	; 1
    1764:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM01=1 & WGM00=1
		 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC0_REG,7);
    1768:	a3 e5       	ldi	r26, 0x53	; 83
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e3 e5       	ldi	r30, 0x53	; 83
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	8f 77       	andi	r24, 0x7F	; 127
    1774:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1776:	e9 81       	ldd	r30, Y+1	; 0x01
    1778:	fa 81       	ldd	r31, Y+2	; 0x02
    177a:	80 85       	ldd	r24, Z+8	; 0x08
    177c:	82 30       	cpi	r24, 0x02	; 2
    177e:	29 f4       	brne	.+10     	; 0x178a <PWM_timers_init+0x86>
		{
			TCC0_REG = (1<<3) | (1<<5) | (1<<6);
    1780:	e3 e5       	ldi	r30, 0x53	; 83
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	88 e6       	ldi	r24, 0x68	; 104
    1786:	80 83       	st	Z, r24
    1788:	09 c0       	rjmp	.+18     	; 0x179c <PWM_timers_init+0x98>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    178a:	e9 81       	ldd	r30, Y+1	; 0x01
    178c:	fa 81       	ldd	r31, Y+2	; 0x02
    178e:	80 85       	ldd	r24, Z+8	; 0x08
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	21 f4       	brne	.+8      	; 0x179c <PWM_timers_init+0x98>
		{
			TCC0_REG = (0<<3) | (1<<5) | (1<<6);
    1794:	e3 e5       	ldi	r30, 0x53	; 83
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 e6       	ldi	r24, 0x60	; 96
    179a:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC0_REG=(TCC0_REG & 0b11111000)|(timer_config->T0_T1_used_freq & 0b00000111 );
    179c:	a3 e5       	ldi	r26, 0x53	; 83
    179e:	b0 e0       	ldi	r27, 0x00	; 0
    17a0:	e3 e5       	ldi	r30, 0x53	; 83
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	98 2f       	mov	r25, r24
    17a8:	98 7f       	andi	r25, 0xF8	; 248
    17aa:	e9 81       	ldd	r30, Y+1	; 0x01
    17ac:	fa 81       	ldd	r31, Y+2	; 0x02
    17ae:	86 81       	ldd	r24, Z+6	; 0x06
    17b0:	87 70       	andi	r24, 0x07	; 7
    17b2:	89 2b       	or	r24, r25
    17b4:	8c 93       	st	X, r24
    17b6:	0f c1       	rjmp	.+542    	; 0x19d6 <PWM_timers_init+0x2d2>
		break;
	case TIMER_1:
		clear_timer(TIMER_1); /* Set Timer Initial Value to 0*/
    17b8:	81 e0       	ldi	r24, 0x01	; 1
    17ba:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_timer>
		ICR1_REG   = timer_config->timer1_TOP_value; /* Set TOP Value*/
    17be:	a6 e4       	ldi	r26, 0x46	; 70
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	e9 81       	ldd	r30, Y+1	; 0x01
    17c4:	fa 81       	ldd	r31, Y+2	; 0x02
    17c6:	80 81       	ld	r24, Z
    17c8:	91 81       	ldd	r25, Z+1	; 0x01
    17ca:	11 96       	adiw	r26, 0x01	; 1
    17cc:	9c 93       	st	X, r25
    17ce:	8e 93       	st	-X, r24
		OCR1A_REG  = timer_config->set_duty_cycle; /* Set Compare Value*/
    17d0:	aa e4       	ldi	r26, 0x4A	; 74
    17d2:	b0 e0       	ldi	r27, 0x00	; 0
    17d4:	e9 81       	ldd	r30, Y+1	; 0x01
    17d6:	fa 81       	ldd	r31, Y+2	; 0x02
    17d8:	82 81       	ldd	r24, Z+2	; 0x02
    17da:	93 81       	ldd	r25, Z+3	; 0x03
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
		/*Configure PD5/OC1A and PD4/OC1B as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_5, OUTPUT);/*OC1A->output*/
    17e2:	83 e0       	ldi	r24, 0x03	; 3
    17e4:	65 e0       	ldi	r22, 0x05	; 5
    17e6:	41 e0       	ldi	r20, 0x01	; 1
    17e8:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode mode 14
		 * 3. Clear OC1A when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 */

		CLR_BIT(TCC1A_REG,3);
    17ec:	af e4       	ldi	r26, 0x4F	; 79
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	ef e4       	ldi	r30, 0x4F	; 79
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	87 7f       	andi	r24, 0xF7	; 247
    17f8:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    17fa:	e9 81       	ldd	r30, Y+1	; 0x01
    17fc:	fa 81       	ldd	r31, Y+2	; 0x02
    17fe:	80 85       	ldd	r24, Z+8	; 0x08
    1800:	82 30       	cpi	r24, 0x02	; 2
    1802:	09 f0       	breq	.+2      	; 0x1806 <PWM_timers_init+0x102>
    1804:	5b c0       	rjmp	.+182    	; 0x18bc <PWM_timers_init+0x1b8>
		{

			SET_BIT(TCC1B_REG,4);SET_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    1806:	ae e4       	ldi	r26, 0x4E	; 78
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	ee e4       	ldi	r30, 0x4E	; 78
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	80 61       	ori	r24, 0x10	; 16
    1812:	8c 93       	st	X, r24
    1814:	ae e4       	ldi	r26, 0x4E	; 78
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	ee e4       	ldi	r30, 0x4E	; 78
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	88 60       	ori	r24, 0x08	; 8
    1820:	8c 93       	st	X, r24
    1822:	af e4       	ldi	r26, 0x4F	; 79
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	ef e4       	ldi	r30, 0x4F	; 79
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	82 60       	ori	r24, 0x02	; 2
    182e:	8c 93       	st	X, r24
    1830:	af e4       	ldi	r26, 0x4F	; 79
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	ef e4       	ldi	r30, 0x4F	; 79
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8e 7f       	andi	r24, 0xFE	; 254
    183c:	8c 93       	st	X, r24
			SET_BIT(TCC1A_REG,7);SET_BIT(TCC1A_REG,5);CLR_BIT(TCC1A_REG,6);CLR_BIT(TCC1A_REG,4);
    183e:	af e4       	ldi	r26, 0x4F	; 79
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	ef e4       	ldi	r30, 0x4F	; 79
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 68       	ori	r24, 0x80	; 128
    184a:	8c 93       	st	X, r24
    184c:	af e4       	ldi	r26, 0x4F	; 79
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	ef e4       	ldi	r30, 0x4F	; 79
    1852:	f0 e0       	ldi	r31, 0x00	; 0
    1854:	80 81       	ld	r24, Z
    1856:	80 62       	ori	r24, 0x20	; 32
    1858:	8c 93       	st	X, r24
    185a:	af e4       	ldi	r26, 0x4F	; 79
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	ef e4       	ldi	r30, 0x4F	; 79
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	8f 7b       	andi	r24, 0xBF	; 191
    1866:	8c 93       	st	X, r24
    1868:	af e4       	ldi	r26, 0x4F	; 79
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ef e4       	ldi	r30, 0x4F	; 79
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	8f 7e       	andi	r24, 0xEF	; 239
    1874:	8c 93       	st	X, r24
			if(timer_config->channels_number==BOTH_CHANNELS)
    1876:	e9 81       	ldd	r30, Y+1	; 0x01
    1878:	fa 81       	ldd	r31, Y+2	; 0x02
    187a:	83 85       	ldd	r24, Z+11	; 0x0b
    187c:	82 30       	cpi	r24, 0x02	; 2
    187e:	09 f0       	breq	.+2      	; 0x1882 <PWM_timers_init+0x17e>
    1880:	5f c0       	rjmp	.+190    	; 0x1940 <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    1882:	af e4       	ldi	r26, 0x4F	; 79
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ef e4       	ldi	r30, 0x4F	; 79
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8b 7f       	andi	r24, 0xFB	; 251
    188e:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1890:	83 e0       	ldi	r24, 0x03	; 3
    1892:	64 e0       	ldi	r22, 0x04	; 4
    1894:	41 e0       	ldi	r20, 0x01	; 1
    1896:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    189a:	af e4       	ldi	r26, 0x4F	; 79
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ef e4       	ldi	r30, 0x4F	; 79
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	80 62       	ori	r24, 0x20	; 32
    18a6:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    18a8:	a8 e4       	ldi	r26, 0x48	; 72
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e9 81       	ldd	r30, Y+1	; 0x01
    18ae:	fa 81       	ldd	r31, Y+2	; 0x02
    18b0:	84 81       	ldd	r24, Z+4	; 0x04
    18b2:	95 81       	ldd	r25, Z+5	; 0x05
    18b4:	11 96       	adiw	r26, 0x01	; 1
    18b6:	9c 93       	st	X, r25
    18b8:	8e 93       	st	-X, r24
    18ba:	42 c0       	rjmp	.+132    	; 0x1940 <PWM_timers_init+0x23c>
			}
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    18bc:	e9 81       	ldd	r30, Y+1	; 0x01
    18be:	fa 81       	ldd	r31, Y+2	; 0x02
    18c0:	80 85       	ldd	r24, Z+8	; 0x08
    18c2:	83 30       	cpi	r24, 0x03	; 3
    18c4:	e9 f5       	brne	.+122    	; 0x1940 <PWM_timers_init+0x23c>
		{

			SET_BIT(TCC1B_REG,4);CLR_BIT(TCC1B_REG,3);SET_BIT(TCC1A_REG,1);CLR_BIT(TCC1A_REG,0);
    18c6:	ae e4       	ldi	r26, 0x4E	; 78
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	ee e4       	ldi	r30, 0x4E	; 78
    18cc:	f0 e0       	ldi	r31, 0x00	; 0
    18ce:	80 81       	ld	r24, Z
    18d0:	80 61       	ori	r24, 0x10	; 16
    18d2:	8c 93       	st	X, r24
    18d4:	ae e4       	ldi	r26, 0x4E	; 78
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ee e4       	ldi	r30, 0x4E	; 78
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	87 7f       	andi	r24, 0xF7	; 247
    18e0:	8c 93       	st	X, r24
    18e2:	af e4       	ldi	r26, 0x4F	; 79
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ef e4       	ldi	r30, 0x4F	; 79
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	82 60       	ori	r24, 0x02	; 2
    18ee:	8c 93       	st	X, r24
    18f0:	af e4       	ldi	r26, 0x4F	; 79
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ef e4       	ldi	r30, 0x4F	; 79
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8e 7f       	andi	r24, 0xFE	; 254
    18fc:	8c 93       	st	X, r24

			if(timer_config->channels_number==BOTH_CHANNELS)
    18fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1900:	fa 81       	ldd	r31, Y+2	; 0x02
    1902:	83 85       	ldd	r24, Z+11	; 0x0b
    1904:	82 30       	cpi	r24, 0x02	; 2
    1906:	e1 f4       	brne	.+56     	; 0x1940 <PWM_timers_init+0x23c>
			{
				CLR_BIT(TCC1A_REG,2);
    1908:	af e4       	ldi	r26, 0x4F	; 79
    190a:	b0 e0       	ldi	r27, 0x00	; 0
    190c:	ef e4       	ldi	r30, 0x4F	; 79
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	80 81       	ld	r24, Z
    1912:	8b 7f       	andi	r24, 0xFB	; 251
    1914:	8c 93       	st	X, r24
				DIO_u8setPinDirection(PORT_D, PIN_4, OUTPUT) ;/*OC1B->output*/
    1916:	83 e0       	ldi	r24, 0x03	; 3
    1918:	64 e0       	ldi	r22, 0x04	; 4
    191a:	41 e0       	ldi	r20, 0x01	; 1
    191c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
				SET_BIT(TCC1A_REG,5);/*channel B enable*/
    1920:	af e4       	ldi	r26, 0x4F	; 79
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	ef e4       	ldi	r30, 0x4F	; 79
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	80 62       	ori	r24, 0x20	; 32
    192c:	8c 93       	st	X, r24
				OCR1B_REG = timer_config->set_duty_cycle_timer1_ch_B ; /* Set Compare Value*/
    192e:	a8 e4       	ldi	r26, 0x48	; 72
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	e9 81       	ldd	r30, Y+1	; 0x01
    1934:	fa 81       	ldd	r31, Y+2	; 0x02
    1936:	84 81       	ldd	r24, Z+4	; 0x04
    1938:	95 81       	ldd	r25, Z+5	; 0x05
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	9c 93       	st	X, r25
    193e:	8e 93       	st	-X, r24
			}
		}
			/*select the clk (prescaler)to start counting */
			TCC1B_REG=(TCC1B_REG & 0b11111000)|(timer_config->T0_T1_used_freq&0b00000111 );
    1940:	ae e4       	ldi	r26, 0x4E	; 78
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	ee e4       	ldi	r30, 0x4E	; 78
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	98 2f       	mov	r25, r24
    194c:	98 7f       	andi	r25, 0xF8	; 248
    194e:	e9 81       	ldd	r30, Y+1	; 0x01
    1950:	fa 81       	ldd	r31, Y+2	; 0x02
    1952:	86 81       	ldd	r24, Z+6	; 0x06
    1954:	87 70       	andi	r24, 0x07	; 7
    1956:	89 2b       	or	r24, r25
    1958:	8c 93       	st	X, r24
    195a:	3d c0       	rjmp	.+122    	; 0x19d6 <PWM_timers_init+0x2d2>
			break;
	case TIMER_2:
		clear_timer(TIMER_2); /* Set Timer Initial Value to 0*/
    195c:	82 e0       	ldi	r24, 0x02	; 2
    195e:	0e 94 3f 0b 	call	0x167e	; 0x167e <clear_timer>
		OCR2_REG  = timer_config->set_duty_cycle/100; /* Set Compare Value*/
    1962:	03 e4       	ldi	r16, 0x43	; 67
    1964:	10 e0       	ldi	r17, 0x00	; 0
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	24 e6       	ldi	r18, 0x64	; 100
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	b9 01       	movw	r22, r18
    1974:	0e 94 ad 20 	call	0x415a	; 0x415a <__udivmodhi4>
    1978:	cb 01       	movw	r24, r22
    197a:	f8 01       	movw	r30, r16
    197c:	80 83       	st	Z, r24
		/*Configure PD7/OC2 as output pin --> pin where the PWM signal is generated from MC*/
		DIO_u8setPinDirection(PORT_D, PIN_7, OUTPUT);
    197e:	83 e0       	ldi	r24, 0x03	; 3
    1980:	67 e0       	ldi	r22, 0x07	; 7
    1982:	41 e0       	ldi	r20, 0x01	; 1
    1984:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
		 * 2. Fast PWM Mode WGM21=1 & WGM20=1
		 * 3. Clear OC2 when match occurs (non inverted mode) COM20=0 & COM21=1
		 * 4. clock = F_CPU/N
		 *
		 */
		CLR_BIT(TCC2_REG,7);
    1988:	a5 e4       	ldi	r26, 0x45	; 69
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e5 e4       	ldi	r30, 0x45	; 69
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	8f 77       	andi	r24, 0x7F	; 127
    1994:	8c 93       	st	X, r24
		if(timer_config->PWM_Mode == FAST_PWM)
    1996:	e9 81       	ldd	r30, Y+1	; 0x01
    1998:	fa 81       	ldd	r31, Y+2	; 0x02
    199a:	80 85       	ldd	r24, Z+8	; 0x08
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	29 f4       	brne	.+10     	; 0x19aa <PWM_timers_init+0x2a6>
		{
			TCC2_REG = (1<<3) | (1<<5) | (1<<6);
    19a0:	e5 e4       	ldi	r30, 0x45	; 69
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	88 e6       	ldi	r24, 0x68	; 104
    19a6:	80 83       	st	Z, r24
    19a8:	09 c0       	rjmp	.+18     	; 0x19bc <PWM_timers_init+0x2b8>
		}
		else if(timer_config->PWM_Mode == PHASE_CORRECT_PWM)
    19aa:	e9 81       	ldd	r30, Y+1	; 0x01
    19ac:	fa 81       	ldd	r31, Y+2	; 0x02
    19ae:	80 85       	ldd	r24, Z+8	; 0x08
    19b0:	83 30       	cpi	r24, 0x03	; 3
    19b2:	21 f4       	brne	.+8      	; 0x19bc <PWM_timers_init+0x2b8>
		{
			TCC2_REG = (0<<3) | (1<<5) | (1<<6);
    19b4:	e5 e4       	ldi	r30, 0x45	; 69
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 e6       	ldi	r24, 0x60	; 96
    19ba:	80 83       	st	Z, r24
		}
		/*select the clk (prescaler)to start counting */
		TCC2_REG=(TCC2_REG & 0b11111000)|(timer_config->T2_used_freq&0b00000111 );
    19bc:	a5 e4       	ldi	r26, 0x45	; 69
    19be:	b0 e0       	ldi	r27, 0x00	; 0
    19c0:	e5 e4       	ldi	r30, 0x45	; 69
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	80 81       	ld	r24, Z
    19c6:	98 2f       	mov	r25, r24
    19c8:	98 7f       	andi	r25, 0xF8	; 248
    19ca:	e9 81       	ldd	r30, Y+1	; 0x01
    19cc:	fa 81       	ldd	r31, Y+2	; 0x02
    19ce:	87 81       	ldd	r24, Z+7	; 0x07
    19d0:	87 70       	andi	r24, 0x07	; 7
    19d2:	89 2b       	or	r24, r25
    19d4:	8c 93       	st	X, r24
		break;
		}

	}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	cf 91       	pop	r28
    19e0:	df 91       	pop	r29
    19e2:	1f 91       	pop	r17
    19e4:	0f 91       	pop	r16
    19e6:	08 95       	ret

000019e8 <Global_VidINTEnable>:

    void Global_VidINTEnable(void)
	{
    19e8:	df 93       	push	r29
    19ea:	cf 93       	push	r28
    19ec:	cd b7       	in	r28, 0x3d	; 61
    19ee:	de b7       	in	r29, 0x3e	; 62
		SET_BIT(S_REG,7);
    19f0:	af e5       	ldi	r26, 0x5F	; 95
    19f2:	b0 e0       	ldi	r27, 0x00	; 0
    19f4:	ef e5       	ldi	r30, 0x5F	; 95
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 81       	ld	r24, Z
    19fa:	80 68       	ori	r24, 0x80	; 128
    19fc:	8c 93       	st	X, r24
	}
    19fe:	cf 91       	pop	r28
    1a00:	df 91       	pop	r29
    1a02:	08 95       	ret

00001a04 <Global_VidINTDisable>:

	void Global_VidINTDisable(void)
	{
    1a04:	df 93       	push	r29
    1a06:	cf 93       	push	r28
    1a08:	cd b7       	in	r28, 0x3d	; 61
    1a0a:	de b7       	in	r29, 0x3e	; 62
		CLR_BIT(S_REG,7);
    1a0c:	af e5       	ldi	r26, 0x5F	; 95
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	ef e5       	ldi	r30, 0x5F	; 95
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	8f 77       	andi	r24, 0x7F	; 127
    1a18:	8c 93       	st	X, r24
	}
    1a1a:	cf 91       	pop	r28
    1a1c:	df 91       	pop	r29
    1a1e:	08 95       	ret

00001a20 <Set_CallBack_EXTINT_0>:

EXTINT_N_PTR  EXTINT_ISR;


void Set_CallBack_EXTINT_0(void (*ptr)(void))
{
    1a20:	df 93       	push	r29
    1a22:	cf 93       	push	r28
    1a24:	00 d0       	rcall	.+0      	; 0x1a26 <Set_CallBack_EXTINT_0+0x6>
    1a26:	cd b7       	in	r28, 0x3d	; 61
    1a28:	de b7       	in	r29, 0x3e	; 62
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	31 f0       	breq	.+12     	; 0x1a42 <Set_CallBack_EXTINT_0+0x22>
	{
		EXTINT_ISR.EXTINT_0 = ptr;
    1a36:	89 81       	ldd	r24, Y+1	; 0x01
    1a38:	9a 81       	ldd	r25, Y+2	; 0x02
    1a3a:	90 93 be 00 	sts	0x00BE, r25
    1a3e:	80 93 bd 00 	sts	0x00BD, r24
	}
}
    1a42:	0f 90       	pop	r0
    1a44:	0f 90       	pop	r0
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <__vector_1>:
void __vector_1 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_1 (void)
{
    1a4c:	1f 92       	push	r1
    1a4e:	0f 92       	push	r0
    1a50:	0f b6       	in	r0, 0x3f	; 63
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	2f 93       	push	r18
    1a58:	3f 93       	push	r19
    1a5a:	4f 93       	push	r20
    1a5c:	5f 93       	push	r21
    1a5e:	6f 93       	push	r22
    1a60:	7f 93       	push	r23
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	af 93       	push	r26
    1a68:	bf 93       	push	r27
    1a6a:	ef 93       	push	r30
    1a6c:	ff 93       	push	r31
    1a6e:	df 93       	push	r29
    1a70:	cf 93       	push	r28
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR.EXTINT_0 != NULL)
    1a76:	80 91 bd 00 	lds	r24, 0x00BD
    1a7a:	90 91 be 00 	lds	r25, 0x00BE
    1a7e:	00 97       	sbiw	r24, 0x00	; 0
    1a80:	29 f0       	breq	.+10     	; 0x1a8c <__vector_1+0x40>
	{
		EXTINT_ISR.EXTINT_0();
    1a82:	e0 91 bd 00 	lds	r30, 0x00BD
    1a86:	f0 91 be 00 	lds	r31, 0x00BE
    1a8a:	09 95       	icall
	}
}
    1a8c:	cf 91       	pop	r28
    1a8e:	df 91       	pop	r29
    1a90:	ff 91       	pop	r31
    1a92:	ef 91       	pop	r30
    1a94:	bf 91       	pop	r27
    1a96:	af 91       	pop	r26
    1a98:	9f 91       	pop	r25
    1a9a:	8f 91       	pop	r24
    1a9c:	7f 91       	pop	r23
    1a9e:	6f 91       	pop	r22
    1aa0:	5f 91       	pop	r21
    1aa2:	4f 91       	pop	r20
    1aa4:	3f 91       	pop	r19
    1aa6:	2f 91       	pop	r18
    1aa8:	0f 90       	pop	r0
    1aaa:	0f be       	out	0x3f, r0	; 63
    1aac:	0f 90       	pop	r0
    1aae:	1f 90       	pop	r1
    1ab0:	18 95       	reti

00001ab2 <Set_CallBack_EXTINT_1>:

void Set_CallBack_EXTINT_1(void (*ptr)(void))
{
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <Set_CallBack_EXTINT_1+0x6>
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	31 f0       	breq	.+12     	; 0x1ad4 <Set_CallBack_EXTINT_1+0x22>
	{
		EXTINT_ISR.EXTINT_1 = ptr;
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	90 93 c0 00 	sts	0x00C0, r25
    1ad0:	80 93 bf 00 	sts	0x00BF, r24
	}
}
    1ad4:	0f 90       	pop	r0
    1ad6:	0f 90       	pop	r0
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <__vector_2>:
void __vector_2 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_2 (void)
{
    1ade:	1f 92       	push	r1
    1ae0:	0f 92       	push	r0
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	0f 92       	push	r0
    1ae6:	11 24       	eor	r1, r1
    1ae8:	2f 93       	push	r18
    1aea:	3f 93       	push	r19
    1aec:	4f 93       	push	r20
    1aee:	5f 93       	push	r21
    1af0:	6f 93       	push	r22
    1af2:	7f 93       	push	r23
    1af4:	8f 93       	push	r24
    1af6:	9f 93       	push	r25
    1af8:	af 93       	push	r26
    1afa:	bf 93       	push	r27
    1afc:	ef 93       	push	r30
    1afe:	ff 93       	push	r31
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR.EXTINT_1 != NULL)
    1b08:	80 91 bf 00 	lds	r24, 0x00BF
    1b0c:	90 91 c0 00 	lds	r25, 0x00C0
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	29 f0       	breq	.+10     	; 0x1b1e <__vector_2+0x40>
	{
		EXTINT_ISR.EXTINT_1();
    1b14:	e0 91 bf 00 	lds	r30, 0x00BF
    1b18:	f0 91 c0 00 	lds	r31, 0x00C0
    1b1c:	09 95       	icall
	}
}
    1b1e:	cf 91       	pop	r28
    1b20:	df 91       	pop	r29
    1b22:	ff 91       	pop	r31
    1b24:	ef 91       	pop	r30
    1b26:	bf 91       	pop	r27
    1b28:	af 91       	pop	r26
    1b2a:	9f 91       	pop	r25
    1b2c:	8f 91       	pop	r24
    1b2e:	7f 91       	pop	r23
    1b30:	6f 91       	pop	r22
    1b32:	5f 91       	pop	r21
    1b34:	4f 91       	pop	r20
    1b36:	3f 91       	pop	r19
    1b38:	2f 91       	pop	r18
    1b3a:	0f 90       	pop	r0
    1b3c:	0f be       	out	0x3f, r0	; 63
    1b3e:	0f 90       	pop	r0
    1b40:	1f 90       	pop	r1
    1b42:	18 95       	reti

00001b44 <Set_CallBack_EXTINT_2>:

void Set_CallBack_EXTINT_2(void (*ptr)(void))
{
    1b44:	df 93       	push	r29
    1b46:	cf 93       	push	r28
    1b48:	00 d0       	rcall	.+0      	; 0x1b4a <Set_CallBack_EXTINT_2+0x6>
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	9a 83       	std	Y+2, r25	; 0x02
    1b50:	89 83       	std	Y+1, r24	; 0x01
	if(ptr != NULL)
    1b52:	89 81       	ldd	r24, Y+1	; 0x01
    1b54:	9a 81       	ldd	r25, Y+2	; 0x02
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	31 f0       	breq	.+12     	; 0x1b66 <Set_CallBack_EXTINT_2+0x22>
	{
		EXTINT_ISR.EXTINT_2 = ptr;
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	90 93 c2 00 	sts	0x00C2, r25
    1b62:	80 93 c1 00 	sts	0x00C1, r24
	}
}
    1b66:	0f 90       	pop	r0
    1b68:	0f 90       	pop	r0
    1b6a:	cf 91       	pop	r28
    1b6c:	df 91       	pop	r29
    1b6e:	08 95       	ret

00001b70 <__vector_3>:
void __vector_3 (void)  __attribute__ ((signal,__INTR_ATTRS));
void __vector_3 (void)
{
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	0f 92       	push	r0
    1b78:	11 24       	eor	r1, r1
    1b7a:	2f 93       	push	r18
    1b7c:	3f 93       	push	r19
    1b7e:	4f 93       	push	r20
    1b80:	5f 93       	push	r21
    1b82:	6f 93       	push	r22
    1b84:	7f 93       	push	r23
    1b86:	8f 93       	push	r24
    1b88:	9f 93       	push	r25
    1b8a:	af 93       	push	r26
    1b8c:	bf 93       	push	r27
    1b8e:	ef 93       	push	r30
    1b90:	ff 93       	push	r31
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
	if(EXTINT_ISR.EXTINT_2 != NULL)
    1b9a:	80 91 c1 00 	lds	r24, 0x00C1
    1b9e:	90 91 c2 00 	lds	r25, 0x00C2
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	29 f0       	breq	.+10     	; 0x1bb0 <__vector_3+0x40>
	{
		EXTINT_ISR.EXTINT_2();
    1ba6:	e0 91 c1 00 	lds	r30, 0x00C1
    1baa:	f0 91 c2 00 	lds	r31, 0x00C2
    1bae:	09 95       	icall
	}
}
    1bb0:	cf 91       	pop	r28
    1bb2:	df 91       	pop	r29
    1bb4:	ff 91       	pop	r31
    1bb6:	ef 91       	pop	r30
    1bb8:	bf 91       	pop	r27
    1bba:	af 91       	pop	r26
    1bbc:	9f 91       	pop	r25
    1bbe:	8f 91       	pop	r24
    1bc0:	7f 91       	pop	r23
    1bc2:	6f 91       	pop	r22
    1bc4:	5f 91       	pop	r21
    1bc6:	4f 91       	pop	r20
    1bc8:	3f 91       	pop	r19
    1bca:	2f 91       	pop	r18
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	0f 90       	pop	r0
    1bd2:	1f 90       	pop	r1
    1bd4:	18 95       	reti

00001bd6 <EXTINT_u8Enable>:

u8 EXTINT_u8Enable(u8 Copy_u8ExtInt)
{
    1bd6:	df 93       	push	r29
    1bd8:	cf 93       	push	r28
    1bda:	00 d0       	rcall	.+0      	; 0x1bdc <EXTINT_u8Enable+0x6>
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <EXTINT_u8Enable+0x8>
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
    1be2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
    1be4:	19 82       	std	Y+1, r1	; 0x01
	S_REG |= GLOBAL_INTERRUPT_ENABLE;
    1be6:	af e5       	ldi	r26, 0x5F	; 95
    1be8:	b0 e0       	ldi	r27, 0x00	; 0
    1bea:	ef e5       	ldi	r30, 0x5F	; 95
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 68       	ori	r24, 0x80	; 128
    1bf2:	8c 93       	st	X, r24
	switch(Copy_u8ExtInt)
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	28 2f       	mov	r18, r24
    1bf8:	30 e0       	ldi	r19, 0x00	; 0
    1bfa:	3c 83       	std	Y+4, r19	; 0x04
    1bfc:	2b 83       	std	Y+3, r18	; 0x03
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	81 30       	cpi	r24, 0x01	; 1
    1c04:	91 05       	cpc	r25, r1
    1c06:	89 f0       	breq	.+34     	; 0x1c2a <EXTINT_u8Enable+0x54>
    1c08:	2b 81       	ldd	r18, Y+3	; 0x03
    1c0a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c0c:	22 30       	cpi	r18, 0x02	; 2
    1c0e:	31 05       	cpc	r19, r1
    1c10:	a1 f0       	breq	.+40     	; 0x1c3a <EXTINT_u8Enable+0x64>
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	9c 81       	ldd	r25, Y+4	; 0x04
    1c16:	00 97       	sbiw	r24, 0x00	; 0
    1c18:	c1 f4       	brne	.+48     	; 0x1c4a <EXTINT_u8Enable+0x74>
	{
	case INT_0 : GIC_REG |= INT0_EN ; break;
    1c1a:	ab e5       	ldi	r26, 0x5B	; 91
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	eb e5       	ldi	r30, 0x5B	; 91
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	80 64       	ori	r24, 0x40	; 64
    1c26:	8c 93       	st	X, r24
    1c28:	12 c0       	rjmp	.+36     	; 0x1c4e <EXTINT_u8Enable+0x78>
	case INT_1 : GIC_REG |= INT1_EN ; break;
    1c2a:	ab e5       	ldi	r26, 0x5B	; 91
    1c2c:	b0 e0       	ldi	r27, 0x00	; 0
    1c2e:	eb e5       	ldi	r30, 0x5B	; 91
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	80 68       	ori	r24, 0x80	; 128
    1c36:	8c 93       	st	X, r24
    1c38:	0a c0       	rjmp	.+20     	; 0x1c4e <EXTINT_u8Enable+0x78>
	case INT_2 : GIC_REG |= INT2_EN ; break;
    1c3a:	ab e5       	ldi	r26, 0x5B	; 91
    1c3c:	b0 e0       	ldi	r27, 0x00	; 0
    1c3e:	eb e5       	ldi	r30, 0x5B	; 91
    1c40:	f0 e0       	ldi	r31, 0x00	; 0
    1c42:	80 81       	ld	r24, Z
    1c44:	80 62       	ori	r24, 0x20	; 32
    1c46:	8c 93       	st	X, r24
    1c48:	02 c0       	rjmp	.+4      	; 0x1c4e <EXTINT_u8Enable+0x78>
	default : Local_u8errStatus = RT_NOK ;
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1c4e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	08 95       	ret

00001c5e <EXTINT_u8Disable>:

u8 EXTINT_u8Disable(u8 Copy_u8ExtInt)
{
    1c5e:	df 93       	push	r29
    1c60:	cf 93       	push	r28
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <EXTINT_u8Disable+0x6>
    1c64:	00 d0       	rcall	.+0      	; 0x1c66 <EXTINT_u8Disable+0x8>
    1c66:	cd b7       	in	r28, 0x3d	; 61
    1c68:	de b7       	in	r29, 0x3e	; 62
    1c6a:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8errStatus = RT_OK;
    1c6c:	19 82       	std	Y+1, r1	; 0x01

	switch(Copy_u8ExtInt)
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	3c 83       	std	Y+4, r19	; 0x04
    1c76:	2b 83       	std	Y+3, r18	; 0x03
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	81 30       	cpi	r24, 0x01	; 1
    1c7e:	91 05       	cpc	r25, r1
    1c80:	e9 f0       	breq	.+58     	; 0x1cbc <EXTINT_u8Disable+0x5e>
    1c82:	2b 81       	ldd	r18, Y+3	; 0x03
    1c84:	3c 81       	ldd	r19, Y+4	; 0x04
    1c86:	22 30       	cpi	r18, 0x02	; 2
    1c88:	31 05       	cpc	r19, r1
    1c8a:	2c f4       	brge	.+10     	; 0x1c96 <EXTINT_u8Disable+0x38>
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	61 f0       	breq	.+24     	; 0x1cac <EXTINT_u8Disable+0x4e>
    1c94:	2b c0       	rjmp	.+86     	; 0x1cec <EXTINT_u8Disable+0x8e>
    1c96:	2b 81       	ldd	r18, Y+3	; 0x03
    1c98:	3c 81       	ldd	r19, Y+4	; 0x04
    1c9a:	22 30       	cpi	r18, 0x02	; 2
    1c9c:	31 05       	cpc	r19, r1
    1c9e:	b1 f0       	breq	.+44     	; 0x1ccc <EXTINT_u8Disable+0x6e>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	83 30       	cpi	r24, 0x03	; 3
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	c9 f0       	breq	.+50     	; 0x1cdc <EXTINT_u8Disable+0x7e>
    1caa:	20 c0       	rjmp	.+64     	; 0x1cec <EXTINT_u8Disable+0x8e>
	{
	case INT_0 : CLR_BIT(GIC_REG,6) ; break;
    1cac:	ab e5       	ldi	r26, 0x5B	; 91
    1cae:	b0 e0       	ldi	r27, 0x00	; 0
    1cb0:	eb e5       	ldi	r30, 0x5B	; 91
    1cb2:	f0 e0       	ldi	r31, 0x00	; 0
    1cb4:	80 81       	ld	r24, Z
    1cb6:	8f 7b       	andi	r24, 0xBF	; 191
    1cb8:	8c 93       	st	X, r24
    1cba:	1a c0       	rjmp	.+52     	; 0x1cf0 <EXTINT_u8Disable+0x92>
	case INT_1 : CLR_BIT(GIC_REG,7) ; break;
    1cbc:	ab e5       	ldi	r26, 0x5B	; 91
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	eb e5       	ldi	r30, 0x5B	; 91
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	8f 77       	andi	r24, 0x7F	; 127
    1cc8:	8c 93       	st	X, r24
    1cca:	12 c0       	rjmp	.+36     	; 0x1cf0 <EXTINT_u8Disable+0x92>
	case INT_2 : CLR_BIT(GIC_REG,5) ; break;
    1ccc:	ab e5       	ldi	r26, 0x5B	; 91
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	eb e5       	ldi	r30, 0x5B	; 91
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	8f 7d       	andi	r24, 0xDF	; 223
    1cd8:	8c 93       	st	X, r24
    1cda:	0a c0       	rjmp	.+20     	; 0x1cf0 <EXTINT_u8Disable+0x92>
	case G_DIS : CLR_BIT(S_REG,7) ; break;
    1cdc:	af e5       	ldi	r26, 0x5F	; 95
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ef e5       	ldi	r30, 0x5F	; 95
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	8f 77       	andi	r24, 0x7F	; 127
    1ce8:	8c 93       	st	X, r24
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <EXTINT_u8Disable+0x92>
	default : Local_u8errStatus = RT_NOK;
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1cf2:	0f 90       	pop	r0
    1cf4:	0f 90       	pop	r0
    1cf6:	0f 90       	pop	r0
    1cf8:	0f 90       	pop	r0
    1cfa:	cf 91       	pop	r28
    1cfc:	df 91       	pop	r29
    1cfe:	08 95       	ret

00001d00 <EXTINT_u8SenseCtrl>:

u8 EXTINT_u8SenseCtrl(u8 Copy_u8ExtInt,u8 Copy_u8ISCStatus)
{
    1d00:	df 93       	push	r29
    1d02:	cf 93       	push	r28
    1d04:	00 d0       	rcall	.+0      	; 0x1d06 <EXTINT_u8SenseCtrl+0x6>
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <EXTINT_u8SenseCtrl+0x8>
    1d08:	0f 92       	push	r0
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62
    1d0e:	8a 83       	std	Y+2, r24	; 0x02
    1d10:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1d12:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8ExtInt)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3d 83       	std	Y+5, r19	; 0x05
    1d1c:	2c 83       	std	Y+4, r18	; 0x04
    1d1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d20:	9d 81       	ldd	r25, Y+5	; 0x05
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	91 05       	cpc	r25, r1
    1d26:	01 f1       	breq	.+64     	; 0x1d68 <EXTINT_u8SenseCtrl+0x68>
    1d28:	2c 81       	ldd	r18, Y+4	; 0x04
    1d2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1d2c:	22 30       	cpi	r18, 0x02	; 2
    1d2e:	31 05       	cpc	r19, r1
    1d30:	89 f1       	breq	.+98     	; 0x1d94 <EXTINT_u8SenseCtrl+0x94>
    1d32:	8c 81       	ldd	r24, Y+4	; 0x04
    1d34:	9d 81       	ldd	r25, Y+5	; 0x05
    1d36:	00 97       	sbiw	r24, 0x00	; 0
    1d38:	09 f0       	breq	.+2      	; 0x1d3c <EXTINT_u8SenseCtrl+0x3c>
    1d3a:	42 c0       	rjmp	.+132    	; 0x1dc0 <EXTINT_u8SenseCtrl+0xc0>
	{
	case INT_0 :
		Temp_Reg = MCUC_REG;
    1d3c:	e5 e5       	ldi	r30, 0x55	; 85
    1d3e:	f0 e0       	ldi	r31, 0x00	; 0
    1d40:	80 81       	ld	r24, Z
    1d42:	80 93 bc 00 	sts	0x00BC, r24
		Temp_Reg &= INT0_SC_CLR_MASK;
    1d46:	80 91 bc 00 	lds	r24, 0x00BC
    1d4a:	8c 7f       	andi	r24, 0xFC	; 252
    1d4c:	80 93 bc 00 	sts	0x00BC, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1d50:	90 91 bc 00 	lds	r25, 0x00BC
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	89 2b       	or	r24, r25
    1d58:	80 93 bc 00 	sts	0x00BC, r24
		MCUC_REG = Temp_Reg;
    1d5c:	e5 e5       	ldi	r30, 0x55	; 85
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 91 bc 00 	lds	r24, 0x00BC
    1d64:	80 83       	st	Z, r24
    1d66:	2e c0       	rjmp	.+92     	; 0x1dc4 <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_1 :
		Temp_Reg = MCUC_REG;
    1d68:	e5 e5       	ldi	r30, 0x55	; 85
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	80 93 bc 00 	sts	0x00BC, r24
		Temp_Reg &= INT1_SC_CLR_MASK;
    1d72:	80 91 bc 00 	lds	r24, 0x00BC
    1d76:	83 7f       	andi	r24, 0xF3	; 243
    1d78:	80 93 bc 00 	sts	0x00BC, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1d7c:	90 91 bc 00 	lds	r25, 0x00BC
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	89 2b       	or	r24, r25
    1d84:	80 93 bc 00 	sts	0x00BC, r24
		MCUC_REG = Temp_Reg;
    1d88:	e5 e5       	ldi	r30, 0x55	; 85
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 91 bc 00 	lds	r24, 0x00BC
    1d90:	80 83       	st	Z, r24
    1d92:	18 c0       	rjmp	.+48     	; 0x1dc4 <EXTINT_u8SenseCtrl+0xc4>
		break;
	case INT_2 :
		Temp_Reg = MCUCS_REG;
    1d94:	e4 e5       	ldi	r30, 0x54	; 84
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 93 bc 00 	sts	0x00BC, r24
		Temp_Reg &= INT2_SC_CLR_MASK;
    1d9e:	80 91 bc 00 	lds	r24, 0x00BC
    1da2:	8f 7b       	andi	r24, 0xBF	; 191
    1da4:	80 93 bc 00 	sts	0x00BC, r24
		Temp_Reg |= Copy_u8ISCStatus;
    1da8:	90 91 bc 00 	lds	r25, 0x00BC
    1dac:	8b 81       	ldd	r24, Y+3	; 0x03
    1dae:	89 2b       	or	r24, r25
    1db0:	80 93 bc 00 	sts	0x00BC, r24
		MCUCS_REG = Temp_Reg;
    1db4:	e4 e5       	ldi	r30, 0x54	; 84
    1db6:	f0 e0       	ldi	r31, 0x00	; 0
    1db8:	80 91 bc 00 	lds	r24, 0x00BC
    1dbc:	80 83       	st	Z, r24
    1dbe:	02 c0       	rjmp	.+4      	; 0x1dc4 <EXTINT_u8SenseCtrl+0xc4>
		break;
	default : Local_u8errStatus = RT_NOK;
    1dc0:	81 e0       	ldi	r24, 0x01	; 1
    1dc2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dc6:	0f 90       	pop	r0
    1dc8:	0f 90       	pop	r0
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	cf 91       	pop	r28
    1dd2:	df 91       	pop	r29
    1dd4:	08 95       	ret

00001dd6 <DIO_u8setPortDirection>:
#define NULL     (void *)0

static PORT_t * DIO[DIO_PERIPHERAL_NUM] = {DIOA, DIOB, DIOC, DIOD};

u8 DIO_u8setPortDirection(PORT_e Copy_PORT_ePort, DIRECTION_e Copy_DIRECTION_eDirection)
{
    1dd6:	df 93       	push	r29
    1dd8:	cf 93       	push	r28
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <DIO_u8setPortDirection+0x6>
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	8a 83       	std	Y+2, r24	; 0x02
    1de4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1de6:	19 82       	std	Y+1, r1	; 0x01

	if(Copy_PORT_ePort <= PORT_D)
    1de8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dea:	84 30       	cpi	r24, 0x04	; 4
    1dec:	70 f4       	brcc	.+28     	; 0x1e0a <DIO_u8setPortDirection+0x34>
	{
		DIO[Copy_PORT_ePort]->DDR = Copy_DIRECTION_eDirection;
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	88 2f       	mov	r24, r24
    1df2:	90 e0       	ldi	r25, 0x00	; 0
    1df4:	88 0f       	add	r24, r24
    1df6:	99 1f       	adc	r25, r25
    1df8:	fc 01       	movw	r30, r24
    1dfa:	e8 59       	subi	r30, 0x98	; 152
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	01 90       	ld	r0, Z+
    1e00:	f0 81       	ld	r31, Z
    1e02:	e0 2d       	mov	r30, r0
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	81 83       	std	Z+1, r24	; 0x01
    1e08:	02 c0       	rjmp	.+4      	; 0x1e0e <DIO_u8setPortDirection+0x38>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	cf 91       	pop	r28
    1e18:	df 91       	pop	r29
    1e1a:	08 95       	ret

00001e1c <DIO_u8setPortValue>:

u8 DIO_u8setPortValue(PORT_e Copy_PORT_ePort, STATE_e Copy_STATE_eValue)
{
    1e1c:	df 93       	push	r29
    1e1e:	cf 93       	push	r28
    1e20:	00 d0       	rcall	.+0      	; 0x1e22 <DIO_u8setPortValue+0x6>
    1e22:	0f 92       	push	r0
    1e24:	cd b7       	in	r28, 0x3d	; 61
    1e26:	de b7       	in	r29, 0x3e	; 62
    1e28:	8a 83       	std	Y+2, r24	; 0x02
    1e2a:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1e2c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PORT_ePort <= PORT_D)
    1e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e30:	84 30       	cpi	r24, 0x04	; 4
    1e32:	70 f4       	brcc	.+28     	; 0x1e50 <DIO_u8setPortValue+0x34>
	{
		DIO[Copy_PORT_ePort]->PORT = Copy_STATE_eValue;
    1e34:	8a 81       	ldd	r24, Y+2	; 0x02
    1e36:	88 2f       	mov	r24, r24
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	88 0f       	add	r24, r24
    1e3c:	99 1f       	adc	r25, r25
    1e3e:	fc 01       	movw	r30, r24
    1e40:	e8 59       	subi	r30, 0x98	; 152
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	01 90       	ld	r0, Z+
    1e46:	f0 81       	ld	r31, Z
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	82 83       	std	Z+2, r24	; 0x02
    1e4e:	02 c0       	rjmp	.+4      	; 0x1e54 <DIO_u8setPortValue+0x38>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1e50:	81 e0       	ldi	r24, 0x01	; 1
    1e52:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    1e54:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e56:	0f 90       	pop	r0
    1e58:	0f 90       	pop	r0
    1e5a:	0f 90       	pop	r0
    1e5c:	cf 91       	pop	r28
    1e5e:	df 91       	pop	r29
    1e60:	08 95       	ret

00001e62 <DIO_u8getPortValue>:


u8 DIO_u8getPortValue(PORT_e Copy_PORT_ePort, u8 * Copy_pu8Value)
{
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	00 d0       	rcall	.+0      	; 0x1e68 <DIO_u8getPortValue+0x6>
    1e68:	00 d0       	rcall	.+0      	; 0x1e6a <DIO_u8getPortValue+0x8>
    1e6a:	cd b7       	in	r28, 0x3d	; 61
    1e6c:	de b7       	in	r29, 0x3e	; 62
    1e6e:	8a 83       	std	Y+2, r24	; 0x02
    1e70:	7c 83       	std	Y+4, r23	; 0x04
    1e72:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    1e74:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL && Copy_PORT_ePort <= PORT_D)
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	00 97       	sbiw	r24, 0x00	; 0
    1e7c:	99 f0       	breq	.+38     	; 0x1ea4 <DIO_u8getPortValue+0x42>
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	84 30       	cpi	r24, 0x04	; 4
    1e82:	80 f4       	brcc	.+32     	; 0x1ea4 <DIO_u8getPortValue+0x42>
	{
		*Copy_pu8Value = DIO[Copy_PORT_ePort]->PIN;
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	88 2f       	mov	r24, r24
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	88 0f       	add	r24, r24
    1e8c:	99 1f       	adc	r25, r25
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e8 59       	subi	r30, 0x98	; 152
    1e92:	ff 4f       	sbci	r31, 0xFF	; 255
    1e94:	01 90       	ld	r0, Z+
    1e96:	f0 81       	ld	r31, Z
    1e98:	e0 2d       	mov	r30, r0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e9e:	fc 81       	ldd	r31, Y+4	; 0x04
    1ea0:	80 83       	st	Z, r24
    1ea2:	02 c0       	rjmp	.+4      	; 0x1ea8 <DIO_u8getPortValue+0x46>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1ea8:	89 81       	ldd	r24, Y+1	; 0x01
}
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	cf 91       	pop	r28
    1eb4:	df 91       	pop	r29
    1eb6:	08 95       	ret

00001eb8 <DIO_u8setPinDirection>:

u8 DIO_u8setPinDirection(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin ,DIRECTION_e Copy_DIRECTION_eDirection)
{
    1eb8:	df 93       	push	r29
    1eba:	cf 93       	push	r28
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <DIO_u8setPinDirection+0x6>
    1ebe:	00 d0       	rcall	.+0      	; 0x1ec0 <DIO_u8setPinDirection+0x8>
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <DIO_u8setPinDirection+0xa>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	8a 83       	std	Y+2, r24	; 0x02
    1ec8:	6b 83       	std	Y+3, r22	; 0x03
    1eca:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    1ecc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    1ece:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed0:	88 30       	cpi	r24, 0x08	; 8
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <DIO_u8setPinDirection+0x1e>
    1ed4:	65 c0       	rjmp	.+202    	; 0x1fa0 <DIO_u8setPinDirection+0xe8>
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	84 30       	cpi	r24, 0x04	; 4
    1eda:	08 f0       	brcs	.+2      	; 0x1ede <DIO_u8setPinDirection+0x26>
    1edc:	61 c0       	rjmp	.+194    	; 0x1fa0 <DIO_u8setPinDirection+0xe8>
	{
		switch(Copy_DIRECTION_eDirection)
    1ede:	8c 81       	ldd	r24, Y+4	; 0x04
    1ee0:	28 2f       	mov	r18, r24
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	3e 83       	std	Y+6, r19	; 0x06
    1ee6:	2d 83       	std	Y+5, r18	; 0x05
    1ee8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eea:	9e 81       	ldd	r25, Y+6	; 0x06
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	31 f0       	breq	.+12     	; 0x1efc <DIO_u8setPinDirection+0x44>
    1ef0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ef4:	21 30       	cpi	r18, 0x01	; 1
    1ef6:	31 05       	cpc	r19, r1
    1ef8:	49 f1       	breq	.+82     	; 0x1f4c <DIO_u8setPinDirection+0x94>
    1efa:	4f c0       	rjmp	.+158    	; 0x1f9a <DIO_u8setPinDirection+0xe2>
		{
		case INPUT : CLR_BIT(DIO[Copy_PORT_ePort]->DDR , Copy_PIN_ePin); break;
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	88 2f       	mov	r24, r24
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	88 0f       	add	r24, r24
    1f04:	99 1f       	adc	r25, r25
    1f06:	fc 01       	movw	r30, r24
    1f08:	e8 59       	subi	r30, 0x98	; 152
    1f0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f0c:	a0 81       	ld	r26, Z
    1f0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f10:	8a 81       	ldd	r24, Y+2	; 0x02
    1f12:	88 2f       	mov	r24, r24
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	e8 59       	subi	r30, 0x98	; 152
    1f1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f20:	01 90       	ld	r0, Z+
    1f22:	f0 81       	ld	r31, Z
    1f24:	e0 2d       	mov	r30, r0
    1f26:	81 81       	ldd	r24, Z+1	; 0x01
    1f28:	48 2f       	mov	r20, r24
    1f2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	02 2e       	mov	r0, r18
    1f36:	02 c0       	rjmp	.+4      	; 0x1f3c <DIO_u8setPinDirection+0x84>
    1f38:	88 0f       	add	r24, r24
    1f3a:	99 1f       	adc	r25, r25
    1f3c:	0a 94       	dec	r0
    1f3e:	e2 f7       	brpl	.-8      	; 0x1f38 <DIO_u8setPinDirection+0x80>
    1f40:	80 95       	com	r24
    1f42:	84 23       	and	r24, r20
    1f44:	11 96       	adiw	r26, 0x01	; 1
    1f46:	8c 93       	st	X, r24
    1f48:	11 97       	sbiw	r26, 0x01	; 1
    1f4a:	2c c0       	rjmp	.+88     	; 0x1fa4 <DIO_u8setPinDirection+0xec>
		case OUTPUT : SET_BIT(DIO[Copy_PORT_ePort]->DDR , Copy_PIN_ePin); break;
    1f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4e:	88 2f       	mov	r24, r24
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	88 0f       	add	r24, r24
    1f54:	99 1f       	adc	r25, r25
    1f56:	fc 01       	movw	r30, r24
    1f58:	e8 59       	subi	r30, 0x98	; 152
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	a0 81       	ld	r26, Z
    1f5e:	b1 81       	ldd	r27, Z+1	; 0x01
    1f60:	8a 81       	ldd	r24, Y+2	; 0x02
    1f62:	88 2f       	mov	r24, r24
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	e8 59       	subi	r30, 0x98	; 152
    1f6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f70:	01 90       	ld	r0, Z+
    1f72:	f0 81       	ld	r31, Z
    1f74:	e0 2d       	mov	r30, r0
    1f76:	81 81       	ldd	r24, Z+1	; 0x01
    1f78:	48 2f       	mov	r20, r24
    1f7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7c:	28 2f       	mov	r18, r24
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	81 e0       	ldi	r24, 0x01	; 1
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	02 2e       	mov	r0, r18
    1f86:	02 c0       	rjmp	.+4      	; 0x1f8c <DIO_u8setPinDirection+0xd4>
    1f88:	88 0f       	add	r24, r24
    1f8a:	99 1f       	adc	r25, r25
    1f8c:	0a 94       	dec	r0
    1f8e:	e2 f7       	brpl	.-8      	; 0x1f88 <DIO_u8setPinDirection+0xd0>
    1f90:	84 2b       	or	r24, r20
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	8c 93       	st	X, r24
    1f96:	11 97       	sbiw	r26, 0x01	; 1
    1f98:	05 c0       	rjmp	.+10     	; 0x1fa4 <DIO_u8setPinDirection+0xec>
		default : Local_u8errStatus = RT_NOK; break;
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	89 83       	std	Y+1, r24	; 0x01
    1f9e:	02 c0       	rjmp	.+4      	; 0x1fa4 <DIO_u8setPinDirection+0xec>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    1fa4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1fa6:	26 96       	adiw	r28, 0x06	; 6
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	de bf       	out	0x3e, r29	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	cd bf       	out	0x3d, r28	; 61
    1fb2:	cf 91       	pop	r28
    1fb4:	df 91       	pop	r29
    1fb6:	08 95       	ret

00001fb8 <DIO_u8setPinValue>:

u8 DIO_u8setPinValue(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin ,STATE_e Copy_STATE_eValue)
{
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <DIO_u8setPinValue+0x6>
    1fbe:	00 d0       	rcall	.+0      	; 0x1fc0 <DIO_u8setPinValue+0x8>
    1fc0:	00 d0       	rcall	.+0      	; 0x1fc2 <DIO_u8setPinValue+0xa>
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	6b 83       	std	Y+3, r22	; 0x03
    1fca:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    1fcc:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	88 30       	cpi	r24, 0x08	; 8
    1fd2:	08 f0       	brcs	.+2      	; 0x1fd6 <DIO_u8setPinValue+0x1e>
    1fd4:	65 c0       	rjmp	.+202    	; 0x20a0 <DIO_u8setPinValue+0xe8>
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <DIO_u8setPinValue+0x26>
    1fdc:	61 c0       	rjmp	.+194    	; 0x20a0 <DIO_u8setPinValue+0xe8>
	{
		switch(Copy_STATE_eValue)
    1fde:	8c 81       	ldd	r24, Y+4	; 0x04
    1fe0:	28 2f       	mov	r18, r24
    1fe2:	30 e0       	ldi	r19, 0x00	; 0
    1fe4:	3e 83       	std	Y+6, r19	; 0x06
    1fe6:	2d 83       	std	Y+5, r18	; 0x05
    1fe8:	8d 81       	ldd	r24, Y+5	; 0x05
    1fea:	9e 81       	ldd	r25, Y+6	; 0x06
    1fec:	00 97       	sbiw	r24, 0x00	; 0
    1fee:	31 f0       	breq	.+12     	; 0x1ffc <DIO_u8setPinValue+0x44>
    1ff0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ff2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ff4:	21 30       	cpi	r18, 0x01	; 1
    1ff6:	31 05       	cpc	r19, r1
    1ff8:	49 f1       	breq	.+82     	; 0x204c <DIO_u8setPinValue+0x94>
    1ffa:	4f c0       	rjmp	.+158    	; 0x209a <DIO_u8setPinValue+0xe2>
		{
		case LOW : CLR_BIT(DIO[Copy_PORT_ePort]->PORT , Copy_PIN_ePin); break;
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	88 0f       	add	r24, r24
    2004:	99 1f       	adc	r25, r25
    2006:	fc 01       	movw	r30, r24
    2008:	e8 59       	subi	r30, 0x98	; 152
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	a0 81       	ld	r26, Z
    200e:	b1 81       	ldd	r27, Z+1	; 0x01
    2010:	8a 81       	ldd	r24, Y+2	; 0x02
    2012:	88 2f       	mov	r24, r24
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	88 0f       	add	r24, r24
    2018:	99 1f       	adc	r25, r25
    201a:	fc 01       	movw	r30, r24
    201c:	e8 59       	subi	r30, 0x98	; 152
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	01 90       	ld	r0, Z+
    2022:	f0 81       	ld	r31, Z
    2024:	e0 2d       	mov	r30, r0
    2026:	82 81       	ldd	r24, Z+2	; 0x02
    2028:	48 2f       	mov	r20, r24
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	28 2f       	mov	r18, r24
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	02 2e       	mov	r0, r18
    2036:	02 c0       	rjmp	.+4      	; 0x203c <DIO_u8setPinValue+0x84>
    2038:	88 0f       	add	r24, r24
    203a:	99 1f       	adc	r25, r25
    203c:	0a 94       	dec	r0
    203e:	e2 f7       	brpl	.-8      	; 0x2038 <DIO_u8setPinValue+0x80>
    2040:	80 95       	com	r24
    2042:	84 23       	and	r24, r20
    2044:	12 96       	adiw	r26, 0x02	; 2
    2046:	8c 93       	st	X, r24
    2048:	12 97       	sbiw	r26, 0x02	; 2
    204a:	2c c0       	rjmp	.+88     	; 0x20a4 <DIO_u8setPinValue+0xec>
		case HIGH : SET_BIT(DIO[Copy_PORT_ePort]->PORT , Copy_PIN_ePin); break;
    204c:	8a 81       	ldd	r24, Y+2	; 0x02
    204e:	88 2f       	mov	r24, r24
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	88 0f       	add	r24, r24
    2054:	99 1f       	adc	r25, r25
    2056:	fc 01       	movw	r30, r24
    2058:	e8 59       	subi	r30, 0x98	; 152
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	a0 81       	ld	r26, Z
    205e:	b1 81       	ldd	r27, Z+1	; 0x01
    2060:	8a 81       	ldd	r24, Y+2	; 0x02
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	88 0f       	add	r24, r24
    2068:	99 1f       	adc	r25, r25
    206a:	fc 01       	movw	r30, r24
    206c:	e8 59       	subi	r30, 0x98	; 152
    206e:	ff 4f       	sbci	r31, 0xFF	; 255
    2070:	01 90       	ld	r0, Z+
    2072:	f0 81       	ld	r31, Z
    2074:	e0 2d       	mov	r30, r0
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	48 2f       	mov	r20, r24
    207a:	8b 81       	ldd	r24, Y+3	; 0x03
    207c:	28 2f       	mov	r18, r24
    207e:	30 e0       	ldi	r19, 0x00	; 0
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	90 e0       	ldi	r25, 0x00	; 0
    2084:	02 2e       	mov	r0, r18
    2086:	02 c0       	rjmp	.+4      	; 0x208c <DIO_u8setPinValue+0xd4>
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25
    208c:	0a 94       	dec	r0
    208e:	e2 f7       	brpl	.-8      	; 0x2088 <DIO_u8setPinValue+0xd0>
    2090:	84 2b       	or	r24, r20
    2092:	12 96       	adiw	r26, 0x02	; 2
    2094:	8c 93       	st	X, r24
    2096:	12 97       	sbiw	r26, 0x02	; 2
    2098:	05 c0       	rjmp	.+10     	; 0x20a4 <DIO_u8setPinValue+0xec>
		default : Local_u8errStatus = RT_NOK; break;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	02 c0       	rjmp	.+4      	; 0x20a4 <DIO_u8setPinValue+0xec>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    20a0:	81 e0       	ldi	r24, 0x01	; 1
    20a2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    20a4:	89 81       	ldd	r24, Y+1	; 0x01
}
    20a6:	26 96       	adiw	r28, 0x06	; 6
    20a8:	0f b6       	in	r0, 0x3f	; 63
    20aa:	f8 94       	cli
    20ac:	de bf       	out	0x3e, r29	; 62
    20ae:	0f be       	out	0x3f, r0	; 63
    20b0:	cd bf       	out	0x3d, r28	; 61
    20b2:	cf 91       	pop	r28
    20b4:	df 91       	pop	r29
    20b6:	08 95       	ret

000020b8 <DIO_u8getPinValue>:


u8 DIO_u8getPinValue(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin ,u8 * Copy_pu8Value)
{
    20b8:	df 93       	push	r29
    20ba:	cf 93       	push	r28
    20bc:	00 d0       	rcall	.+0      	; 0x20be <DIO_u8getPinValue+0x6>
    20be:	00 d0       	rcall	.+0      	; 0x20c0 <DIO_u8getPinValue+0x8>
    20c0:	0f 92       	push	r0
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	8a 83       	std	Y+2, r24	; 0x02
    20c8:	6b 83       	std	Y+3, r22	; 0x03
    20ca:	5d 83       	std	Y+5, r21	; 0x05
    20cc:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8errStatus = RT_OK;
    20ce:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_pu8Value != NULL)
    20d0:	8c 81       	ldd	r24, Y+4	; 0x04
    20d2:	9d 81       	ldd	r25, Y+5	; 0x05
    20d4:	00 97       	sbiw	r24, 0x00	; 0
    20d6:	31 f1       	breq	.+76     	; 0x2124 <DIO_u8getPinValue+0x6c>
	{
		if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    20d8:	8b 81       	ldd	r24, Y+3	; 0x03
    20da:	88 30       	cpi	r24, 0x08	; 8
    20dc:	00 f5       	brcc	.+64     	; 0x211e <DIO_u8getPinValue+0x66>
    20de:	8a 81       	ldd	r24, Y+2	; 0x02
    20e0:	84 30       	cpi	r24, 0x04	; 4
    20e2:	e8 f4       	brcc	.+58     	; 0x211e <DIO_u8getPinValue+0x66>
		{
		*Copy_pu8Value=GET_BIT(DIO[Copy_PORT_ePort]->PIN,Copy_PIN_ePin);
    20e4:	8a 81       	ldd	r24, Y+2	; 0x02
    20e6:	88 2f       	mov	r24, r24
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	88 0f       	add	r24, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	fc 01       	movw	r30, r24
    20f0:	e8 59       	subi	r30, 0x98	; 152
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	01 90       	ld	r0, Z+
    20f6:	f0 81       	ld	r31, Z
    20f8:	e0 2d       	mov	r30, r0
    20fa:	80 81       	ld	r24, Z
    20fc:	28 2f       	mov	r18, r24
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	8b 81       	ldd	r24, Y+3	; 0x03
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a9 01       	movw	r20, r18
    2108:	02 c0       	rjmp	.+4      	; 0x210e <DIO_u8getPinValue+0x56>
    210a:	55 95       	asr	r21
    210c:	47 95       	ror	r20
    210e:	8a 95       	dec	r24
    2110:	e2 f7       	brpl	.-8      	; 0x210a <DIO_u8getPinValue+0x52>
    2112:	ca 01       	movw	r24, r20
    2114:	81 70       	andi	r24, 0x01	; 1
    2116:	ec 81       	ldd	r30, Y+4	; 0x04
    2118:	fd 81       	ldd	r31, Y+5	; 0x05
    211a:	80 83       	st	Z, r24
    211c:	05 c0       	rjmp	.+10     	; 0x2128 <DIO_u8getPinValue+0x70>
		}
		else
		{
			Local_u8errStatus = RT_NOK;
    211e:	81 e0       	ldi	r24, 0x01	; 1
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	02 c0       	rjmp	.+4      	; 0x2128 <DIO_u8getPinValue+0x70>
		}
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    2124:	81 e0       	ldi	r24, 0x01	; 1
    2126:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8errStatus;
    2128:	89 81       	ldd	r24, Y+1	; 0x01
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <DIO_u8togglePinValue>:

u8 DIO_u8togglePinValue(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <DIO_u8togglePinValue+0x6>
    2140:	0f 92       	push	r0
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	8a 83       	std	Y+2, r24	; 0x02
    2148:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8errStatus = RT_OK;
    214a:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	88 30       	cpi	r24, 0x08	; 8
    2150:	50 f5       	brcc	.+84     	; 0x21a6 <DIO_u8togglePinValue+0x6c>
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	84 30       	cpi	r24, 0x04	; 4
    2156:	38 f5       	brcc	.+78     	; 0x21a6 <DIO_u8togglePinValue+0x6c>
	{
		TOG_BIT(DIO[Copy_PORT_ePort]->PORT,Copy_PIN_ePin);
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	88 2f       	mov	r24, r24
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	fc 01       	movw	r30, r24
    2164:	e8 59       	subi	r30, 0x98	; 152
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	a0 81       	ld	r26, Z
    216a:	b1 81       	ldd	r27, Z+1	; 0x01
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	88 2f       	mov	r24, r24
    2170:	90 e0       	ldi	r25, 0x00	; 0
    2172:	88 0f       	add	r24, r24
    2174:	99 1f       	adc	r25, r25
    2176:	fc 01       	movw	r30, r24
    2178:	e8 59       	subi	r30, 0x98	; 152
    217a:	ff 4f       	sbci	r31, 0xFF	; 255
    217c:	01 90       	ld	r0, Z+
    217e:	f0 81       	ld	r31, Z
    2180:	e0 2d       	mov	r30, r0
    2182:	82 81       	ldd	r24, Z+2	; 0x02
    2184:	48 2f       	mov	r20, r24
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	28 2f       	mov	r18, r24
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	81 e0       	ldi	r24, 0x01	; 1
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	02 2e       	mov	r0, r18
    2192:	02 c0       	rjmp	.+4      	; 0x2198 <DIO_u8togglePinValue+0x5e>
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	0a 94       	dec	r0
    219a:	e2 f7       	brpl	.-8      	; 0x2194 <DIO_u8togglePinValue+0x5a>
    219c:	84 27       	eor	r24, r20
    219e:	12 96       	adiw	r26, 0x02	; 2
    21a0:	8c 93       	st	X, r24
    21a2:	12 97       	sbiw	r26, 0x02	; 2
    21a4:	02 c0       	rjmp	.+4      	; 0x21aa <DIO_u8togglePinValue+0x70>
	}

	else
	{
		Local_u8errStatus = RT_NOK;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    21aa:	89 81       	ldd	r24, Y+1	; 0x01

}
    21ac:	0f 90       	pop	r0
    21ae:	0f 90       	pop	r0
    21b0:	0f 90       	pop	r0
    21b2:	cf 91       	pop	r28
    21b4:	df 91       	pop	r29
    21b6:	08 95       	ret

000021b8 <DIO_u8setInputPullUpResistor>:

u8 DIO_u8setInputPullUpResistor(PORT_e Copy_PORT_ePort, PIN_e Copy_PIN_ePin)
{
    21b8:	df 93       	push	r29
    21ba:	cf 93       	push	r28
    21bc:	00 d0       	rcall	.+0      	; 0x21be <DIO_u8setInputPullUpResistor+0x6>
    21be:	0f 92       	push	r0
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	8a 83       	std	Y+2, r24	; 0x02
    21c6:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8errStatus = RT_OK;
    21c8:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_PIN_ePin <= PIN_7 && Copy_PORT_ePort <= PORT_D)
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	88 30       	cpi	r24, 0x08	; 8
    21ce:	50 f5       	brcc	.+84     	; 0x2224 <DIO_u8setInputPullUpResistor+0x6c>
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	84 30       	cpi	r24, 0x04	; 4
    21d4:	38 f5       	brcc	.+78     	; 0x2224 <DIO_u8setInputPullUpResistor+0x6c>
	{
		SET_BIT(DIO[Copy_PORT_ePort]->PORT,Copy_PIN_ePin);
    21d6:	8a 81       	ldd	r24, Y+2	; 0x02
    21d8:	88 2f       	mov	r24, r24
    21da:	90 e0       	ldi	r25, 0x00	; 0
    21dc:	88 0f       	add	r24, r24
    21de:	99 1f       	adc	r25, r25
    21e0:	fc 01       	movw	r30, r24
    21e2:	e8 59       	subi	r30, 0x98	; 152
    21e4:	ff 4f       	sbci	r31, 0xFF	; 255
    21e6:	a0 81       	ld	r26, Z
    21e8:	b1 81       	ldd	r27, Z+1	; 0x01
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	88 2f       	mov	r24, r24
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	88 0f       	add	r24, r24
    21f2:	99 1f       	adc	r25, r25
    21f4:	fc 01       	movw	r30, r24
    21f6:	e8 59       	subi	r30, 0x98	; 152
    21f8:	ff 4f       	sbci	r31, 0xFF	; 255
    21fa:	01 90       	ld	r0, Z+
    21fc:	f0 81       	ld	r31, Z
    21fe:	e0 2d       	mov	r30, r0
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	48 2f       	mov	r20, r24
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	28 2f       	mov	r18, r24
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	90 e0       	ldi	r25, 0x00	; 0
    220e:	02 2e       	mov	r0, r18
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <DIO_u8setInputPullUpResistor+0x5e>
    2212:	88 0f       	add	r24, r24
    2214:	99 1f       	adc	r25, r25
    2216:	0a 94       	dec	r0
    2218:	e2 f7       	brpl	.-8      	; 0x2212 <DIO_u8setInputPullUpResistor+0x5a>
    221a:	84 2b       	or	r24, r20
    221c:	12 96       	adiw	r26, 0x02	; 2
    221e:	8c 93       	st	X, r24
    2220:	12 97       	sbiw	r26, 0x02	; 2
    2222:	02 c0       	rjmp	.+4      	; 0x2228 <DIO_u8setInputPullUpResistor+0x70>
	}
	else
	{
		Local_u8errStatus = RT_NOK;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8errStatus;
    2228:	89 81       	ldd	r24, Y+1	; 0x01
}
    222a:	0f 90       	pop	r0
    222c:	0f 90       	pop	r0
    222e:	0f 90       	pop	r0
    2230:	cf 91       	pop	r28
    2232:	df 91       	pop	r29
    2234:	08 95       	ret

00002236 <SSD_voidInit>:
#include "SSD_private.h"

static u8 PRV_u8Numbers[10]= {SSD_ZERO, SSD_ONE, SSD_TWO, SSD_THREE, SSD_FOUR, SSD_FIVE, SSD_SEX, SSD_SEVEN, SSD_EIGHT, SSD_NINE};

void SSD_voidInit(void)
{
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
	DIO_u8setPortDirection(SSD_DATA_PORT, OUTPUT);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	61 e0       	ldi	r22, 0x01	; 1
    2242:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, OUTPUT);
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	41 e0       	ldi	r20, 0x01	; 1
    224c:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, OUTPUT);
    2250:	81 e0       	ldi	r24, 0x01	; 1
    2252:	62 e0       	ldi	r22, 0x02	; 2
    2254:	41 e0       	ldi	r20, 0x01	; 1
    2256:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
}
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <SSD_voidDisplayNumber>:


void SSD_voidDisplayNumber(u8 copy_u8DesiredNumber, u8 copy_u8Id)
{
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	00 d0       	rcall	.+0      	; 0x2266 <SSD_voidDisplayNumber+0x6>
    2266:	00 d0       	rcall	.+0      	; 0x2268 <SSD_voidDisplayNumber+0x8>
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_u8DesiredNumber<=9)
    2270:	89 81       	ldd	r24, Y+1	; 0x01
    2272:	8a 30       	cpi	r24, 0x0A	; 10
    2274:	80 f5       	brcc	.+96     	; 0x22d6 <SSD_voidDisplayNumber+0x76>
	{
		switch(copy_u8Id)
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	28 2f       	mov	r18, r24
    227a:	30 e0       	ldi	r19, 0x00	; 0
    227c:	3c 83       	std	Y+4, r19	; 0x04
    227e:	2b 83       	std	Y+3, r18	; 0x03
    2280:	8b 81       	ldd	r24, Y+3	; 0x03
    2282:	9c 81       	ldd	r25, Y+4	; 0x04
    2284:	00 97       	sbiw	r24, 0x00	; 0
    2286:	31 f0       	breq	.+12     	; 0x2294 <SSD_voidDisplayNumber+0x34>
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	21 30       	cpi	r18, 0x01	; 1
    228e:	31 05       	cpc	r19, r1
    2290:	91 f0       	breq	.+36     	; 0x22b6 <SSD_voidDisplayNumber+0x56>
    2292:	21 c0       	rjmp	.+66     	; 0x22d6 <SSD_voidDisplayNumber+0x76>
		{
		    case SSD_1:
#if SSD_TYPE == SSD_COM_CATHODE
			DIO_u8setPortValue(SSD_DATA_PORT, PRV_u8Numbers[copy_u8DesiredNumber]);
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	88 2f       	mov	r24, r24
    2298:	90 e0       	ldi	r25, 0x00	; 0
    229a:	fc 01       	movw	r30, r24
    229c:	e0 59       	subi	r30, 0x90	; 144
    229e:	ff 4f       	sbci	r31, 0xFF	; 255
    22a0:	90 81       	ld	r25, Z
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	69 2f       	mov	r22, r25
    22a6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
			DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, LOW);
    22aa:	81 e0       	ldi	r24, 0x01	; 1
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    22b4:	10 c0       	rjmp	.+32     	; 0x22d6 <SSD_voidDisplayNumber+0x76>
#endif
			break;

		    case SSD_2:
#if SSD_TYPE == SSD_COM_CATHODE
			DIO_u8setPortValue(SSD_DATA_PORT, PRV_u8Numbers[copy_u8DesiredNumber]);
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	88 2f       	mov	r24, r24
    22ba:	90 e0       	ldi	r25, 0x00	; 0
    22bc:	fc 01       	movw	r30, r24
    22be:	e0 59       	subi	r30, 0x90	; 144
    22c0:	ff 4f       	sbci	r31, 0xFF	; 255
    22c2:	90 81       	ld	r25, Z
    22c4:	80 e0       	ldi	r24, 0x00	; 0
    22c6:	69 2f       	mov	r22, r25
    22c8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
			DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, LOW);
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	62 e0       	ldi	r22, 0x02	; 2
    22d0:	40 e0       	ldi	r20, 0x00	; 0
    22d2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	}
	else
	{
		// return Error state
	}
}
    22d6:	0f 90       	pop	r0
    22d8:	0f 90       	pop	r0
    22da:	0f 90       	pop	r0
    22dc:	0f 90       	pop	r0
    22de:	cf 91       	pop	r28
    22e0:	df 91       	pop	r29
    22e2:	08 95       	ret

000022e4 <SSD_voidDisplayMultiplexedNumber>:


void SSD_voidDisplayMultiplexedNumber(u8 copy_u8DesiredNumber)
{
    22e4:	df 93       	push	r29
    22e6:	cf 93       	push	r28
    22e8:	cd b7       	in	r28, 0x3d	; 61
    22ea:	de b7       	in	r29, 0x3e	; 62
    22ec:	6f 97       	sbiw	r28, 0x1f	; 31
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	8f 8f       	std	Y+31, r24	; 0x1f
	if(copy_u8DesiredNumber<=99)
    22fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    22fc:	84 36       	cpi	r24, 0x64	; 100
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <SSD_voidDisplayMultiplexedNumber+0x1e>
    2300:	25 c1       	rjmp	.+586    	; 0x254c <SSD_voidDisplayMultiplexedNumber+0x268>
	{
		u8 local_u8Ones = copy_u8DesiredNumber%10;
    2302:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2304:	9a e0       	ldi	r25, 0x0A	; 10
    2306:	69 2f       	mov	r22, r25
    2308:	0e 94 a1 20 	call	0x4142	; 0x4142 <__udivmodqi4>
    230c:	89 2f       	mov	r24, r25
    230e:	8e 8f       	std	Y+30, r24	; 0x1e
		u8 local_u8Tens = copy_u8DesiredNumber/10;
    2310:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2312:	9a e0       	ldi	r25, 0x0A	; 10
    2314:	69 2f       	mov	r22, r25
    2316:	0e 94 a1 20 	call	0x4142	; 0x4142 <__udivmodqi4>
    231a:	8d 8f       	std	Y+29, r24	; 0x1d

#if SSD_TYPE == SSD_COM_CATHODE
		DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, HIGH);
    231c:	81 e0       	ldi	r24, 0x01	; 1
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	41 e0       	ldi	r20, 0x01	; 1
    2322:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
		DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, HIGH);
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	62 e0       	ldi	r22, 0x02	; 2
    232a:	41 e0       	ldi	r20, 0x01	; 1
    232c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
		DIO_u8setPortValue(SSD_DATA_PORT, PRV_u8Numbers[local_u8Tens]);
    2330:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2332:	88 2f       	mov	r24, r24
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	fc 01       	movw	r30, r24
    2338:	e0 59       	subi	r30, 0x90	; 144
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	90 81       	ld	r25, Z
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	69 2f       	mov	r22, r25
    2342:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
		DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, LOW);
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	61 e0       	ldi	r22, 0x01	; 1
    234a:	40 e0       	ldi	r20, 0x00	; 0
    234c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	a0 e2       	ldi	r26, 0x20	; 32
    2356:	b1 e4       	ldi	r27, 0x41	; 65
    2358:	89 8f       	std	Y+25, r24	; 0x19
    235a:	9a 8f       	std	Y+26, r25	; 0x1a
    235c:	ab 8f       	std	Y+27, r26	; 0x1b
    235e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2360:	69 8d       	ldd	r22, Y+25	; 0x19
    2362:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2364:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2366:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	4a ef       	ldi	r20, 0xFA	; 250
    236e:	54 e4       	ldi	r21, 0x44	; 68
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	8d 8b       	std	Y+21, r24	; 0x15
    237a:	9e 8b       	std	Y+22, r25	; 0x16
    237c:	af 8b       	std	Y+23, r26	; 0x17
    237e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2380:	6d 89       	ldd	r22, Y+21	; 0x15
    2382:	7e 89       	ldd	r23, Y+22	; 0x16
    2384:	8f 89       	ldd	r24, Y+23	; 0x17
    2386:	98 8d       	ldd	r25, Y+24	; 0x18
    2388:	20 e0       	ldi	r18, 0x00	; 0
    238a:	30 e0       	ldi	r19, 0x00	; 0
    238c:	40 e8       	ldi	r20, 0x80	; 128
    238e:	5f e3       	ldi	r21, 0x3F	; 63
    2390:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2394:	88 23       	and	r24, r24
    2396:	2c f4       	brge	.+10     	; 0x23a2 <SSD_voidDisplayMultiplexedNumber+0xbe>
		__ticks = 1;
    2398:	81 e0       	ldi	r24, 0x01	; 1
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
    23a0:	3f c0       	rjmp	.+126    	; 0x2420 <SSD_voidDisplayMultiplexedNumber+0x13c>
	else if (__tmp > 65535)
    23a2:	6d 89       	ldd	r22, Y+21	; 0x15
    23a4:	7e 89       	ldd	r23, Y+22	; 0x16
    23a6:	8f 89       	ldd	r24, Y+23	; 0x17
    23a8:	98 8d       	ldd	r25, Y+24	; 0x18
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	3f ef       	ldi	r19, 0xFF	; 255
    23ae:	4f e7       	ldi	r20, 0x7F	; 127
    23b0:	57 e4       	ldi	r21, 0x47	; 71
    23b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23b6:	18 16       	cp	r1, r24
    23b8:	4c f5       	brge	.+82     	; 0x240c <SSD_voidDisplayMultiplexedNumber+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23ba:	69 8d       	ldd	r22, Y+25	; 0x19
    23bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	40 e2       	ldi	r20, 0x20	; 32
    23c8:	51 e4       	ldi	r21, 0x41	; 65
    23ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ce:	dc 01       	movw	r26, r24
    23d0:	cb 01       	movw	r24, r22
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23da:	dc 01       	movw	r26, r24
    23dc:	cb 01       	movw	r24, r22
    23de:	9c 8b       	std	Y+20, r25	; 0x14
    23e0:	8b 8b       	std	Y+19, r24	; 0x13
    23e2:	0f c0       	rjmp	.+30     	; 0x2402 <SSD_voidDisplayMultiplexedNumber+0x11e>
    23e4:	88 ec       	ldi	r24, 0xC8	; 200
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9a 8b       	std	Y+18, r25	; 0x12
    23ea:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	9a 89       	ldd	r25, Y+18	; 0x12
    23f0:	01 97       	sbiw	r24, 0x01	; 1
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <SSD_voidDisplayMultiplexedNumber+0x10c>
    23f4:	9a 8b       	std	Y+18, r25	; 0x12
    23f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23f8:	8b 89       	ldd	r24, Y+19	; 0x13
    23fa:	9c 89       	ldd	r25, Y+20	; 0x14
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	9c 8b       	std	Y+20, r25	; 0x14
    2400:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2402:	8b 89       	ldd	r24, Y+19	; 0x13
    2404:	9c 89       	ldd	r25, Y+20	; 0x14
    2406:	00 97       	sbiw	r24, 0x00	; 0
    2408:	69 f7       	brne	.-38     	; 0x23e4 <SSD_voidDisplayMultiplexedNumber+0x100>
    240a:	14 c0       	rjmp	.+40     	; 0x2434 <SSD_voidDisplayMultiplexedNumber+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    240c:	6d 89       	ldd	r22, Y+21	; 0x15
    240e:	7e 89       	ldd	r23, Y+22	; 0x16
    2410:	8f 89       	ldd	r24, Y+23	; 0x17
    2412:	98 8d       	ldd	r25, Y+24	; 0x18
    2414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	9c 8b       	std	Y+20, r25	; 0x14
    241e:	8b 8b       	std	Y+19, r24	; 0x13
    2420:	8b 89       	ldd	r24, Y+19	; 0x13
    2422:	9c 89       	ldd	r25, Y+20	; 0x14
    2424:	98 8b       	std	Y+16, r25	; 0x10
    2426:	8f 87       	std	Y+15, r24	; 0x0f
    2428:	8f 85       	ldd	r24, Y+15	; 0x0f
    242a:	98 89       	ldd	r25, Y+16	; 0x10
    242c:	01 97       	sbiw	r24, 0x01	; 1
    242e:	f1 f7       	brne	.-4      	; 0x242c <SSD_voidDisplayMultiplexedNumber+0x148>
    2430:	98 8b       	std	Y+16, r25	; 0x10
    2432:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K1_ENABLE_PIN, HIGH);
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	61 e0       	ldi	r22, 0x01	; 1
    2438:	41 e0       	ldi	r20, 0x01	; 1
    243a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>

		DIO_u8setPortValue(SSD_DATA_PORT, PRV_u8Numbers[local_u8Ones]);
    243e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2440:	88 2f       	mov	r24, r24
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	fc 01       	movw	r30, r24
    2446:	e0 59       	subi	r30, 0x90	; 144
    2448:	ff 4f       	sbci	r31, 0xFF	; 255
    244a:	90 81       	ld	r25, Z
    244c:	80 e0       	ldi	r24, 0x00	; 0
    244e:	69 2f       	mov	r22, r25
    2450:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
		DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, LOW);
    2454:	81 e0       	ldi	r24, 0x01	; 1
    2456:	62 e0       	ldi	r22, 0x02	; 2
    2458:	40 e0       	ldi	r20, 0x00	; 0
    245a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a0 e2       	ldi	r26, 0x20	; 32
    2464:	b1 e4       	ldi	r27, 0x41	; 65
    2466:	8b 87       	std	Y+11, r24	; 0x0b
    2468:	9c 87       	std	Y+12, r25	; 0x0c
    246a:	ad 87       	std	Y+13, r26	; 0x0d
    246c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2470:	7c 85       	ldd	r23, Y+12	; 0x0c
    2472:	8d 85       	ldd	r24, Y+13	; 0x0d
    2474:	9e 85       	ldd	r25, Y+14	; 0x0e
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a ef       	ldi	r20, 0xFA	; 250
    247c:	54 e4       	ldi	r21, 0x44	; 68
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8f 83       	std	Y+7, r24	; 0x07
    2488:	98 87       	std	Y+8, r25	; 0x08
    248a:	a9 87       	std	Y+9, r26	; 0x09
    248c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    248e:	6f 81       	ldd	r22, Y+7	; 0x07
    2490:	78 85       	ldd	r23, Y+8	; 0x08
    2492:	89 85       	ldd	r24, Y+9	; 0x09
    2494:	9a 85       	ldd	r25, Y+10	; 0x0a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <SSD_voidDisplayMultiplexedNumber+0x1cc>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9e 83       	std	Y+6, r25	; 0x06
    24ac:	8d 83       	std	Y+5, r24	; 0x05
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <SSD_voidDisplayMultiplexedNumber+0x24a>
	else if (__tmp > 65535)
    24b0:	6f 81       	ldd	r22, Y+7	; 0x07
    24b2:	78 85       	ldd	r23, Y+8	; 0x08
    24b4:	89 85       	ldd	r24, Y+9	; 0x09
    24b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <SSD_voidDisplayMultiplexedNumber+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    24cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9e 83       	std	Y+6, r25	; 0x06
    24ee:	8d 83       	std	Y+5, r24	; 0x05
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <SSD_voidDisplayMultiplexedNumber+0x22c>
    24f2:	88 ec       	ldi	r24, 0xC8	; 200
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	9c 83       	std	Y+4, r25	; 0x04
    24f8:	8b 83       	std	Y+3, r24	; 0x03
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <SSD_voidDisplayMultiplexedNumber+0x21a>
    2502:	9c 83       	std	Y+4, r25	; 0x04
    2504:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8d 81       	ldd	r24, Y+5	; 0x05
    2508:	9e 81       	ldd	r25, Y+6	; 0x06
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8d 81       	ldd	r24, Y+5	; 0x05
    2512:	9e 81       	ldd	r25, Y+6	; 0x06
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <SSD_voidDisplayMultiplexedNumber+0x20e>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <SSD_voidDisplayMultiplexedNumber+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6f 81       	ldd	r22, Y+7	; 0x07
    251c:	78 85       	ldd	r23, Y+8	; 0x08
    251e:	89 85       	ldd	r24, Y+9	; 0x09
    2520:	9a 85       	ldd	r25, Y+10	; 0x0a
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9e 83       	std	Y+6, r25	; 0x06
    252c:	8d 83       	std	Y+5, r24	; 0x05
    252e:	8d 81       	ldd	r24, Y+5	; 0x05
    2530:	9e 81       	ldd	r25, Y+6	; 0x06
    2532:	9a 83       	std	Y+2, r25	; 0x02
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	9a 81       	ldd	r25, Y+2	; 0x02
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <SSD_voidDisplayMultiplexedNumber+0x256>
    253e:	9a 83       	std	Y+2, r25	; 0x02
    2540:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		DIO_u8setPinValue(SSD_ENABLE_PORT, SSD_K2_ENABLE_PIN, HIGH);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	62 e0       	ldi	r22, 0x02	; 2
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	}
	else
	{
		// return Error state
	}
}
    254c:	6f 96       	adiw	r28, 0x1f	; 31
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	cf 91       	pop	r28
    255a:	df 91       	pop	r29
    255c:	08 95       	ret

0000255e <LED_voidInit>:
/* HAL */
#include "LED_interface.h"


void LED_voidInit(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
    255e:	df 93       	push	r29
    2560:	cf 93       	push	r28
    2562:	00 d0       	rcall	.+0      	; 0x2564 <LED_voidInit+0x6>
    2564:	cd b7       	in	r28, 0x3d	; 61
    2566:	de b7       	in	r29, 0x3e	; 62
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8setPinDirection(copy_u8LedPort, copy_u8LedPin,OUTPUT);
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	6a 81       	ldd	r22, Y+2	; 0x02
    2570:	41 e0       	ldi	r20, 0x01	; 1
    2572:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
}
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <LED_voidOn>:


void LED_voidOn(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
    2580:	df 93       	push	r29
    2582:	cf 93       	push	r28
    2584:	00 d0       	rcall	.+0      	; 0x2586 <LED_voidOn+0x6>
    2586:	00 d0       	rcall	.+0      	; 0x2588 <LED_voidOn+0x8>
    2588:	0f 92       	push	r0
    258a:	cd b7       	in	r28, 0x3d	; 61
    258c:	de b7       	in	r29, 0x3e	; 62
    258e:	89 83       	std	Y+1, r24	; 0x01
    2590:	6a 83       	std	Y+2, r22	; 0x02
    2592:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8LedConnectionType)
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	3d 83       	std	Y+5, r19	; 0x05
    259c:	2c 83       	std	Y+4, r18	; 0x04
    259e:	8c 81       	ldd	r24, Y+4	; 0x04
    25a0:	9d 81       	ldd	r25, Y+5	; 0x05
    25a2:	81 30       	cpi	r24, 0x01	; 1
    25a4:	91 05       	cpc	r25, r1
    25a6:	31 f0       	breq	.+12     	; 0x25b4 <LED_voidOn+0x34>
    25a8:	2c 81       	ldd	r18, Y+4	; 0x04
    25aa:	3d 81       	ldd	r19, Y+5	; 0x05
    25ac:	22 30       	cpi	r18, 0x02	; 2
    25ae:	31 05       	cpc	r19, r1
    25b0:	39 f0       	breq	.+14     	; 0x25c0 <LED_voidOn+0x40>
    25b2:	0b c0       	rjmp	.+22     	; 0x25ca <LED_voidOn+0x4a>
	{
	case LED_FORWARD_CONNECTION:
		DIO_u8setPinValue(copy_u8LedPort, copy_u8LedPin, HIGH);
    25b4:	89 81       	ldd	r24, Y+1	; 0x01
    25b6:	6a 81       	ldd	r22, Y+2	; 0x02
    25b8:	41 e0       	ldi	r20, 0x01	; 1
    25ba:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    25be:	05 c0       	rjmp	.+10     	; 0x25ca <LED_voidOn+0x4a>
		break;

	case LED_REVERSE_CONNECTION:
		DIO_u8setPinValue(copy_u8LedPort, copy_u8LedPin, LOW);
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	6a 81       	ldd	r22, Y+2	; 0x02
    25c4:	40 e0       	ldi	r20, 0x00	; 0
    25c6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>

	default :
		// return Error State
		break;
	}
}
    25ca:	0f 90       	pop	r0
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	cf 91       	pop	r28
    25d6:	df 91       	pop	r29
    25d8:	08 95       	ret

000025da <LED_voidOff>:


void LED_voidOff(u8 copy_u8LedPort, u8 copy_u8LedPin, u8 copy_u8LedConnectionType)
{
    25da:	df 93       	push	r29
    25dc:	cf 93       	push	r28
    25de:	00 d0       	rcall	.+0      	; 0x25e0 <LED_voidOff+0x6>
    25e0:	00 d0       	rcall	.+0      	; 0x25e2 <LED_voidOff+0x8>
    25e2:	0f 92       	push	r0
    25e4:	cd b7       	in	r28, 0x3d	; 61
    25e6:	de b7       	in	r29, 0x3e	; 62
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	6a 83       	std	Y+2, r22	; 0x02
    25ec:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8LedConnectionType)
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	3d 83       	std	Y+5, r19	; 0x05
    25f6:	2c 83       	std	Y+4, r18	; 0x04
    25f8:	8c 81       	ldd	r24, Y+4	; 0x04
    25fa:	9d 81       	ldd	r25, Y+5	; 0x05
    25fc:	81 30       	cpi	r24, 0x01	; 1
    25fe:	91 05       	cpc	r25, r1
    2600:	31 f0       	breq	.+12     	; 0x260e <LED_voidOff+0x34>
    2602:	2c 81       	ldd	r18, Y+4	; 0x04
    2604:	3d 81       	ldd	r19, Y+5	; 0x05
    2606:	22 30       	cpi	r18, 0x02	; 2
    2608:	31 05       	cpc	r19, r1
    260a:	39 f0       	breq	.+14     	; 0x261a <LED_voidOff+0x40>
    260c:	0b c0       	rjmp	.+22     	; 0x2624 <LED_voidOff+0x4a>
	{
	case LED_FORWARD_CONNECTION:
		DIO_u8setPinValue(copy_u8LedPort, copy_u8LedPin, LOW);
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	6a 81       	ldd	r22, Y+2	; 0x02
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2618:	05 c0       	rjmp	.+10     	; 0x2624 <LED_voidOff+0x4a>
		break;

	case LED_REVERSE_CONNECTION:
		DIO_u8setPinValue(copy_u8LedPort, copy_u8LedPin, HIGH);
    261a:	89 81       	ldd	r24, Y+1	; 0x01
    261c:	6a 81       	ldd	r22, Y+2	; 0x02
    261e:	41 e0       	ldi	r20, 0x01	; 1
    2620:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>

	default :
		// return Error State
		break;
	}
}
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	0f 90       	pop	r0
    262a:	0f 90       	pop	r0
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <LED_voidToggle>:


void LED_voidToggle(u8 copy_u8LedPort, u8 copy_u8LedPin)
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	00 d0       	rcall	.+0      	; 0x263a <LED_voidToggle+0x6>
    263a:	cd b7       	in	r28, 0x3d	; 61
    263c:	de b7       	in	r29, 0x3e	; 62
    263e:	89 83       	std	Y+1, r24	; 0x01
    2640:	6a 83       	std	Y+2, r22	; 0x02
	DIO_u8togglePinValue(copy_u8LedPort, copy_u8LedPin);
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	6a 81       	ldd	r22, Y+2	; 0x02
    2646:	0e 94 9d 10 	call	0x213a	; 0x213a <DIO_u8togglePinValue>
}
    264a:	0f 90       	pop	r0
    264c:	0f 90       	pop	r0
    264e:	cf 91       	pop	r28
    2650:	df 91       	pop	r29
    2652:	08 95       	ret

00002654 <LCD_4_BitvidInit>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character);
void LCD_4_BitvidsendCommand(u8 Copy_u8command);
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character);

void LCD_4_BitvidInit(void)
{
    2654:	df 93       	push	r29
    2656:	cf 93       	push	r28
    2658:	cd b7       	in	r28, 0x3d	; 61
    265a:	de b7       	in	r29, 0x3e	; 62
    265c:	e8 97       	sbiw	r28, 0x38	; 56
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,HALF_INPUT_HALF_OUTPUT);
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	60 ef       	ldi	r22, 0xF0	; 240
    266c:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    2670:	83 e0       	ldi	r24, 0x03	; 3
    2672:	62 e0       	ldi	r22, 0x02	; 2
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    267a:	83 e0       	ldi	r24, 0x03	; 3
    267c:	61 e0       	ldi	r22, 0x01	; 1
    267e:	41 e0       	ldi	r20, 0x01	; 1
    2680:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2684:	83 e0       	ldi	r24, 0x03	; 3
    2686:	60 e0       	ldi	r22, 0x00	; 0
    2688:	41 e0       	ldi	r20, 0x01	; 1
    268a:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
    268e:	80 e0       	ldi	r24, 0x00	; 0
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	a0 e2       	ldi	r26, 0x20	; 32
    2694:	b2 e4       	ldi	r27, 0x42	; 66
    2696:	8d ab       	std	Y+53, r24	; 0x35
    2698:	9e ab       	std	Y+54, r25	; 0x36
    269a:	af ab       	std	Y+55, r26	; 0x37
    269c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    269e:	6d a9       	ldd	r22, Y+53	; 0x35
    26a0:	7e a9       	ldd	r23, Y+54	; 0x36
    26a2:	8f a9       	ldd	r24, Y+55	; 0x37
    26a4:	98 ad       	ldd	r25, Y+56	; 0x38
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	4a ef       	ldi	r20, 0xFA	; 250
    26ac:	54 e4       	ldi	r21, 0x44	; 68
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	89 ab       	std	Y+49, r24	; 0x31
    26b8:	9a ab       	std	Y+50, r25	; 0x32
    26ba:	ab ab       	std	Y+51, r26	; 0x33
    26bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    26be:	69 a9       	ldd	r22, Y+49	; 0x31
    26c0:	7a a9       	ldd	r23, Y+50	; 0x32
    26c2:	8b a9       	ldd	r24, Y+51	; 0x33
    26c4:	9c a9       	ldd	r25, Y+52	; 0x34
    26c6:	20 e0       	ldi	r18, 0x00	; 0
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	40 e8       	ldi	r20, 0x80	; 128
    26cc:	5f e3       	ldi	r21, 0x3F	; 63
    26ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26d2:	88 23       	and	r24, r24
    26d4:	2c f4       	brge	.+10     	; 0x26e0 <LCD_4_BitvidInit+0x8c>
		__ticks = 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	98 ab       	std	Y+48, r25	; 0x30
    26dc:	8f a7       	std	Y+47, r24	; 0x2f
    26de:	3f c0       	rjmp	.+126    	; 0x275e <LCD_4_BitvidInit+0x10a>
	else if (__tmp > 65535)
    26e0:	69 a9       	ldd	r22, Y+49	; 0x31
    26e2:	7a a9       	ldd	r23, Y+50	; 0x32
    26e4:	8b a9       	ldd	r24, Y+51	; 0x33
    26e6:	9c a9       	ldd	r25, Y+52	; 0x34
    26e8:	20 e0       	ldi	r18, 0x00	; 0
    26ea:	3f ef       	ldi	r19, 0xFF	; 255
    26ec:	4f e7       	ldi	r20, 0x7F	; 127
    26ee:	57 e4       	ldi	r21, 0x47	; 71
    26f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26f4:	18 16       	cp	r1, r24
    26f6:	4c f5       	brge	.+82     	; 0x274a <LCD_4_BitvidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26f8:	6d a9       	ldd	r22, Y+53	; 0x35
    26fa:	7e a9       	ldd	r23, Y+54	; 0x36
    26fc:	8f a9       	ldd	r24, Y+55	; 0x37
    26fe:	98 ad       	ldd	r25, Y+56	; 0x38
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	30 e0       	ldi	r19, 0x00	; 0
    2704:	40 e2       	ldi	r20, 0x20	; 32
    2706:	51 e4       	ldi	r21, 0x41	; 65
    2708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270c:	dc 01       	movw	r26, r24
    270e:	cb 01       	movw	r24, r22
    2710:	bc 01       	movw	r22, r24
    2712:	cd 01       	movw	r24, r26
    2714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	98 ab       	std	Y+48, r25	; 0x30
    271e:	8f a7       	std	Y+47, r24	; 0x2f
    2720:	0f c0       	rjmp	.+30     	; 0x2740 <LCD_4_BitvidInit+0xec>
    2722:	88 ec       	ldi	r24, 0xC8	; 200
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	9e a7       	std	Y+46, r25	; 0x2e
    2728:	8d a7       	std	Y+45, r24	; 0x2d
    272a:	8d a5       	ldd	r24, Y+45	; 0x2d
    272c:	9e a5       	ldd	r25, Y+46	; 0x2e
    272e:	01 97       	sbiw	r24, 0x01	; 1
    2730:	f1 f7       	brne	.-4      	; 0x272e <LCD_4_BitvidInit+0xda>
    2732:	9e a7       	std	Y+46, r25	; 0x2e
    2734:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2736:	8f a5       	ldd	r24, Y+47	; 0x2f
    2738:	98 a9       	ldd	r25, Y+48	; 0x30
    273a:	01 97       	sbiw	r24, 0x01	; 1
    273c:	98 ab       	std	Y+48, r25	; 0x30
    273e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2740:	8f a5       	ldd	r24, Y+47	; 0x2f
    2742:	98 a9       	ldd	r25, Y+48	; 0x30
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	69 f7       	brne	.-38     	; 0x2722 <LCD_4_BitvidInit+0xce>
    2748:	14 c0       	rjmp	.+40     	; 0x2772 <LCD_4_BitvidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    274a:	69 a9       	ldd	r22, Y+49	; 0x31
    274c:	7a a9       	ldd	r23, Y+50	; 0x32
    274e:	8b a9       	ldd	r24, Y+51	; 0x33
    2750:	9c a9       	ldd	r25, Y+52	; 0x34
    2752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2756:	dc 01       	movw	r26, r24
    2758:	cb 01       	movw	r24, r22
    275a:	98 ab       	std	Y+48, r25	; 0x30
    275c:	8f a7       	std	Y+47, r24	; 0x2f
    275e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2760:	98 a9       	ldd	r25, Y+48	; 0x30
    2762:	9c a7       	std	Y+44, r25	; 0x2c
    2764:	8b a7       	std	Y+43, r24	; 0x2b
    2766:	8b a5       	ldd	r24, Y+43	; 0x2b
    2768:	9c a5       	ldd	r25, Y+44	; 0x2c
    276a:	01 97       	sbiw	r24, 0x01	; 1
    276c:	f1 f7       	brne	.-4      	; 0x276a <LCD_4_BitvidInit+0x116>
    276e:	9c a7       	std	Y+44, r25	; 0x2c
    2770:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_1);
    2772:	80 e2       	ldi	r24, 0x20	; 32
    2774:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_2);
    2778:	80 e2       	ldi	r24, 0x20	; 32
    277a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_FUNCTION_SET_CMD_3);
    277e:	80 ec       	ldi	r24, 0xC0	; 192
    2780:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	a0 e8       	ldi	r26, 0x80	; 128
    278a:	bf e3       	ldi	r27, 0x3F	; 63
    278c:	8f a3       	std	Y+39, r24	; 0x27
    278e:	98 a7       	std	Y+40, r25	; 0x28
    2790:	a9 a7       	std	Y+41, r26	; 0x29
    2792:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2794:	6f a1       	ldd	r22, Y+39	; 0x27
    2796:	78 a5       	ldd	r23, Y+40	; 0x28
    2798:	89 a5       	ldd	r24, Y+41	; 0x29
    279a:	9a a5       	ldd	r25, Y+42	; 0x2a
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a ef       	ldi	r20, 0xFA	; 250
    27a2:	54 e4       	ldi	r21, 0x44	; 68
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8b a3       	std	Y+35, r24	; 0x23
    27ae:	9c a3       	std	Y+36, r25	; 0x24
    27b0:	ad a3       	std	Y+37, r26	; 0x25
    27b2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    27b4:	6b a1       	ldd	r22, Y+35	; 0x23
    27b6:	7c a1       	ldd	r23, Y+36	; 0x24
    27b8:	8d a1       	ldd	r24, Y+37	; 0x25
    27ba:	9e a1       	ldd	r25, Y+38	; 0x26
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	5f e3       	ldi	r21, 0x3F	; 63
    27c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27c8:	88 23       	and	r24, r24
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <LCD_4_BitvidInit+0x182>
		__ticks = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9a a3       	std	Y+34, r25	; 0x22
    27d2:	89 a3       	std	Y+33, r24	; 0x21
    27d4:	3f c0       	rjmp	.+126    	; 0x2854 <LCD_4_BitvidInit+0x200>
	else if (__tmp > 65535)
    27d6:	6b a1       	ldd	r22, Y+35	; 0x23
    27d8:	7c a1       	ldd	r23, Y+36	; 0x24
    27da:	8d a1       	ldd	r24, Y+37	; 0x25
    27dc:	9e a1       	ldd	r25, Y+38	; 0x26
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	3f ef       	ldi	r19, 0xFF	; 255
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	57 e4       	ldi	r21, 0x47	; 71
    27e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	4c f5       	brge	.+82     	; 0x2840 <LCD_4_BitvidInit+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ee:	6f a1       	ldd	r22, Y+39	; 0x27
    27f0:	78 a5       	ldd	r23, Y+40	; 0x28
    27f2:	89 a5       	ldd	r24, Y+41	; 0x29
    27f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9a a3       	std	Y+34, r25	; 0x22
    2814:	89 a3       	std	Y+33, r24	; 0x21
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <LCD_4_BitvidInit+0x1e2>
    2818:	88 ec       	ldi	r24, 0xC8	; 200
    281a:	90 e0       	ldi	r25, 0x00	; 0
    281c:	98 a3       	std	Y+32, r25	; 0x20
    281e:	8f 8f       	std	Y+31, r24	; 0x1f
    2820:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2822:	98 a1       	ldd	r25, Y+32	; 0x20
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <LCD_4_BitvidInit+0x1d0>
    2828:	98 a3       	std	Y+32, r25	; 0x20
    282a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	89 a1       	ldd	r24, Y+33	; 0x21
    282e:	9a a1       	ldd	r25, Y+34	; 0x22
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	9a a3       	std	Y+34, r25	; 0x22
    2834:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	89 a1       	ldd	r24, Y+33	; 0x21
    2838:	9a a1       	ldd	r25, Y+34	; 0x22
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	69 f7       	brne	.-38     	; 0x2818 <LCD_4_BitvidInit+0x1c4>
    283e:	14 c0       	rjmp	.+40     	; 0x2868 <LCD_4_BitvidInit+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2840:	6b a1       	ldd	r22, Y+35	; 0x23
    2842:	7c a1       	ldd	r23, Y+36	; 0x24
    2844:	8d a1       	ldd	r24, Y+37	; 0x25
    2846:	9e a1       	ldd	r25, Y+38	; 0x26
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9a a3       	std	Y+34, r25	; 0x22
    2852:	89 a3       	std	Y+33, r24	; 0x21
    2854:	89 a1       	ldd	r24, Y+33	; 0x21
    2856:	9a a1       	ldd	r25, Y+34	; 0x22
    2858:	9e 8f       	std	Y+30, r25	; 0x1e
    285a:	8d 8f       	std	Y+29, r24	; 0x1d
    285c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    285e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <LCD_4_BitvidInit+0x20c>
    2864:	9e 8f       	std	Y+30, r25	; 0x1e
    2866:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_ON_CMD_1);
    2868:	80 e0       	ldi	r24, 0x00	; 0
    286a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_ON_CMD_2);
    286e:	80 ec       	ldi	r24, 0xC0	; 192
    2870:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
    2874:	80 e0       	ldi	r24, 0x00	; 0
    2876:	90 e0       	ldi	r25, 0x00	; 0
    2878:	a0 e8       	ldi	r26, 0x80	; 128
    287a:	bf e3       	ldi	r27, 0x3F	; 63
    287c:	89 8f       	std	Y+25, r24	; 0x19
    287e:	9a 8f       	std	Y+26, r25	; 0x1a
    2880:	ab 8f       	std	Y+27, r26	; 0x1b
    2882:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2884:	69 8d       	ldd	r22, Y+25	; 0x19
    2886:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2888:	8b 8d       	ldd	r24, Y+27	; 0x1b
    288a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	4a ef       	ldi	r20, 0xFA	; 250
    2892:	54 e4       	ldi	r21, 0x44	; 68
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	8d 8b       	std	Y+21, r24	; 0x15
    289e:	9e 8b       	std	Y+22, r25	; 0x16
    28a0:	af 8b       	std	Y+23, r26	; 0x17
    28a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28a4:	6d 89       	ldd	r22, Y+21	; 0x15
    28a6:	7e 89       	ldd	r23, Y+22	; 0x16
    28a8:	8f 89       	ldd	r24, Y+23	; 0x17
    28aa:	98 8d       	ldd	r25, Y+24	; 0x18
    28ac:	20 e0       	ldi	r18, 0x00	; 0
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	40 e8       	ldi	r20, 0x80	; 128
    28b2:	5f e3       	ldi	r21, 0x3F	; 63
    28b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28b8:	88 23       	and	r24, r24
    28ba:	2c f4       	brge	.+10     	; 0x28c6 <LCD_4_BitvidInit+0x272>
		__ticks = 1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	9c 8b       	std	Y+20, r25	; 0x14
    28c2:	8b 8b       	std	Y+19, r24	; 0x13
    28c4:	3f c0       	rjmp	.+126    	; 0x2944 <LCD_4_BitvidInit+0x2f0>
	else if (__tmp > 65535)
    28c6:	6d 89       	ldd	r22, Y+21	; 0x15
    28c8:	7e 89       	ldd	r23, Y+22	; 0x16
    28ca:	8f 89       	ldd	r24, Y+23	; 0x17
    28cc:	98 8d       	ldd	r25, Y+24	; 0x18
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	3f ef       	ldi	r19, 0xFF	; 255
    28d2:	4f e7       	ldi	r20, 0x7F	; 127
    28d4:	57 e4       	ldi	r21, 0x47	; 71
    28d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28da:	18 16       	cp	r1, r24
    28dc:	4c f5       	brge	.+82     	; 0x2930 <LCD_4_BitvidInit+0x2dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28de:	69 8d       	ldd	r22, Y+25	; 0x19
    28e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28e6:	20 e0       	ldi	r18, 0x00	; 0
    28e8:	30 e0       	ldi	r19, 0x00	; 0
    28ea:	40 e2       	ldi	r20, 0x20	; 32
    28ec:	51 e4       	ldi	r21, 0x41	; 65
    28ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f2:	dc 01       	movw	r26, r24
    28f4:	cb 01       	movw	r24, r22
    28f6:	bc 01       	movw	r22, r24
    28f8:	cd 01       	movw	r24, r26
    28fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28fe:	dc 01       	movw	r26, r24
    2900:	cb 01       	movw	r24, r22
    2902:	9c 8b       	std	Y+20, r25	; 0x14
    2904:	8b 8b       	std	Y+19, r24	; 0x13
    2906:	0f c0       	rjmp	.+30     	; 0x2926 <LCD_4_BitvidInit+0x2d2>
    2908:	88 ec       	ldi	r24, 0xC8	; 200
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	9a 8b       	std	Y+18, r25	; 0x12
    290e:	89 8b       	std	Y+17, r24	; 0x11
    2910:	89 89       	ldd	r24, Y+17	; 0x11
    2912:	9a 89       	ldd	r25, Y+18	; 0x12
    2914:	01 97       	sbiw	r24, 0x01	; 1
    2916:	f1 f7       	brne	.-4      	; 0x2914 <LCD_4_BitvidInit+0x2c0>
    2918:	9a 8b       	std	Y+18, r25	; 0x12
    291a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291c:	8b 89       	ldd	r24, Y+19	; 0x13
    291e:	9c 89       	ldd	r25, Y+20	; 0x14
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	9c 8b       	std	Y+20, r25	; 0x14
    2924:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2926:	8b 89       	ldd	r24, Y+19	; 0x13
    2928:	9c 89       	ldd	r25, Y+20	; 0x14
    292a:	00 97       	sbiw	r24, 0x00	; 0
    292c:	69 f7       	brne	.-38     	; 0x2908 <LCD_4_BitvidInit+0x2b4>
    292e:	14 c0       	rjmp	.+40     	; 0x2958 <LCD_4_BitvidInit+0x304>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2930:	6d 89       	ldd	r22, Y+21	; 0x15
    2932:	7e 89       	ldd	r23, Y+22	; 0x16
    2934:	8f 89       	ldd	r24, Y+23	; 0x17
    2936:	98 8d       	ldd	r25, Y+24	; 0x18
    2938:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293c:	dc 01       	movw	r26, r24
    293e:	cb 01       	movw	r24, r22
    2940:	9c 8b       	std	Y+20, r25	; 0x14
    2942:	8b 8b       	std	Y+19, r24	; 0x13
    2944:	8b 89       	ldd	r24, Y+19	; 0x13
    2946:	9c 89       	ldd	r25, Y+20	; 0x14
    2948:	98 8b       	std	Y+16, r25	; 0x10
    294a:	8f 87       	std	Y+15, r24	; 0x0f
    294c:	8f 85       	ldd	r24, Y+15	; 0x0f
    294e:	98 89       	ldd	r25, Y+16	; 0x10
    2950:	01 97       	sbiw	r24, 0x01	; 1
    2952:	f1 f7       	brne	.-4      	; 0x2950 <LCD_4_BitvidInit+0x2fc>
    2954:	98 8b       	std	Y+16, r25	; 0x10
    2956:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_CLEAR_CMD_1);
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_DISPLAY_CLEAR_CMD_2);
    295e:	80 e1       	ldi	r24, 0x10	; 16
    2960:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	a0 e0       	ldi	r26, 0x00	; 0
    296a:	b0 e4       	ldi	r27, 0x40	; 64
    296c:	8b 87       	std	Y+11, r24	; 0x0b
    296e:	9c 87       	std	Y+12, r25	; 0x0c
    2970:	ad 87       	std	Y+13, r26	; 0x0d
    2972:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2974:	6b 85       	ldd	r22, Y+11	; 0x0b
    2976:	7c 85       	ldd	r23, Y+12	; 0x0c
    2978:	8d 85       	ldd	r24, Y+13	; 0x0d
    297a:	9e 85       	ldd	r25, Y+14	; 0x0e
    297c:	20 e0       	ldi	r18, 0x00	; 0
    297e:	30 e0       	ldi	r19, 0x00	; 0
    2980:	4a ef       	ldi	r20, 0xFA	; 250
    2982:	54 e4       	ldi	r21, 0x44	; 68
    2984:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2988:	dc 01       	movw	r26, r24
    298a:	cb 01       	movw	r24, r22
    298c:	8f 83       	std	Y+7, r24	; 0x07
    298e:	98 87       	std	Y+8, r25	; 0x08
    2990:	a9 87       	std	Y+9, r26	; 0x09
    2992:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2994:	6f 81       	ldd	r22, Y+7	; 0x07
    2996:	78 85       	ldd	r23, Y+8	; 0x08
    2998:	89 85       	ldd	r24, Y+9	; 0x09
    299a:	9a 85       	ldd	r25, Y+10	; 0x0a
    299c:	20 e0       	ldi	r18, 0x00	; 0
    299e:	30 e0       	ldi	r19, 0x00	; 0
    29a0:	40 e8       	ldi	r20, 0x80	; 128
    29a2:	5f e3       	ldi	r21, 0x3F	; 63
    29a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29a8:	88 23       	and	r24, r24
    29aa:	2c f4       	brge	.+10     	; 0x29b6 <LCD_4_BitvidInit+0x362>
		__ticks = 1;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	9e 83       	std	Y+6, r25	; 0x06
    29b2:	8d 83       	std	Y+5, r24	; 0x05
    29b4:	3f c0       	rjmp	.+126    	; 0x2a34 <LCD_4_BitvidInit+0x3e0>
	else if (__tmp > 65535)
    29b6:	6f 81       	ldd	r22, Y+7	; 0x07
    29b8:	78 85       	ldd	r23, Y+8	; 0x08
    29ba:	89 85       	ldd	r24, Y+9	; 0x09
    29bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	3f ef       	ldi	r19, 0xFF	; 255
    29c2:	4f e7       	ldi	r20, 0x7F	; 127
    29c4:	57 e4       	ldi	r21, 0x47	; 71
    29c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29ca:	18 16       	cp	r1, r24
    29cc:	4c f5       	brge	.+82     	; 0x2a20 <LCD_4_BitvidInit+0x3cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    29d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e2       	ldi	r20, 0x20	; 32
    29dc:	51 e4       	ldi	r21, 0x41	; 65
    29de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29e2:	dc 01       	movw	r26, r24
    29e4:	cb 01       	movw	r24, r22
    29e6:	bc 01       	movw	r22, r24
    29e8:	cd 01       	movw	r24, r26
    29ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29ee:	dc 01       	movw	r26, r24
    29f0:	cb 01       	movw	r24, r22
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	0f c0       	rjmp	.+30     	; 0x2a16 <LCD_4_BitvidInit+0x3c2>
    29f8:	88 ec       	ldi	r24, 0xC8	; 200
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	9c 83       	std	Y+4, r25	; 0x04
    29fe:	8b 83       	std	Y+3, r24	; 0x03
    2a00:	8b 81       	ldd	r24, Y+3	; 0x03
    2a02:	9c 81       	ldd	r25, Y+4	; 0x04
    2a04:	01 97       	sbiw	r24, 0x01	; 1
    2a06:	f1 f7       	brne	.-4      	; 0x2a04 <LCD_4_BitvidInit+0x3b0>
    2a08:	9c 83       	std	Y+4, r25	; 0x04
    2a0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a0c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a0e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a10:	01 97       	sbiw	r24, 0x01	; 1
    2a12:	9e 83       	std	Y+6, r25	; 0x06
    2a14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	9e 81       	ldd	r25, Y+6	; 0x06
    2a1a:	00 97       	sbiw	r24, 0x00	; 0
    2a1c:	69 f7       	brne	.-38     	; 0x29f8 <LCD_4_BitvidInit+0x3a4>
    2a1e:	14 c0       	rjmp	.+40     	; 0x2a48 <LCD_4_BitvidInit+0x3f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a20:	6f 81       	ldd	r22, Y+7	; 0x07
    2a22:	78 85       	ldd	r23, Y+8	; 0x08
    2a24:	89 85       	ldd	r24, Y+9	; 0x09
    2a26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	9e 83       	std	Y+6, r25	; 0x06
    2a32:	8d 83       	std	Y+5, r24	; 0x05
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	9a 83       	std	Y+2, r25	; 0x02
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	01 97       	sbiw	r24, 0x01	; 1
    2a42:	f1 f7       	brne	.-4      	; 0x2a40 <LCD_4_BitvidInit+0x3ec>
    2a44:	9a 83       	std	Y+2, r25	; 0x02
    2a46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_4_BitvidsendCommand(LCD_4_BIT_ENTRY_MODE_SET_CMD_1);
    2a48:	80 e0       	ldi	r24, 0x00	; 0
    2a4a:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
	LCD_4_BitvidsendCommand(LCD_4_BIT_ENTRY_MODE_SET_CMD_2);
    2a4e:	80 e6       	ldi	r24, 0x60	; 96
    2a50:	0e 94 33 15 	call	0x2a66	; 0x2a66 <LCD_4_BitvidsendCommand>
}
    2a54:	e8 96       	adiw	r28, 0x38	; 56
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	cf 91       	pop	r28
    2a62:	df 91       	pop	r29
    2a64:	08 95       	ret

00002a66 <LCD_4_BitvidsendCommand>:
void LCD_4_BitvidsendCommand(u8 Copy_u8command)
{
    2a66:	df 93       	push	r29
    2a68:	cf 93       	push	r28
    2a6a:	cd b7       	in	r28, 0x3d	; 61
    2a6c:	de b7       	in	r29, 0x3e	; 62
    2a6e:	e9 97       	sbiw	r28, 0x39	; 57
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2a7c:	83 e0       	ldi	r24, 0x03	; 3
    2a7e:	62 e0       	ldi	r22, 0x02	; 2
    2a80:	40 e0       	ldi	r20, 0x00	; 0
    2a82:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2a86:	83 e0       	ldi	r24, 0x03	; 3
    2a88:	61 e0       	ldi	r22, 0x01	; 1
    2a8a:	40 e0       	ldi	r20, 0x00	; 0
    2a8c:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8command) & (HALF_LOW_HALF_HIGH)));
    2a90:	89 ad       	ldd	r24, Y+57	; 0x39
    2a92:	98 2f       	mov	r25, r24
    2a94:	90 7f       	andi	r25, 0xF0	; 240
    2a96:	82 e0       	ldi	r24, 0x02	; 2
    2a98:	69 2f       	mov	r22, r25
    2a9a:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2a9e:	83 e0       	ldi	r24, 0x03	; 3
    2aa0:	60 e0       	ldi	r22, 0x00	; 0
    2aa2:	41 e0       	ldi	r20, 0x01	; 1
    2aa4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	a0 e0       	ldi	r26, 0x00	; 0
    2aae:	b0 e4       	ldi	r27, 0x40	; 64
    2ab0:	8d ab       	std	Y+53, r24	; 0x35
    2ab2:	9e ab       	std	Y+54, r25	; 0x36
    2ab4:	af ab       	std	Y+55, r26	; 0x37
    2ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    2aba:	7e a9       	ldd	r23, Y+54	; 0x36
    2abc:	8f a9       	ldd	r24, Y+55	; 0x37
    2abe:	98 ad       	ldd	r25, Y+56	; 0x38
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	4a ef       	ldi	r20, 0xFA	; 250
    2ac6:	54 e4       	ldi	r21, 0x44	; 68
    2ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2acc:	dc 01       	movw	r26, r24
    2ace:	cb 01       	movw	r24, r22
    2ad0:	89 ab       	std	Y+49, r24	; 0x31
    2ad2:	9a ab       	std	Y+50, r25	; 0x32
    2ad4:	ab ab       	std	Y+51, r26	; 0x33
    2ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    2ada:	7a a9       	ldd	r23, Y+50	; 0x32
    2adc:	8b a9       	ldd	r24, Y+51	; 0x33
    2ade:	9c a9       	ldd	r25, Y+52	; 0x34
    2ae0:	20 e0       	ldi	r18, 0x00	; 0
    2ae2:	30 e0       	ldi	r19, 0x00	; 0
    2ae4:	40 e8       	ldi	r20, 0x80	; 128
    2ae6:	5f e3       	ldi	r21, 0x3F	; 63
    2ae8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2aec:	88 23       	and	r24, r24
    2aee:	2c f4       	brge	.+10     	; 0x2afa <LCD_4_BitvidsendCommand+0x94>
		__ticks = 1;
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	90 e0       	ldi	r25, 0x00	; 0
    2af4:	98 ab       	std	Y+48, r25	; 0x30
    2af6:	8f a7       	std	Y+47, r24	; 0x2f
    2af8:	3f c0       	rjmp	.+126    	; 0x2b78 <LCD_4_BitvidsendCommand+0x112>
	else if (__tmp > 65535)
    2afa:	69 a9       	ldd	r22, Y+49	; 0x31
    2afc:	7a a9       	ldd	r23, Y+50	; 0x32
    2afe:	8b a9       	ldd	r24, Y+51	; 0x33
    2b00:	9c a9       	ldd	r25, Y+52	; 0x34
    2b02:	20 e0       	ldi	r18, 0x00	; 0
    2b04:	3f ef       	ldi	r19, 0xFF	; 255
    2b06:	4f e7       	ldi	r20, 0x7F	; 127
    2b08:	57 e4       	ldi	r21, 0x47	; 71
    2b0a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b0e:	18 16       	cp	r1, r24
    2b10:	4c f5       	brge	.+82     	; 0x2b64 <LCD_4_BitvidsendCommand+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b12:	6d a9       	ldd	r22, Y+53	; 0x35
    2b14:	7e a9       	ldd	r23, Y+54	; 0x36
    2b16:	8f a9       	ldd	r24, Y+55	; 0x37
    2b18:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e2       	ldi	r20, 0x20	; 32
    2b20:	51 e4       	ldi	r21, 0x41	; 65
    2b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b26:	dc 01       	movw	r26, r24
    2b28:	cb 01       	movw	r24, r22
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b32:	dc 01       	movw	r26, r24
    2b34:	cb 01       	movw	r24, r22
    2b36:	98 ab       	std	Y+48, r25	; 0x30
    2b38:	8f a7       	std	Y+47, r24	; 0x2f
    2b3a:	0f c0       	rjmp	.+30     	; 0x2b5a <LCD_4_BitvidsendCommand+0xf4>
    2b3c:	88 ec       	ldi	r24, 0xC8	; 200
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	9e a7       	std	Y+46, r25	; 0x2e
    2b42:	8d a7       	std	Y+45, r24	; 0x2d
    2b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b48:	01 97       	sbiw	r24, 0x01	; 1
    2b4a:	f1 f7       	brne	.-4      	; 0x2b48 <LCD_4_BitvidsendCommand+0xe2>
    2b4c:	9e a7       	std	Y+46, r25	; 0x2e
    2b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b52:	98 a9       	ldd	r25, Y+48	; 0x30
    2b54:	01 97       	sbiw	r24, 0x01	; 1
    2b56:	98 ab       	std	Y+48, r25	; 0x30
    2b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b5e:	00 97       	sbiw	r24, 0x00	; 0
    2b60:	69 f7       	brne	.-38     	; 0x2b3c <LCD_4_BitvidsendCommand+0xd6>
    2b62:	14 c0       	rjmp	.+40     	; 0x2b8c <LCD_4_BitvidsendCommand+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b64:	69 a9       	ldd	r22, Y+49	; 0x31
    2b66:	7a a9       	ldd	r23, Y+50	; 0x32
    2b68:	8b a9       	ldd	r24, Y+51	; 0x33
    2b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    2b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	98 ab       	std	Y+48, r25	; 0x30
    2b76:	8f a7       	std	Y+47, r24	; 0x2f
    2b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7c:	9c a7       	std	Y+44, r25	; 0x2c
    2b7e:	8b a7       	std	Y+43, r24	; 0x2b
    2b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b84:	01 97       	sbiw	r24, 0x01	; 1
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <LCD_4_BitvidsendCommand+0x11e>
    2b88:	9c a7       	std	Y+44, r25	; 0x2c
    2b8a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2b96:	80 e0       	ldi	r24, 0x00	; 0
    2b98:	90 e0       	ldi	r25, 0x00	; 0
    2b9a:	a0 e0       	ldi	r26, 0x00	; 0
    2b9c:	b0 e4       	ldi	r27, 0x40	; 64
    2b9e:	8f a3       	std	Y+39, r24	; 0x27
    2ba0:	98 a7       	std	Y+40, r25	; 0x28
    2ba2:	a9 a7       	std	Y+41, r26	; 0x29
    2ba4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ba6:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba8:	78 a5       	ldd	r23, Y+40	; 0x28
    2baa:	89 a5       	ldd	r24, Y+41	; 0x29
    2bac:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	4a ef       	ldi	r20, 0xFA	; 250
    2bb4:	54 e4       	ldi	r21, 0x44	; 68
    2bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	8b a3       	std	Y+35, r24	; 0x23
    2bc0:	9c a3       	std	Y+36, r25	; 0x24
    2bc2:	ad a3       	std	Y+37, r26	; 0x25
    2bc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2bc6:	6b a1       	ldd	r22, Y+35	; 0x23
    2bc8:	7c a1       	ldd	r23, Y+36	; 0x24
    2bca:	8d a1       	ldd	r24, Y+37	; 0x25
    2bcc:	9e a1       	ldd	r25, Y+38	; 0x26
    2bce:	20 e0       	ldi	r18, 0x00	; 0
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	40 e8       	ldi	r20, 0x80	; 128
    2bd4:	5f e3       	ldi	r21, 0x3F	; 63
    2bd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2bda:	88 23       	and	r24, r24
    2bdc:	2c f4       	brge	.+10     	; 0x2be8 <LCD_4_BitvidsendCommand+0x182>
		__ticks = 1;
    2bde:	81 e0       	ldi	r24, 0x01	; 1
    2be0:	90 e0       	ldi	r25, 0x00	; 0
    2be2:	9a a3       	std	Y+34, r25	; 0x22
    2be4:	89 a3       	std	Y+33, r24	; 0x21
    2be6:	3f c0       	rjmp	.+126    	; 0x2c66 <LCD_4_BitvidsendCommand+0x200>
	else if (__tmp > 65535)
    2be8:	6b a1       	ldd	r22, Y+35	; 0x23
    2bea:	7c a1       	ldd	r23, Y+36	; 0x24
    2bec:	8d a1       	ldd	r24, Y+37	; 0x25
    2bee:	9e a1       	ldd	r25, Y+38	; 0x26
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	3f ef       	ldi	r19, 0xFF	; 255
    2bf4:	4f e7       	ldi	r20, 0x7F	; 127
    2bf6:	57 e4       	ldi	r21, 0x47	; 71
    2bf8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bfc:	18 16       	cp	r1, r24
    2bfe:	4c f5       	brge	.+82     	; 0x2c52 <LCD_4_BitvidsendCommand+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c00:	6f a1       	ldd	r22, Y+39	; 0x27
    2c02:	78 a5       	ldd	r23, Y+40	; 0x28
    2c04:	89 a5       	ldd	r24, Y+41	; 0x29
    2c06:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c08:	20 e0       	ldi	r18, 0x00	; 0
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	40 e2       	ldi	r20, 0x20	; 32
    2c0e:	51 e4       	ldi	r21, 0x41	; 65
    2c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c14:	dc 01       	movw	r26, r24
    2c16:	cb 01       	movw	r24, r22
    2c18:	bc 01       	movw	r22, r24
    2c1a:	cd 01       	movw	r24, r26
    2c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c20:	dc 01       	movw	r26, r24
    2c22:	cb 01       	movw	r24, r22
    2c24:	9a a3       	std	Y+34, r25	; 0x22
    2c26:	89 a3       	std	Y+33, r24	; 0x21
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <LCD_4_BitvidsendCommand+0x1e2>
    2c2a:	88 ec       	ldi	r24, 0xC8	; 200
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	98 a3       	std	Y+32, r25	; 0x20
    2c30:	8f 8f       	std	Y+31, r24	; 0x1f
    2c32:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c34:	98 a1       	ldd	r25, Y+32	; 0x20
    2c36:	01 97       	sbiw	r24, 0x01	; 1
    2c38:	f1 f7       	brne	.-4      	; 0x2c36 <LCD_4_BitvidsendCommand+0x1d0>
    2c3a:	98 a3       	std	Y+32, r25	; 0x20
    2c3c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c3e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c40:	9a a1       	ldd	r25, Y+34	; 0x22
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	9a a3       	std	Y+34, r25	; 0x22
    2c46:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c48:	89 a1       	ldd	r24, Y+33	; 0x21
    2c4a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c4c:	00 97       	sbiw	r24, 0x00	; 0
    2c4e:	69 f7       	brne	.-38     	; 0x2c2a <LCD_4_BitvidsendCommand+0x1c4>
    2c50:	14 c0       	rjmp	.+40     	; 0x2c7a <LCD_4_BitvidsendCommand+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c52:	6b a1       	ldd	r22, Y+35	; 0x23
    2c54:	7c a1       	ldd	r23, Y+36	; 0x24
    2c56:	8d a1       	ldd	r24, Y+37	; 0x25
    2c58:	9e a1       	ldd	r25, Y+38	; 0x26
    2c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c5e:	dc 01       	movw	r26, r24
    2c60:	cb 01       	movw	r24, r22
    2c62:	9a a3       	std	Y+34, r25	; 0x22
    2c64:	89 a3       	std	Y+33, r24	; 0x21
    2c66:	89 a1       	ldd	r24, Y+33	; 0x21
    2c68:	9a a1       	ldd	r25, Y+34	; 0x22
    2c6a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c6c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c6e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c70:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	f1 f7       	brne	.-4      	; 0x2c72 <LCD_4_BitvidsendCommand+0x20c>
    2c76:	9e 8f       	std	Y+30, r25	; 0x1e
    2c78:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2c7a:	83 e0       	ldi	r24, 0x03	; 3
    2c7c:	62 e0       	ldi	r22, 0x02	; 2
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	61 e0       	ldi	r22, 0x01	; 1
    2c88:	40 e0       	ldi	r20, 0x00	; 0
    2c8a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8command<<4) & (HALF_LOW_HALF_HIGH)));
    2c8e:	89 ad       	ldd	r24, Y+57	; 0x39
    2c90:	88 2f       	mov	r24, r24
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	82 95       	swap	r24
    2c96:	92 95       	swap	r25
    2c98:	90 7f       	andi	r25, 0xF0	; 240
    2c9a:	98 27       	eor	r25, r24
    2c9c:	80 7f       	andi	r24, 0xF0	; 240
    2c9e:	98 27       	eor	r25, r24
    2ca0:	98 2f       	mov	r25, r24
    2ca2:	82 e0       	ldi	r24, 0x02	; 2
    2ca4:	69 2f       	mov	r22, r25
    2ca6:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2caa:	83 e0       	ldi	r24, 0x03	; 3
    2cac:	60 e0       	ldi	r22, 0x00	; 0
    2cae:	41 e0       	ldi	r20, 0x01	; 1
    2cb0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2cb4:	80 e0       	ldi	r24, 0x00	; 0
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	a0 e0       	ldi	r26, 0x00	; 0
    2cba:	b0 e4       	ldi	r27, 0x40	; 64
    2cbc:	89 8f       	std	Y+25, r24	; 0x19
    2cbe:	9a 8f       	std	Y+26, r25	; 0x1a
    2cc0:	ab 8f       	std	Y+27, r26	; 0x1b
    2cc2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ccc:	20 e0       	ldi	r18, 0x00	; 0
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	4a ef       	ldi	r20, 0xFA	; 250
    2cd2:	54 e4       	ldi	r21, 0x44	; 68
    2cd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd8:	dc 01       	movw	r26, r24
    2cda:	cb 01       	movw	r24, r22
    2cdc:	8d 8b       	std	Y+21, r24	; 0x15
    2cde:	9e 8b       	std	Y+22, r25	; 0x16
    2ce0:	af 8b       	std	Y+23, r26	; 0x17
    2ce2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ce4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ce6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cea:	98 8d       	ldd	r25, Y+24	; 0x18
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	40 e8       	ldi	r20, 0x80	; 128
    2cf2:	5f e3       	ldi	r21, 0x3F	; 63
    2cf4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2cf8:	88 23       	and	r24, r24
    2cfa:	2c f4       	brge	.+10     	; 0x2d06 <LCD_4_BitvidsendCommand+0x2a0>
		__ticks = 1;
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	90 e0       	ldi	r25, 0x00	; 0
    2d00:	9c 8b       	std	Y+20, r25	; 0x14
    2d02:	8b 8b       	std	Y+19, r24	; 0x13
    2d04:	3f c0       	rjmp	.+126    	; 0x2d84 <LCD_4_BitvidsendCommand+0x31e>
	else if (__tmp > 65535)
    2d06:	6d 89       	ldd	r22, Y+21	; 0x15
    2d08:	7e 89       	ldd	r23, Y+22	; 0x16
    2d0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d0e:	20 e0       	ldi	r18, 0x00	; 0
    2d10:	3f ef       	ldi	r19, 0xFF	; 255
    2d12:	4f e7       	ldi	r20, 0x7F	; 127
    2d14:	57 e4       	ldi	r21, 0x47	; 71
    2d16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d1a:	18 16       	cp	r1, r24
    2d1c:	4c f5       	brge	.+82     	; 0x2d70 <LCD_4_BitvidsendCommand+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d26:	20 e0       	ldi	r18, 0x00	; 0
    2d28:	30 e0       	ldi	r19, 0x00	; 0
    2d2a:	40 e2       	ldi	r20, 0x20	; 32
    2d2c:	51 e4       	ldi	r21, 0x41	; 65
    2d2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	bc 01       	movw	r22, r24
    2d38:	cd 01       	movw	r24, r26
    2d3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d3e:	dc 01       	movw	r26, r24
    2d40:	cb 01       	movw	r24, r22
    2d42:	9c 8b       	std	Y+20, r25	; 0x14
    2d44:	8b 8b       	std	Y+19, r24	; 0x13
    2d46:	0f c0       	rjmp	.+30     	; 0x2d66 <LCD_4_BitvidsendCommand+0x300>
    2d48:	88 ec       	ldi	r24, 0xC8	; 200
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	9a 8b       	std	Y+18, r25	; 0x12
    2d4e:	89 8b       	std	Y+17, r24	; 0x11
    2d50:	89 89       	ldd	r24, Y+17	; 0x11
    2d52:	9a 89       	ldd	r25, Y+18	; 0x12
    2d54:	01 97       	sbiw	r24, 0x01	; 1
    2d56:	f1 f7       	brne	.-4      	; 0x2d54 <LCD_4_BitvidsendCommand+0x2ee>
    2d58:	9a 8b       	std	Y+18, r25	; 0x12
    2d5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d60:	01 97       	sbiw	r24, 0x01	; 1
    2d62:	9c 8b       	std	Y+20, r25	; 0x14
    2d64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d66:	8b 89       	ldd	r24, Y+19	; 0x13
    2d68:	9c 89       	ldd	r25, Y+20	; 0x14
    2d6a:	00 97       	sbiw	r24, 0x00	; 0
    2d6c:	69 f7       	brne	.-38     	; 0x2d48 <LCD_4_BitvidsendCommand+0x2e2>
    2d6e:	14 c0       	rjmp	.+40     	; 0x2d98 <LCD_4_BitvidsendCommand+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d70:	6d 89       	ldd	r22, Y+21	; 0x15
    2d72:	7e 89       	ldd	r23, Y+22	; 0x16
    2d74:	8f 89       	ldd	r24, Y+23	; 0x17
    2d76:	98 8d       	ldd	r25, Y+24	; 0x18
    2d78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	9c 8b       	std	Y+20, r25	; 0x14
    2d82:	8b 8b       	std	Y+19, r24	; 0x13
    2d84:	8b 89       	ldd	r24, Y+19	; 0x13
    2d86:	9c 89       	ldd	r25, Y+20	; 0x14
    2d88:	98 8b       	std	Y+16, r25	; 0x10
    2d8a:	8f 87       	std	Y+15, r24	; 0x0f
    2d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d8e:	98 89       	ldd	r25, Y+16	; 0x10
    2d90:	01 97       	sbiw	r24, 0x01	; 1
    2d92:	f1 f7       	brne	.-4      	; 0x2d90 <LCD_4_BitvidsendCommand+0x32a>
    2d94:	98 8b       	std	Y+16, r25	; 0x10
    2d96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2d98:	83 e0       	ldi	r24, 0x03	; 3
    2d9a:	60 e0       	ldi	r22, 0x00	; 0
    2d9c:	40 e0       	ldi	r20, 0x00	; 0
    2d9e:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2da2:	80 e0       	ldi	r24, 0x00	; 0
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	a0 e0       	ldi	r26, 0x00	; 0
    2da8:	b0 e4       	ldi	r27, 0x40	; 64
    2daa:	8b 87       	std	Y+11, r24	; 0x0b
    2dac:	9c 87       	std	Y+12, r25	; 0x0c
    2dae:	ad 87       	std	Y+13, r26	; 0x0d
    2db0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2db2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2db8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dba:	20 e0       	ldi	r18, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	4a ef       	ldi	r20, 0xFA	; 250
    2dc0:	54 e4       	ldi	r21, 0x44	; 68
    2dc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc6:	dc 01       	movw	r26, r24
    2dc8:	cb 01       	movw	r24, r22
    2dca:	8f 83       	std	Y+7, r24	; 0x07
    2dcc:	98 87       	std	Y+8, r25	; 0x08
    2dce:	a9 87       	std	Y+9, r26	; 0x09
    2dd0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2dd2:	6f 81       	ldd	r22, Y+7	; 0x07
    2dd4:	78 85       	ldd	r23, Y+8	; 0x08
    2dd6:	89 85       	ldd	r24, Y+9	; 0x09
    2dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dda:	20 e0       	ldi	r18, 0x00	; 0
    2ddc:	30 e0       	ldi	r19, 0x00	; 0
    2dde:	40 e8       	ldi	r20, 0x80	; 128
    2de0:	5f e3       	ldi	r21, 0x3F	; 63
    2de2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2de6:	88 23       	and	r24, r24
    2de8:	2c f4       	brge	.+10     	; 0x2df4 <LCD_4_BitvidsendCommand+0x38e>
		__ticks = 1;
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	90 e0       	ldi	r25, 0x00	; 0
    2dee:	9e 83       	std	Y+6, r25	; 0x06
    2df0:	8d 83       	std	Y+5, r24	; 0x05
    2df2:	3f c0       	rjmp	.+126    	; 0x2e72 <LCD_4_BitvidsendCommand+0x40c>
	else if (__tmp > 65535)
    2df4:	6f 81       	ldd	r22, Y+7	; 0x07
    2df6:	78 85       	ldd	r23, Y+8	; 0x08
    2df8:	89 85       	ldd	r24, Y+9	; 0x09
    2dfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dfc:	20 e0       	ldi	r18, 0x00	; 0
    2dfe:	3f ef       	ldi	r19, 0xFF	; 255
    2e00:	4f e7       	ldi	r20, 0x7F	; 127
    2e02:	57 e4       	ldi	r21, 0x47	; 71
    2e04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e08:	18 16       	cp	r1, r24
    2e0a:	4c f5       	brge	.+82     	; 0x2e5e <LCD_4_BitvidsendCommand+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e14:	20 e0       	ldi	r18, 0x00	; 0
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	40 e2       	ldi	r20, 0x20	; 32
    2e1a:	51 e4       	ldi	r21, 0x41	; 65
    2e1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	bc 01       	movw	r22, r24
    2e26:	cd 01       	movw	r24, r26
    2e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e2c:	dc 01       	movw	r26, r24
    2e2e:	cb 01       	movw	r24, r22
    2e30:	9e 83       	std	Y+6, r25	; 0x06
    2e32:	8d 83       	std	Y+5, r24	; 0x05
    2e34:	0f c0       	rjmp	.+30     	; 0x2e54 <LCD_4_BitvidsendCommand+0x3ee>
    2e36:	88 ec       	ldi	r24, 0xC8	; 200
    2e38:	90 e0       	ldi	r25, 0x00	; 0
    2e3a:	9c 83       	std	Y+4, r25	; 0x04
    2e3c:	8b 83       	std	Y+3, r24	; 0x03
    2e3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e40:	9c 81       	ldd	r25, Y+4	; 0x04
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_4_BitvidsendCommand+0x3dc>
    2e46:	9c 83       	std	Y+4, r25	; 0x04
    2e48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e4e:	01 97       	sbiw	r24, 0x01	; 1
    2e50:	9e 83       	std	Y+6, r25	; 0x06
    2e52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e54:	8d 81       	ldd	r24, Y+5	; 0x05
    2e56:	9e 81       	ldd	r25, Y+6	; 0x06
    2e58:	00 97       	sbiw	r24, 0x00	; 0
    2e5a:	69 f7       	brne	.-38     	; 0x2e36 <LCD_4_BitvidsendCommand+0x3d0>
    2e5c:	14 c0       	rjmp	.+40     	; 0x2e86 <LCD_4_BitvidsendCommand+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2e60:	78 85       	ldd	r23, Y+8	; 0x08
    2e62:	89 85       	ldd	r24, Y+9	; 0x09
    2e64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	9e 83       	std	Y+6, r25	; 0x06
    2e70:	8d 83       	std	Y+5, r24	; 0x05
    2e72:	8d 81       	ldd	r24, Y+5	; 0x05
    2e74:	9e 81       	ldd	r25, Y+6	; 0x06
    2e76:	9a 83       	std	Y+2, r25	; 0x02
    2e78:	89 83       	std	Y+1, r24	; 0x01
    2e7a:	89 81       	ldd	r24, Y+1	; 0x01
    2e7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7e:	01 97       	sbiw	r24, 0x01	; 1
    2e80:	f1 f7       	brne	.-4      	; 0x2e7e <LCD_4_BitvidsendCommand+0x418>
    2e82:	9a 83       	std	Y+2, r25	; 0x02
    2e84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    2e86:	e9 96       	adiw	r28, 0x39	; 57
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <LCD_4_BitvidwriteCharacter>:
void LCD_4_BitvidwriteCharacter(u8 Copy_u8character)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
    2ea0:	e9 97       	sbiw	r28, 0x39	; 57
    2ea2:	0f b6       	in	r0, 0x3f	; 63
    2ea4:	f8 94       	cli
    2ea6:	de bf       	out	0x3e, r29	; 62
    2ea8:	0f be       	out	0x3f, r0	; 63
    2eaa:	cd bf       	out	0x3d, r28	; 61
    2eac:	89 af       	std	Y+57, r24	; 0x39
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	62 e0       	ldi	r22, 0x02	; 2
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2eb8:	83 e0       	ldi	r24, 0x03	; 3
    2eba:	61 e0       	ldi	r22, 0x01	; 1
    2ebc:	40 e0       	ldi	r20, 0x00	; 0
    2ebe:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8character) & (HALF_LOW_HALF_HIGH)));
    2ec2:	89 ad       	ldd	r24, Y+57	; 0x39
    2ec4:	98 2f       	mov	r25, r24
    2ec6:	90 7f       	andi	r25, 0xF0	; 240
    2ec8:	82 e0       	ldi	r24, 0x02	; 2
    2eca:	69 2f       	mov	r22, r25
    2ecc:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	41 e0       	ldi	r20, 0x01	; 1
    2ed6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e0       	ldi	r26, 0x00	; 0
    2ee0:	b0 e4       	ldi	r27, 0x40	; 64
    2ee2:	8d ab       	std	Y+53, r24	; 0x35
    2ee4:	9e ab       	std	Y+54, r25	; 0x36
    2ee6:	af ab       	std	Y+55, r26	; 0x37
    2ee8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eea:	6d a9       	ldd	r22, Y+53	; 0x35
    2eec:	7e a9       	ldd	r23, Y+54	; 0x36
    2eee:	8f a9       	ldd	r24, Y+55	; 0x37
    2ef0:	98 ad       	ldd	r25, Y+56	; 0x38
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	4a ef       	ldi	r20, 0xFA	; 250
    2ef8:	54 e4       	ldi	r21, 0x44	; 68
    2efa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	89 ab       	std	Y+49, r24	; 0x31
    2f04:	9a ab       	std	Y+50, r25	; 0x32
    2f06:	ab ab       	std	Y+51, r26	; 0x33
    2f08:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2f0a:	69 a9       	ldd	r22, Y+49	; 0x31
    2f0c:	7a a9       	ldd	r23, Y+50	; 0x32
    2f0e:	8b a9       	ldd	r24, Y+51	; 0x33
    2f10:	9c a9       	ldd	r25, Y+52	; 0x34
    2f12:	20 e0       	ldi	r18, 0x00	; 0
    2f14:	30 e0       	ldi	r19, 0x00	; 0
    2f16:	40 e8       	ldi	r20, 0x80	; 128
    2f18:	5f e3       	ldi	r21, 0x3F	; 63
    2f1a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f1e:	88 23       	and	r24, r24
    2f20:	2c f4       	brge	.+10     	; 0x2f2c <LCD_4_BitvidwriteCharacter+0x94>
		__ticks = 1;
    2f22:	81 e0       	ldi	r24, 0x01	; 1
    2f24:	90 e0       	ldi	r25, 0x00	; 0
    2f26:	98 ab       	std	Y+48, r25	; 0x30
    2f28:	8f a7       	std	Y+47, r24	; 0x2f
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <LCD_4_BitvidwriteCharacter+0x112>
	else if (__tmp > 65535)
    2f2c:	69 a9       	ldd	r22, Y+49	; 0x31
    2f2e:	7a a9       	ldd	r23, Y+50	; 0x32
    2f30:	8b a9       	ldd	r24, Y+51	; 0x33
    2f32:	9c a9       	ldd	r25, Y+52	; 0x34
    2f34:	20 e0       	ldi	r18, 0x00	; 0
    2f36:	3f ef       	ldi	r19, 0xFF	; 255
    2f38:	4f e7       	ldi	r20, 0x7F	; 127
    2f3a:	57 e4       	ldi	r21, 0x47	; 71
    2f3c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f40:	18 16       	cp	r1, r24
    2f42:	4c f5       	brge	.+82     	; 0x2f96 <LCD_4_BitvidwriteCharacter+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f44:	6d a9       	ldd	r22, Y+53	; 0x35
    2f46:	7e a9       	ldd	r23, Y+54	; 0x36
    2f48:	8f a9       	ldd	r24, Y+55	; 0x37
    2f4a:	98 ad       	ldd	r25, Y+56	; 0x38
    2f4c:	20 e0       	ldi	r18, 0x00	; 0
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	40 e2       	ldi	r20, 0x20	; 32
    2f52:	51 e4       	ldi	r21, 0x41	; 65
    2f54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f58:	dc 01       	movw	r26, r24
    2f5a:	cb 01       	movw	r24, r22
    2f5c:	bc 01       	movw	r22, r24
    2f5e:	cd 01       	movw	r24, r26
    2f60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f64:	dc 01       	movw	r26, r24
    2f66:	cb 01       	movw	r24, r22
    2f68:	98 ab       	std	Y+48, r25	; 0x30
    2f6a:	8f a7       	std	Y+47, r24	; 0x2f
    2f6c:	0f c0       	rjmp	.+30     	; 0x2f8c <LCD_4_BitvidwriteCharacter+0xf4>
    2f6e:	88 ec       	ldi	r24, 0xC8	; 200
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	9e a7       	std	Y+46, r25	; 0x2e
    2f74:	8d a7       	std	Y+45, r24	; 0x2d
    2f76:	8d a5       	ldd	r24, Y+45	; 0x2d
    2f78:	9e a5       	ldd	r25, Y+46	; 0x2e
    2f7a:	01 97       	sbiw	r24, 0x01	; 1
    2f7c:	f1 f7       	brne	.-4      	; 0x2f7a <LCD_4_BitvidwriteCharacter+0xe2>
    2f7e:	9e a7       	std	Y+46, r25	; 0x2e
    2f80:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f82:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f84:	98 a9       	ldd	r25, Y+48	; 0x30
    2f86:	01 97       	sbiw	r24, 0x01	; 1
    2f88:	98 ab       	std	Y+48, r25	; 0x30
    2f8a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2f8e:	98 a9       	ldd	r25, Y+48	; 0x30
    2f90:	00 97       	sbiw	r24, 0x00	; 0
    2f92:	69 f7       	brne	.-38     	; 0x2f6e <LCD_4_BitvidwriteCharacter+0xd6>
    2f94:	14 c0       	rjmp	.+40     	; 0x2fbe <LCD_4_BitvidwriteCharacter+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f96:	69 a9       	ldd	r22, Y+49	; 0x31
    2f98:	7a a9       	ldd	r23, Y+50	; 0x32
    2f9a:	8b a9       	ldd	r24, Y+51	; 0x33
    2f9c:	9c a9       	ldd	r25, Y+52	; 0x34
    2f9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fa2:	dc 01       	movw	r26, r24
    2fa4:	cb 01       	movw	r24, r22
    2fa6:	98 ab       	std	Y+48, r25	; 0x30
    2fa8:	8f a7       	std	Y+47, r24	; 0x2f
    2faa:	8f a5       	ldd	r24, Y+47	; 0x2f
    2fac:	98 a9       	ldd	r25, Y+48	; 0x30
    2fae:	9c a7       	std	Y+44, r25	; 0x2c
    2fb0:	8b a7       	std	Y+43, r24	; 0x2b
    2fb2:	8b a5       	ldd	r24, Y+43	; 0x2b
    2fb4:	9c a5       	ldd	r25, Y+44	; 0x2c
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	f1 f7       	brne	.-4      	; 0x2fb6 <LCD_4_BitvidwriteCharacter+0x11e>
    2fba:	9c a7       	std	Y+44, r25	; 0x2c
    2fbc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2fbe:	83 e0       	ldi	r24, 0x03	; 3
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    2fc8:	80 e0       	ldi	r24, 0x00	; 0
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	a0 e0       	ldi	r26, 0x00	; 0
    2fce:	b0 e4       	ldi	r27, 0x40	; 64
    2fd0:	8f a3       	std	Y+39, r24	; 0x27
    2fd2:	98 a7       	std	Y+40, r25	; 0x28
    2fd4:	a9 a7       	std	Y+41, r26	; 0x29
    2fd6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd8:	6f a1       	ldd	r22, Y+39	; 0x27
    2fda:	78 a5       	ldd	r23, Y+40	; 0x28
    2fdc:	89 a5       	ldd	r24, Y+41	; 0x29
    2fde:	9a a5       	ldd	r25, Y+42	; 0x2a
    2fe0:	20 e0       	ldi	r18, 0x00	; 0
    2fe2:	30 e0       	ldi	r19, 0x00	; 0
    2fe4:	4a ef       	ldi	r20, 0xFA	; 250
    2fe6:	54 e4       	ldi	r21, 0x44	; 68
    2fe8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fec:	dc 01       	movw	r26, r24
    2fee:	cb 01       	movw	r24, r22
    2ff0:	8b a3       	std	Y+35, r24	; 0x23
    2ff2:	9c a3       	std	Y+36, r25	; 0x24
    2ff4:	ad a3       	std	Y+37, r26	; 0x25
    2ff6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2ff8:	6b a1       	ldd	r22, Y+35	; 0x23
    2ffa:	7c a1       	ldd	r23, Y+36	; 0x24
    2ffc:	8d a1       	ldd	r24, Y+37	; 0x25
    2ffe:	9e a1       	ldd	r25, Y+38	; 0x26
    3000:	20 e0       	ldi	r18, 0x00	; 0
    3002:	30 e0       	ldi	r19, 0x00	; 0
    3004:	40 e8       	ldi	r20, 0x80	; 128
    3006:	5f e3       	ldi	r21, 0x3F	; 63
    3008:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    300c:	88 23       	and	r24, r24
    300e:	2c f4       	brge	.+10     	; 0x301a <LCD_4_BitvidwriteCharacter+0x182>
		__ticks = 1;
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	90 e0       	ldi	r25, 0x00	; 0
    3014:	9a a3       	std	Y+34, r25	; 0x22
    3016:	89 a3       	std	Y+33, r24	; 0x21
    3018:	3f c0       	rjmp	.+126    	; 0x3098 <LCD_4_BitvidwriteCharacter+0x200>
	else if (__tmp > 65535)
    301a:	6b a1       	ldd	r22, Y+35	; 0x23
    301c:	7c a1       	ldd	r23, Y+36	; 0x24
    301e:	8d a1       	ldd	r24, Y+37	; 0x25
    3020:	9e a1       	ldd	r25, Y+38	; 0x26
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	3f ef       	ldi	r19, 0xFF	; 255
    3026:	4f e7       	ldi	r20, 0x7F	; 127
    3028:	57 e4       	ldi	r21, 0x47	; 71
    302a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    302e:	18 16       	cp	r1, r24
    3030:	4c f5       	brge	.+82     	; 0x3084 <LCD_4_BitvidwriteCharacter+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3032:	6f a1       	ldd	r22, Y+39	; 0x27
    3034:	78 a5       	ldd	r23, Y+40	; 0x28
    3036:	89 a5       	ldd	r24, Y+41	; 0x29
    3038:	9a a5       	ldd	r25, Y+42	; 0x2a
    303a:	20 e0       	ldi	r18, 0x00	; 0
    303c:	30 e0       	ldi	r19, 0x00	; 0
    303e:	40 e2       	ldi	r20, 0x20	; 32
    3040:	51 e4       	ldi	r21, 0x41	; 65
    3042:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	bc 01       	movw	r22, r24
    304c:	cd 01       	movw	r24, r26
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	9a a3       	std	Y+34, r25	; 0x22
    3058:	89 a3       	std	Y+33, r24	; 0x21
    305a:	0f c0       	rjmp	.+30     	; 0x307a <LCD_4_BitvidwriteCharacter+0x1e2>
    305c:	88 ec       	ldi	r24, 0xC8	; 200
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	98 a3       	std	Y+32, r25	; 0x20
    3062:	8f 8f       	std	Y+31, r24	; 0x1f
    3064:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3066:	98 a1       	ldd	r25, Y+32	; 0x20
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	f1 f7       	brne	.-4      	; 0x3068 <LCD_4_BitvidwriteCharacter+0x1d0>
    306c:	98 a3       	std	Y+32, r25	; 0x20
    306e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3070:	89 a1       	ldd	r24, Y+33	; 0x21
    3072:	9a a1       	ldd	r25, Y+34	; 0x22
    3074:	01 97       	sbiw	r24, 0x01	; 1
    3076:	9a a3       	std	Y+34, r25	; 0x22
    3078:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    307a:	89 a1       	ldd	r24, Y+33	; 0x21
    307c:	9a a1       	ldd	r25, Y+34	; 0x22
    307e:	00 97       	sbiw	r24, 0x00	; 0
    3080:	69 f7       	brne	.-38     	; 0x305c <LCD_4_BitvidwriteCharacter+0x1c4>
    3082:	14 c0       	rjmp	.+40     	; 0x30ac <LCD_4_BitvidwriteCharacter+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3084:	6b a1       	ldd	r22, Y+35	; 0x23
    3086:	7c a1       	ldd	r23, Y+36	; 0x24
    3088:	8d a1       	ldd	r24, Y+37	; 0x25
    308a:	9e a1       	ldd	r25, Y+38	; 0x26
    308c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3090:	dc 01       	movw	r26, r24
    3092:	cb 01       	movw	r24, r22
    3094:	9a a3       	std	Y+34, r25	; 0x22
    3096:	89 a3       	std	Y+33, r24	; 0x21
    3098:	89 a1       	ldd	r24, Y+33	; 0x21
    309a:	9a a1       	ldd	r25, Y+34	; 0x22
    309c:	9e 8f       	std	Y+30, r25	; 0x1e
    309e:	8d 8f       	std	Y+29, r24	; 0x1d
    30a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    30a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    30a4:	01 97       	sbiw	r24, 0x01	; 1
    30a6:	f1 f7       	brne	.-4      	; 0x30a4 <LCD_4_BitvidwriteCharacter+0x20c>
    30a8:	9e 8f       	std	Y+30, r25	; 0x1e
    30aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    30ac:	83 e0       	ldi	r24, 0x03	; 3
    30ae:	62 e0       	ldi	r22, 0x02	; 2
    30b0:	41 e0       	ldi	r20, 0x01	; 1
    30b2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    30b6:	83 e0       	ldi	r24, 0x03	; 3
    30b8:	61 e0       	ldi	r22, 0x01	; 1
    30ba:	40 e0       	ldi	r20, 0x00	; 0
    30bc:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,((Copy_u8character<<4) & (HALF_LOW_HALF_HIGH)));
    30c0:	89 ad       	ldd	r24, Y+57	; 0x39
    30c2:	88 2f       	mov	r24, r24
    30c4:	90 e0       	ldi	r25, 0x00	; 0
    30c6:	82 95       	swap	r24
    30c8:	92 95       	swap	r25
    30ca:	90 7f       	andi	r25, 0xF0	; 240
    30cc:	98 27       	eor	r25, r24
    30ce:	80 7f       	andi	r24, 0xF0	; 240
    30d0:	98 27       	eor	r25, r24
    30d2:	98 2f       	mov	r25, r24
    30d4:	82 e0       	ldi	r24, 0x02	; 2
    30d6:	69 2f       	mov	r22, r25
    30d8:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    30dc:	83 e0       	ldi	r24, 0x03	; 3
    30de:	60 e0       	ldi	r22, 0x00	; 0
    30e0:	41 e0       	ldi	r20, 0x01	; 1
    30e2:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	90 e0       	ldi	r25, 0x00	; 0
    30ea:	a0 e0       	ldi	r26, 0x00	; 0
    30ec:	b0 e4       	ldi	r27, 0x40	; 64
    30ee:	89 8f       	std	Y+25, r24	; 0x19
    30f0:	9a 8f       	std	Y+26, r25	; 0x1a
    30f2:	ab 8f       	std	Y+27, r26	; 0x1b
    30f4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30f6:	69 8d       	ldd	r22, Y+25	; 0x19
    30f8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    30fa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    30fc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	4a ef       	ldi	r20, 0xFA	; 250
    3104:	54 e4       	ldi	r21, 0x44	; 68
    3106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    310a:	dc 01       	movw	r26, r24
    310c:	cb 01       	movw	r24, r22
    310e:	8d 8b       	std	Y+21, r24	; 0x15
    3110:	9e 8b       	std	Y+22, r25	; 0x16
    3112:	af 8b       	std	Y+23, r26	; 0x17
    3114:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3116:	6d 89       	ldd	r22, Y+21	; 0x15
    3118:	7e 89       	ldd	r23, Y+22	; 0x16
    311a:	8f 89       	ldd	r24, Y+23	; 0x17
    311c:	98 8d       	ldd	r25, Y+24	; 0x18
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	40 e8       	ldi	r20, 0x80	; 128
    3124:	5f e3       	ldi	r21, 0x3F	; 63
    3126:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    312a:	88 23       	and	r24, r24
    312c:	2c f4       	brge	.+10     	; 0x3138 <LCD_4_BitvidwriteCharacter+0x2a0>
		__ticks = 1;
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9c 8b       	std	Y+20, r25	; 0x14
    3134:	8b 8b       	std	Y+19, r24	; 0x13
    3136:	3f c0       	rjmp	.+126    	; 0x31b6 <LCD_4_BitvidwriteCharacter+0x31e>
	else if (__tmp > 65535)
    3138:	6d 89       	ldd	r22, Y+21	; 0x15
    313a:	7e 89       	ldd	r23, Y+22	; 0x16
    313c:	8f 89       	ldd	r24, Y+23	; 0x17
    313e:	98 8d       	ldd	r25, Y+24	; 0x18
    3140:	20 e0       	ldi	r18, 0x00	; 0
    3142:	3f ef       	ldi	r19, 0xFF	; 255
    3144:	4f e7       	ldi	r20, 0x7F	; 127
    3146:	57 e4       	ldi	r21, 0x47	; 71
    3148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    314c:	18 16       	cp	r1, r24
    314e:	4c f5       	brge	.+82     	; 0x31a2 <LCD_4_BitvidwriteCharacter+0x30a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3150:	69 8d       	ldd	r22, Y+25	; 0x19
    3152:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3154:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3156:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3158:	20 e0       	ldi	r18, 0x00	; 0
    315a:	30 e0       	ldi	r19, 0x00	; 0
    315c:	40 e2       	ldi	r20, 0x20	; 32
    315e:	51 e4       	ldi	r21, 0x41	; 65
    3160:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3164:	dc 01       	movw	r26, r24
    3166:	cb 01       	movw	r24, r22
    3168:	bc 01       	movw	r22, r24
    316a:	cd 01       	movw	r24, r26
    316c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3170:	dc 01       	movw	r26, r24
    3172:	cb 01       	movw	r24, r22
    3174:	9c 8b       	std	Y+20, r25	; 0x14
    3176:	8b 8b       	std	Y+19, r24	; 0x13
    3178:	0f c0       	rjmp	.+30     	; 0x3198 <LCD_4_BitvidwriteCharacter+0x300>
    317a:	88 ec       	ldi	r24, 0xC8	; 200
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	9a 8b       	std	Y+18, r25	; 0x12
    3180:	89 8b       	std	Y+17, r24	; 0x11
    3182:	89 89       	ldd	r24, Y+17	; 0x11
    3184:	9a 89       	ldd	r25, Y+18	; 0x12
    3186:	01 97       	sbiw	r24, 0x01	; 1
    3188:	f1 f7       	brne	.-4      	; 0x3186 <LCD_4_BitvidwriteCharacter+0x2ee>
    318a:	9a 8b       	std	Y+18, r25	; 0x12
    318c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    318e:	8b 89       	ldd	r24, Y+19	; 0x13
    3190:	9c 89       	ldd	r25, Y+20	; 0x14
    3192:	01 97       	sbiw	r24, 0x01	; 1
    3194:	9c 8b       	std	Y+20, r25	; 0x14
    3196:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3198:	8b 89       	ldd	r24, Y+19	; 0x13
    319a:	9c 89       	ldd	r25, Y+20	; 0x14
    319c:	00 97       	sbiw	r24, 0x00	; 0
    319e:	69 f7       	brne	.-38     	; 0x317a <LCD_4_BitvidwriteCharacter+0x2e2>
    31a0:	14 c0       	rjmp	.+40     	; 0x31ca <LCD_4_BitvidwriteCharacter+0x332>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    31a2:	6d 89       	ldd	r22, Y+21	; 0x15
    31a4:	7e 89       	ldd	r23, Y+22	; 0x16
    31a6:	8f 89       	ldd	r24, Y+23	; 0x17
    31a8:	98 8d       	ldd	r25, Y+24	; 0x18
    31aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31ae:	dc 01       	movw	r26, r24
    31b0:	cb 01       	movw	r24, r22
    31b2:	9c 8b       	std	Y+20, r25	; 0x14
    31b4:	8b 8b       	std	Y+19, r24	; 0x13
    31b6:	8b 89       	ldd	r24, Y+19	; 0x13
    31b8:	9c 89       	ldd	r25, Y+20	; 0x14
    31ba:	98 8b       	std	Y+16, r25	; 0x10
    31bc:	8f 87       	std	Y+15, r24	; 0x0f
    31be:	8f 85       	ldd	r24, Y+15	; 0x0f
    31c0:	98 89       	ldd	r25, Y+16	; 0x10
    31c2:	01 97       	sbiw	r24, 0x01	; 1
    31c4:	f1 f7       	brne	.-4      	; 0x31c2 <LCD_4_BitvidwriteCharacter+0x32a>
    31c6:	98 8b       	std	Y+16, r25	; 0x10
    31c8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    31d4:	80 e0       	ldi	r24, 0x00	; 0
    31d6:	90 e0       	ldi	r25, 0x00	; 0
    31d8:	a0 e0       	ldi	r26, 0x00	; 0
    31da:	b0 e4       	ldi	r27, 0x40	; 64
    31dc:	8b 87       	std	Y+11, r24	; 0x0b
    31de:	9c 87       	std	Y+12, r25	; 0x0c
    31e0:	ad 87       	std	Y+13, r26	; 0x0d
    31e2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31e4:	6b 85       	ldd	r22, Y+11	; 0x0b
    31e6:	7c 85       	ldd	r23, Y+12	; 0x0c
    31e8:	8d 85       	ldd	r24, Y+13	; 0x0d
    31ea:	9e 85       	ldd	r25, Y+14	; 0x0e
    31ec:	20 e0       	ldi	r18, 0x00	; 0
    31ee:	30 e0       	ldi	r19, 0x00	; 0
    31f0:	4a ef       	ldi	r20, 0xFA	; 250
    31f2:	54 e4       	ldi	r21, 0x44	; 68
    31f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f8:	dc 01       	movw	r26, r24
    31fa:	cb 01       	movw	r24, r22
    31fc:	8f 83       	std	Y+7, r24	; 0x07
    31fe:	98 87       	std	Y+8, r25	; 0x08
    3200:	a9 87       	std	Y+9, r26	; 0x09
    3202:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3204:	6f 81       	ldd	r22, Y+7	; 0x07
    3206:	78 85       	ldd	r23, Y+8	; 0x08
    3208:	89 85       	ldd	r24, Y+9	; 0x09
    320a:	9a 85       	ldd	r25, Y+10	; 0x0a
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	30 e0       	ldi	r19, 0x00	; 0
    3210:	40 e8       	ldi	r20, 0x80	; 128
    3212:	5f e3       	ldi	r21, 0x3F	; 63
    3214:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3218:	88 23       	and	r24, r24
    321a:	2c f4       	brge	.+10     	; 0x3226 <LCD_4_BitvidwriteCharacter+0x38e>
		__ticks = 1;
    321c:	81 e0       	ldi	r24, 0x01	; 1
    321e:	90 e0       	ldi	r25, 0x00	; 0
    3220:	9e 83       	std	Y+6, r25	; 0x06
    3222:	8d 83       	std	Y+5, r24	; 0x05
    3224:	3f c0       	rjmp	.+126    	; 0x32a4 <LCD_4_BitvidwriteCharacter+0x40c>
	else if (__tmp > 65535)
    3226:	6f 81       	ldd	r22, Y+7	; 0x07
    3228:	78 85       	ldd	r23, Y+8	; 0x08
    322a:	89 85       	ldd	r24, Y+9	; 0x09
    322c:	9a 85       	ldd	r25, Y+10	; 0x0a
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	3f ef       	ldi	r19, 0xFF	; 255
    3232:	4f e7       	ldi	r20, 0x7F	; 127
    3234:	57 e4       	ldi	r21, 0x47	; 71
    3236:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    323a:	18 16       	cp	r1, r24
    323c:	4c f5       	brge	.+82     	; 0x3290 <LCD_4_BitvidwriteCharacter+0x3f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    323e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3240:	7c 85       	ldd	r23, Y+12	; 0x0c
    3242:	8d 85       	ldd	r24, Y+13	; 0x0d
    3244:	9e 85       	ldd	r25, Y+14	; 0x0e
    3246:	20 e0       	ldi	r18, 0x00	; 0
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	40 e2       	ldi	r20, 0x20	; 32
    324c:	51 e4       	ldi	r21, 0x41	; 65
    324e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3252:	dc 01       	movw	r26, r24
    3254:	cb 01       	movw	r24, r22
    3256:	bc 01       	movw	r22, r24
    3258:	cd 01       	movw	r24, r26
    325a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    325e:	dc 01       	movw	r26, r24
    3260:	cb 01       	movw	r24, r22
    3262:	9e 83       	std	Y+6, r25	; 0x06
    3264:	8d 83       	std	Y+5, r24	; 0x05
    3266:	0f c0       	rjmp	.+30     	; 0x3286 <LCD_4_BitvidwriteCharacter+0x3ee>
    3268:	88 ec       	ldi	r24, 0xC8	; 200
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	9c 83       	std	Y+4, r25	; 0x04
    326e:	8b 83       	std	Y+3, r24	; 0x03
    3270:	8b 81       	ldd	r24, Y+3	; 0x03
    3272:	9c 81       	ldd	r25, Y+4	; 0x04
    3274:	01 97       	sbiw	r24, 0x01	; 1
    3276:	f1 f7       	brne	.-4      	; 0x3274 <LCD_4_BitvidwriteCharacter+0x3dc>
    3278:	9c 83       	std	Y+4, r25	; 0x04
    327a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    327c:	8d 81       	ldd	r24, Y+5	; 0x05
    327e:	9e 81       	ldd	r25, Y+6	; 0x06
    3280:	01 97       	sbiw	r24, 0x01	; 1
    3282:	9e 83       	std	Y+6, r25	; 0x06
    3284:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3286:	8d 81       	ldd	r24, Y+5	; 0x05
    3288:	9e 81       	ldd	r25, Y+6	; 0x06
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	69 f7       	brne	.-38     	; 0x3268 <LCD_4_BitvidwriteCharacter+0x3d0>
    328e:	14 c0       	rjmp	.+40     	; 0x32b8 <LCD_4_BitvidwriteCharacter+0x420>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3290:	6f 81       	ldd	r22, Y+7	; 0x07
    3292:	78 85       	ldd	r23, Y+8	; 0x08
    3294:	89 85       	ldd	r24, Y+9	; 0x09
    3296:	9a 85       	ldd	r25, Y+10	; 0x0a
    3298:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    329c:	dc 01       	movw	r26, r24
    329e:	cb 01       	movw	r24, r22
    32a0:	9e 83       	std	Y+6, r25	; 0x06
    32a2:	8d 83       	std	Y+5, r24	; 0x05
    32a4:	8d 81       	ldd	r24, Y+5	; 0x05
    32a6:	9e 81       	ldd	r25, Y+6	; 0x06
    32a8:	9a 83       	std	Y+2, r25	; 0x02
    32aa:	89 83       	std	Y+1, r24	; 0x01
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	9a 81       	ldd	r25, Y+2	; 0x02
    32b0:	01 97       	sbiw	r24, 0x01	; 1
    32b2:	f1 f7       	brne	.-4      	; 0x32b0 <LCD_4_BitvidwriteCharacter+0x418>
    32b4:	9a 83       	std	Y+2, r25	; 0x02
    32b6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    32b8:	e9 96       	adiw	r28, 0x39	; 57
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <LCD_8_BitvidInit>:

void LCD_8_BitvidInit(void)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	e8 97       	sbiw	r28, 0x38	; 56
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
	DIO_u8setPortDirection(LCD_DATA_PORT,FULL_OUTPUT);
    32de:	82 e0       	ldi	r24, 0x02	; 2
    32e0:	6f ef       	ldi	r22, 0xFF	; 255
    32e2:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <DIO_u8setPortDirection>
	DIO_u8setPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    32e6:	83 e0       	ldi	r24, 0x03	; 3
    32e8:	62 e0       	ldi	r22, 0x02	; 2
    32ea:	41 e0       	ldi	r20, 0x01	; 1
    32ec:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    32f0:	83 e0       	ldi	r24, 0x03	; 3
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	41 e0       	ldi	r20, 0x01	; 1
    32f6:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
	DIO_u8setPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    32fa:	83 e0       	ldi	r24, 0x03	; 3
    32fc:	60 e0       	ldi	r22, 0x00	; 0
    32fe:	41 e0       	ldi	r20, 0x01	; 1
    3300:	0e 94 5c 0f 	call	0x1eb8	; 0x1eb8 <DIO_u8setPinDirection>
    3304:	80 e0       	ldi	r24, 0x00	; 0
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	a0 e2       	ldi	r26, 0x20	; 32
    330a:	b2 e4       	ldi	r27, 0x42	; 66
    330c:	8d ab       	std	Y+53, r24	; 0x35
    330e:	9e ab       	std	Y+54, r25	; 0x36
    3310:	af ab       	std	Y+55, r26	; 0x37
    3312:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3314:	6d a9       	ldd	r22, Y+53	; 0x35
    3316:	7e a9       	ldd	r23, Y+54	; 0x36
    3318:	8f a9       	ldd	r24, Y+55	; 0x37
    331a:	98 ad       	ldd	r25, Y+56	; 0x38
    331c:	20 e0       	ldi	r18, 0x00	; 0
    331e:	30 e0       	ldi	r19, 0x00	; 0
    3320:	4a ef       	ldi	r20, 0xFA	; 250
    3322:	54 e4       	ldi	r21, 0x44	; 68
    3324:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3328:	dc 01       	movw	r26, r24
    332a:	cb 01       	movw	r24, r22
    332c:	89 ab       	std	Y+49, r24	; 0x31
    332e:	9a ab       	std	Y+50, r25	; 0x32
    3330:	ab ab       	std	Y+51, r26	; 0x33
    3332:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3334:	69 a9       	ldd	r22, Y+49	; 0x31
    3336:	7a a9       	ldd	r23, Y+50	; 0x32
    3338:	8b a9       	ldd	r24, Y+51	; 0x33
    333a:	9c a9       	ldd	r25, Y+52	; 0x34
    333c:	20 e0       	ldi	r18, 0x00	; 0
    333e:	30 e0       	ldi	r19, 0x00	; 0
    3340:	40 e8       	ldi	r20, 0x80	; 128
    3342:	5f e3       	ldi	r21, 0x3F	; 63
    3344:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3348:	88 23       	and	r24, r24
    334a:	2c f4       	brge	.+10     	; 0x3356 <LCD_8_BitvidInit+0x8c>
		__ticks = 1;
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	90 e0       	ldi	r25, 0x00	; 0
    3350:	98 ab       	std	Y+48, r25	; 0x30
    3352:	8f a7       	std	Y+47, r24	; 0x2f
    3354:	3f c0       	rjmp	.+126    	; 0x33d4 <LCD_8_BitvidInit+0x10a>
	else if (__tmp > 65535)
    3356:	69 a9       	ldd	r22, Y+49	; 0x31
    3358:	7a a9       	ldd	r23, Y+50	; 0x32
    335a:	8b a9       	ldd	r24, Y+51	; 0x33
    335c:	9c a9       	ldd	r25, Y+52	; 0x34
    335e:	20 e0       	ldi	r18, 0x00	; 0
    3360:	3f ef       	ldi	r19, 0xFF	; 255
    3362:	4f e7       	ldi	r20, 0x7F	; 127
    3364:	57 e4       	ldi	r21, 0x47	; 71
    3366:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    336a:	18 16       	cp	r1, r24
    336c:	4c f5       	brge	.+82     	; 0x33c0 <LCD_8_BitvidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    336e:	6d a9       	ldd	r22, Y+53	; 0x35
    3370:	7e a9       	ldd	r23, Y+54	; 0x36
    3372:	8f a9       	ldd	r24, Y+55	; 0x37
    3374:	98 ad       	ldd	r25, Y+56	; 0x38
    3376:	20 e0       	ldi	r18, 0x00	; 0
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	40 e2       	ldi	r20, 0x20	; 32
    337c:	51 e4       	ldi	r21, 0x41	; 65
    337e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3382:	dc 01       	movw	r26, r24
    3384:	cb 01       	movw	r24, r22
    3386:	bc 01       	movw	r22, r24
    3388:	cd 01       	movw	r24, r26
    338a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    338e:	dc 01       	movw	r26, r24
    3390:	cb 01       	movw	r24, r22
    3392:	98 ab       	std	Y+48, r25	; 0x30
    3394:	8f a7       	std	Y+47, r24	; 0x2f
    3396:	0f c0       	rjmp	.+30     	; 0x33b6 <LCD_8_BitvidInit+0xec>
    3398:	88 ec       	ldi	r24, 0xC8	; 200
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	9e a7       	std	Y+46, r25	; 0x2e
    339e:	8d a7       	std	Y+45, r24	; 0x2d
    33a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    33a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    33a4:	01 97       	sbiw	r24, 0x01	; 1
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <LCD_8_BitvidInit+0xda>
    33a8:	9e a7       	std	Y+46, r25	; 0x2e
    33aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    33ae:	98 a9       	ldd	r25, Y+48	; 0x30
    33b0:	01 97       	sbiw	r24, 0x01	; 1
    33b2:	98 ab       	std	Y+48, r25	; 0x30
    33b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    33b8:	98 a9       	ldd	r25, Y+48	; 0x30
    33ba:	00 97       	sbiw	r24, 0x00	; 0
    33bc:	69 f7       	brne	.-38     	; 0x3398 <LCD_8_BitvidInit+0xce>
    33be:	14 c0       	rjmp	.+40     	; 0x33e8 <LCD_8_BitvidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33c0:	69 a9       	ldd	r22, Y+49	; 0x31
    33c2:	7a a9       	ldd	r23, Y+50	; 0x32
    33c4:	8b a9       	ldd	r24, Y+51	; 0x33
    33c6:	9c a9       	ldd	r25, Y+52	; 0x34
    33c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33cc:	dc 01       	movw	r26, r24
    33ce:	cb 01       	movw	r24, r22
    33d0:	98 ab       	std	Y+48, r25	; 0x30
    33d2:	8f a7       	std	Y+47, r24	; 0x2f
    33d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    33d6:	98 a9       	ldd	r25, Y+48	; 0x30
    33d8:	9c a7       	std	Y+44, r25	; 0x2c
    33da:	8b a7       	std	Y+43, r24	; 0x2b
    33dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    33de:	9c a5       	ldd	r25, Y+44	; 0x2c
    33e0:	01 97       	sbiw	r24, 0x01	; 1
    33e2:	f1 f7       	brne	.-4      	; 0x33e0 <LCD_8_BitvidInit+0x116>
    33e4:	9c a7       	std	Y+44, r25	; 0x2c
    33e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(40);
	LCD_8_BitvidsendCommand(LCD_8_BIT_FUNCTION_SET_CMD);
    33e8:	88 e3       	ldi	r24, 0x38	; 56
    33ea:	0e 94 5f 1b 	call	0x36be	; 0x36be <LCD_8_BitvidsendCommand>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	90 e0       	ldi	r25, 0x00	; 0
    33f2:	a0 e8       	ldi	r26, 0x80	; 128
    33f4:	bf e3       	ldi	r27, 0x3F	; 63
    33f6:	8f a3       	std	Y+39, r24	; 0x27
    33f8:	98 a7       	std	Y+40, r25	; 0x28
    33fa:	a9 a7       	std	Y+41, r26	; 0x29
    33fc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    33fe:	6f a1       	ldd	r22, Y+39	; 0x27
    3400:	78 a5       	ldd	r23, Y+40	; 0x28
    3402:	89 a5       	ldd	r24, Y+41	; 0x29
    3404:	9a a5       	ldd	r25, Y+42	; 0x2a
    3406:	20 e0       	ldi	r18, 0x00	; 0
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	4a ef       	ldi	r20, 0xFA	; 250
    340c:	54 e4       	ldi	r21, 0x44	; 68
    340e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3412:	dc 01       	movw	r26, r24
    3414:	cb 01       	movw	r24, r22
    3416:	8b a3       	std	Y+35, r24	; 0x23
    3418:	9c a3       	std	Y+36, r25	; 0x24
    341a:	ad a3       	std	Y+37, r26	; 0x25
    341c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    341e:	6b a1       	ldd	r22, Y+35	; 0x23
    3420:	7c a1       	ldd	r23, Y+36	; 0x24
    3422:	8d a1       	ldd	r24, Y+37	; 0x25
    3424:	9e a1       	ldd	r25, Y+38	; 0x26
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e8       	ldi	r20, 0x80	; 128
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3432:	88 23       	and	r24, r24
    3434:	2c f4       	brge	.+10     	; 0x3440 <LCD_8_BitvidInit+0x176>
		__ticks = 1;
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	90 e0       	ldi	r25, 0x00	; 0
    343a:	9a a3       	std	Y+34, r25	; 0x22
    343c:	89 a3       	std	Y+33, r24	; 0x21
    343e:	3f c0       	rjmp	.+126    	; 0x34be <LCD_8_BitvidInit+0x1f4>
	else if (__tmp > 65535)
    3440:	6b a1       	ldd	r22, Y+35	; 0x23
    3442:	7c a1       	ldd	r23, Y+36	; 0x24
    3444:	8d a1       	ldd	r24, Y+37	; 0x25
    3446:	9e a1       	ldd	r25, Y+38	; 0x26
    3448:	20 e0       	ldi	r18, 0x00	; 0
    344a:	3f ef       	ldi	r19, 0xFF	; 255
    344c:	4f e7       	ldi	r20, 0x7F	; 127
    344e:	57 e4       	ldi	r21, 0x47	; 71
    3450:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3454:	18 16       	cp	r1, r24
    3456:	4c f5       	brge	.+82     	; 0x34aa <LCD_8_BitvidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3458:	6f a1       	ldd	r22, Y+39	; 0x27
    345a:	78 a5       	ldd	r23, Y+40	; 0x28
    345c:	89 a5       	ldd	r24, Y+41	; 0x29
    345e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3460:	20 e0       	ldi	r18, 0x00	; 0
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	40 e2       	ldi	r20, 0x20	; 32
    3466:	51 e4       	ldi	r21, 0x41	; 65
    3468:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    346c:	dc 01       	movw	r26, r24
    346e:	cb 01       	movw	r24, r22
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9a a3       	std	Y+34, r25	; 0x22
    347e:	89 a3       	std	Y+33, r24	; 0x21
    3480:	0f c0       	rjmp	.+30     	; 0x34a0 <LCD_8_BitvidInit+0x1d6>
    3482:	88 ec       	ldi	r24, 0xC8	; 200
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	98 a3       	std	Y+32, r25	; 0x20
    3488:	8f 8f       	std	Y+31, r24	; 0x1f
    348a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    348c:	98 a1       	ldd	r25, Y+32	; 0x20
    348e:	01 97       	sbiw	r24, 0x01	; 1
    3490:	f1 f7       	brne	.-4      	; 0x348e <LCD_8_BitvidInit+0x1c4>
    3492:	98 a3       	std	Y+32, r25	; 0x20
    3494:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3496:	89 a1       	ldd	r24, Y+33	; 0x21
    3498:	9a a1       	ldd	r25, Y+34	; 0x22
    349a:	01 97       	sbiw	r24, 0x01	; 1
    349c:	9a a3       	std	Y+34, r25	; 0x22
    349e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a0:	89 a1       	ldd	r24, Y+33	; 0x21
    34a2:	9a a1       	ldd	r25, Y+34	; 0x22
    34a4:	00 97       	sbiw	r24, 0x00	; 0
    34a6:	69 f7       	brne	.-38     	; 0x3482 <LCD_8_BitvidInit+0x1b8>
    34a8:	14 c0       	rjmp	.+40     	; 0x34d2 <LCD_8_BitvidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34aa:	6b a1       	ldd	r22, Y+35	; 0x23
    34ac:	7c a1       	ldd	r23, Y+36	; 0x24
    34ae:	8d a1       	ldd	r24, Y+37	; 0x25
    34b0:	9e a1       	ldd	r25, Y+38	; 0x26
    34b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b6:	dc 01       	movw	r26, r24
    34b8:	cb 01       	movw	r24, r22
    34ba:	9a a3       	std	Y+34, r25	; 0x22
    34bc:	89 a3       	std	Y+33, r24	; 0x21
    34be:	89 a1       	ldd	r24, Y+33	; 0x21
    34c0:	9a a1       	ldd	r25, Y+34	; 0x22
    34c2:	9e 8f       	std	Y+30, r25	; 0x1e
    34c4:	8d 8f       	std	Y+29, r24	; 0x1d
    34c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    34c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    34ca:	01 97       	sbiw	r24, 0x01	; 1
    34cc:	f1 f7       	brne	.-4      	; 0x34ca <LCD_8_BitvidInit+0x200>
    34ce:	9e 8f       	std	Y+30, r25	; 0x1e
    34d0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_ON_CMD);
    34d2:	8c e0       	ldi	r24, 0x0C	; 12
    34d4:	0e 94 5f 1b 	call	0x36be	; 0x36be <LCD_8_BitvidsendCommand>
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	90 e0       	ldi	r25, 0x00	; 0
    34dc:	a0 e8       	ldi	r26, 0x80	; 128
    34de:	bf e3       	ldi	r27, 0x3F	; 63
    34e0:	89 8f       	std	Y+25, r24	; 0x19
    34e2:	9a 8f       	std	Y+26, r25	; 0x1a
    34e4:	ab 8f       	std	Y+27, r26	; 0x1b
    34e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34e8:	69 8d       	ldd	r22, Y+25	; 0x19
    34ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	4a ef       	ldi	r20, 0xFA	; 250
    34f6:	54 e4       	ldi	r21, 0x44	; 68
    34f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34fc:	dc 01       	movw	r26, r24
    34fe:	cb 01       	movw	r24, r22
    3500:	8d 8b       	std	Y+21, r24	; 0x15
    3502:	9e 8b       	std	Y+22, r25	; 0x16
    3504:	af 8b       	std	Y+23, r26	; 0x17
    3506:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3508:	6d 89       	ldd	r22, Y+21	; 0x15
    350a:	7e 89       	ldd	r23, Y+22	; 0x16
    350c:	8f 89       	ldd	r24, Y+23	; 0x17
    350e:	98 8d       	ldd	r25, Y+24	; 0x18
    3510:	20 e0       	ldi	r18, 0x00	; 0
    3512:	30 e0       	ldi	r19, 0x00	; 0
    3514:	40 e8       	ldi	r20, 0x80	; 128
    3516:	5f e3       	ldi	r21, 0x3F	; 63
    3518:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    351c:	88 23       	and	r24, r24
    351e:	2c f4       	brge	.+10     	; 0x352a <LCD_8_BitvidInit+0x260>
		__ticks = 1;
    3520:	81 e0       	ldi	r24, 0x01	; 1
    3522:	90 e0       	ldi	r25, 0x00	; 0
    3524:	9c 8b       	std	Y+20, r25	; 0x14
    3526:	8b 8b       	std	Y+19, r24	; 0x13
    3528:	3f c0       	rjmp	.+126    	; 0x35a8 <LCD_8_BitvidInit+0x2de>
	else if (__tmp > 65535)
    352a:	6d 89       	ldd	r22, Y+21	; 0x15
    352c:	7e 89       	ldd	r23, Y+22	; 0x16
    352e:	8f 89       	ldd	r24, Y+23	; 0x17
    3530:	98 8d       	ldd	r25, Y+24	; 0x18
    3532:	20 e0       	ldi	r18, 0x00	; 0
    3534:	3f ef       	ldi	r19, 0xFF	; 255
    3536:	4f e7       	ldi	r20, 0x7F	; 127
    3538:	57 e4       	ldi	r21, 0x47	; 71
    353a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    353e:	18 16       	cp	r1, r24
    3540:	4c f5       	brge	.+82     	; 0x3594 <LCD_8_BitvidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3542:	69 8d       	ldd	r22, Y+25	; 0x19
    3544:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3546:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3548:	9c 8d       	ldd	r25, Y+28	; 0x1c
    354a:	20 e0       	ldi	r18, 0x00	; 0
    354c:	30 e0       	ldi	r19, 0x00	; 0
    354e:	40 e2       	ldi	r20, 0x20	; 32
    3550:	51 e4       	ldi	r21, 0x41	; 65
    3552:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3556:	dc 01       	movw	r26, r24
    3558:	cb 01       	movw	r24, r22
    355a:	bc 01       	movw	r22, r24
    355c:	cd 01       	movw	r24, r26
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	9c 8b       	std	Y+20, r25	; 0x14
    3568:	8b 8b       	std	Y+19, r24	; 0x13
    356a:	0f c0       	rjmp	.+30     	; 0x358a <LCD_8_BitvidInit+0x2c0>
    356c:	88 ec       	ldi	r24, 0xC8	; 200
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	9a 8b       	std	Y+18, r25	; 0x12
    3572:	89 8b       	std	Y+17, r24	; 0x11
    3574:	89 89       	ldd	r24, Y+17	; 0x11
    3576:	9a 89       	ldd	r25, Y+18	; 0x12
    3578:	01 97       	sbiw	r24, 0x01	; 1
    357a:	f1 f7       	brne	.-4      	; 0x3578 <LCD_8_BitvidInit+0x2ae>
    357c:	9a 8b       	std	Y+18, r25	; 0x12
    357e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3580:	8b 89       	ldd	r24, Y+19	; 0x13
    3582:	9c 89       	ldd	r25, Y+20	; 0x14
    3584:	01 97       	sbiw	r24, 0x01	; 1
    3586:	9c 8b       	std	Y+20, r25	; 0x14
    3588:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    358a:	8b 89       	ldd	r24, Y+19	; 0x13
    358c:	9c 89       	ldd	r25, Y+20	; 0x14
    358e:	00 97       	sbiw	r24, 0x00	; 0
    3590:	69 f7       	brne	.-38     	; 0x356c <LCD_8_BitvidInit+0x2a2>
    3592:	14 c0       	rjmp	.+40     	; 0x35bc <LCD_8_BitvidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3594:	6d 89       	ldd	r22, Y+21	; 0x15
    3596:	7e 89       	ldd	r23, Y+22	; 0x16
    3598:	8f 89       	ldd	r24, Y+23	; 0x17
    359a:	98 8d       	ldd	r25, Y+24	; 0x18
    359c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a0:	dc 01       	movw	r26, r24
    35a2:	cb 01       	movw	r24, r22
    35a4:	9c 8b       	std	Y+20, r25	; 0x14
    35a6:	8b 8b       	std	Y+19, r24	; 0x13
    35a8:	8b 89       	ldd	r24, Y+19	; 0x13
    35aa:	9c 89       	ldd	r25, Y+20	; 0x14
    35ac:	98 8b       	std	Y+16, r25	; 0x10
    35ae:	8f 87       	std	Y+15, r24	; 0x0f
    35b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    35b2:	98 89       	ldd	r25, Y+16	; 0x10
    35b4:	01 97       	sbiw	r24, 0x01	; 1
    35b6:	f1 f7       	brne	.-4      	; 0x35b4 <LCD_8_BitvidInit+0x2ea>
    35b8:	98 8b       	std	Y+16, r25	; 0x10
    35ba:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_8_BitvidsendCommand(LCD_8_BIT_DISPLAY_CLEAR_CMD);
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	0e 94 5f 1b 	call	0x36be	; 0x36be <LCD_8_BitvidsendCommand>
    35c2:	80 e0       	ldi	r24, 0x00	; 0
    35c4:	90 e0       	ldi	r25, 0x00	; 0
    35c6:	a0 e0       	ldi	r26, 0x00	; 0
    35c8:	b0 e4       	ldi	r27, 0x40	; 64
    35ca:	8b 87       	std	Y+11, r24	; 0x0b
    35cc:	9c 87       	std	Y+12, r25	; 0x0c
    35ce:	ad 87       	std	Y+13, r26	; 0x0d
    35d0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    35d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    35d6:	8d 85       	ldd	r24, Y+13	; 0x0d
    35d8:	9e 85       	ldd	r25, Y+14	; 0x0e
    35da:	20 e0       	ldi	r18, 0x00	; 0
    35dc:	30 e0       	ldi	r19, 0x00	; 0
    35de:	4a ef       	ldi	r20, 0xFA	; 250
    35e0:	54 e4       	ldi	r21, 0x44	; 68
    35e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e6:	dc 01       	movw	r26, r24
    35e8:	cb 01       	movw	r24, r22
    35ea:	8f 83       	std	Y+7, r24	; 0x07
    35ec:	98 87       	std	Y+8, r25	; 0x08
    35ee:	a9 87       	std	Y+9, r26	; 0x09
    35f0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    35f2:	6f 81       	ldd	r22, Y+7	; 0x07
    35f4:	78 85       	ldd	r23, Y+8	; 0x08
    35f6:	89 85       	ldd	r24, Y+9	; 0x09
    35f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    35fa:	20 e0       	ldi	r18, 0x00	; 0
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	40 e8       	ldi	r20, 0x80	; 128
    3600:	5f e3       	ldi	r21, 0x3F	; 63
    3602:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3606:	88 23       	and	r24, r24
    3608:	2c f4       	brge	.+10     	; 0x3614 <LCD_8_BitvidInit+0x34a>
		__ticks = 1;
    360a:	81 e0       	ldi	r24, 0x01	; 1
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	9e 83       	std	Y+6, r25	; 0x06
    3610:	8d 83       	std	Y+5, r24	; 0x05
    3612:	3f c0       	rjmp	.+126    	; 0x3692 <LCD_8_BitvidInit+0x3c8>
	else if (__tmp > 65535)
    3614:	6f 81       	ldd	r22, Y+7	; 0x07
    3616:	78 85       	ldd	r23, Y+8	; 0x08
    3618:	89 85       	ldd	r24, Y+9	; 0x09
    361a:	9a 85       	ldd	r25, Y+10	; 0x0a
    361c:	20 e0       	ldi	r18, 0x00	; 0
    361e:	3f ef       	ldi	r19, 0xFF	; 255
    3620:	4f e7       	ldi	r20, 0x7F	; 127
    3622:	57 e4       	ldi	r21, 0x47	; 71
    3624:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3628:	18 16       	cp	r1, r24
    362a:	4c f5       	brge	.+82     	; 0x367e <LCD_8_BitvidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    362c:	6b 85       	ldd	r22, Y+11	; 0x0b
    362e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3630:	8d 85       	ldd	r24, Y+13	; 0x0d
    3632:	9e 85       	ldd	r25, Y+14	; 0x0e
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	40 e2       	ldi	r20, 0x20	; 32
    363a:	51 e4       	ldi	r21, 0x41	; 65
    363c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3640:	dc 01       	movw	r26, r24
    3642:	cb 01       	movw	r24, r22
    3644:	bc 01       	movw	r22, r24
    3646:	cd 01       	movw	r24, r26
    3648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    364c:	dc 01       	movw	r26, r24
    364e:	cb 01       	movw	r24, r22
    3650:	9e 83       	std	Y+6, r25	; 0x06
    3652:	8d 83       	std	Y+5, r24	; 0x05
    3654:	0f c0       	rjmp	.+30     	; 0x3674 <LCD_8_BitvidInit+0x3aa>
    3656:	88 ec       	ldi	r24, 0xC8	; 200
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	9c 83       	std	Y+4, r25	; 0x04
    365c:	8b 83       	std	Y+3, r24	; 0x03
    365e:	8b 81       	ldd	r24, Y+3	; 0x03
    3660:	9c 81       	ldd	r25, Y+4	; 0x04
    3662:	01 97       	sbiw	r24, 0x01	; 1
    3664:	f1 f7       	brne	.-4      	; 0x3662 <LCD_8_BitvidInit+0x398>
    3666:	9c 83       	std	Y+4, r25	; 0x04
    3668:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    366a:	8d 81       	ldd	r24, Y+5	; 0x05
    366c:	9e 81       	ldd	r25, Y+6	; 0x06
    366e:	01 97       	sbiw	r24, 0x01	; 1
    3670:	9e 83       	std	Y+6, r25	; 0x06
    3672:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3674:	8d 81       	ldd	r24, Y+5	; 0x05
    3676:	9e 81       	ldd	r25, Y+6	; 0x06
    3678:	00 97       	sbiw	r24, 0x00	; 0
    367a:	69 f7       	brne	.-38     	; 0x3656 <LCD_8_BitvidInit+0x38c>
    367c:	14 c0       	rjmp	.+40     	; 0x36a6 <LCD_8_BitvidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    367e:	6f 81       	ldd	r22, Y+7	; 0x07
    3680:	78 85       	ldd	r23, Y+8	; 0x08
    3682:	89 85       	ldd	r24, Y+9	; 0x09
    3684:	9a 85       	ldd	r25, Y+10	; 0x0a
    3686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    368a:	dc 01       	movw	r26, r24
    368c:	cb 01       	movw	r24, r22
    368e:	9e 83       	std	Y+6, r25	; 0x06
    3690:	8d 83       	std	Y+5, r24	; 0x05
    3692:	8d 81       	ldd	r24, Y+5	; 0x05
    3694:	9e 81       	ldd	r25, Y+6	; 0x06
    3696:	9a 83       	std	Y+2, r25	; 0x02
    3698:	89 83       	std	Y+1, r24	; 0x01
    369a:	89 81       	ldd	r24, Y+1	; 0x01
    369c:	9a 81       	ldd	r25, Y+2	; 0x02
    369e:	01 97       	sbiw	r24, 0x01	; 1
    36a0:	f1 f7       	brne	.-4      	; 0x369e <LCD_8_BitvidInit+0x3d4>
    36a2:	9a 83       	std	Y+2, r25	; 0x02
    36a4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_8_BitvidsendCommand(LCD_8_BIT_ENTRY_MODE_SET_CMD);
    36a6:	86 e0       	ldi	r24, 0x06	; 6
    36a8:	0e 94 5f 1b 	call	0x36be	; 0x36be <LCD_8_BitvidsendCommand>

}
    36ac:	e8 96       	adiw	r28, 0x38	; 56
    36ae:	0f b6       	in	r0, 0x3f	; 63
    36b0:	f8 94       	cli
    36b2:	de bf       	out	0x3e, r29	; 62
    36b4:	0f be       	out	0x3f, r0	; 63
    36b6:	cd bf       	out	0x3d, r28	; 61
    36b8:	cf 91       	pop	r28
    36ba:	df 91       	pop	r29
    36bc:	08 95       	ret

000036be <LCD_8_BitvidsendCommand>:
void LCD_8_BitvidsendCommand(u8 Copy_u8command)
{
    36be:	df 93       	push	r29
    36c0:	cf 93       	push	r28
    36c2:	cd b7       	in	r28, 0x3d	; 61
    36c4:	de b7       	in	r29, 0x3e	; 62
    36c6:	6d 97       	sbiw	r28, 0x1d	; 29
    36c8:	0f b6       	in	r0, 0x3f	; 63
    36ca:	f8 94       	cli
    36cc:	de bf       	out	0x3e, r29	; 62
    36ce:	0f be       	out	0x3f, r0	; 63
    36d0:	cd bf       	out	0x3d, r28	; 61
    36d2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, LOW);
    36d4:	83 e0       	ldi	r24, 0x03	; 3
    36d6:	62 e0       	ldi	r22, 0x02	; 2
    36d8:	40 e0       	ldi	r20, 0x00	; 0
    36da:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    36de:	83 e0       	ldi	r24, 0x03	; 3
    36e0:	61 e0       	ldi	r22, 0x01	; 1
    36e2:	40 e0       	ldi	r20, 0x00	; 0
    36e4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8command);
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	6d 8d       	ldd	r22, Y+29	; 0x1d
    36ec:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    36f0:	83 e0       	ldi	r24, 0x03	; 3
    36f2:	60 e0       	ldi	r22, 0x00	; 0
    36f4:	41 e0       	ldi	r20, 0x01	; 1
    36f6:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    36fa:	80 e0       	ldi	r24, 0x00	; 0
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	a0 e0       	ldi	r26, 0x00	; 0
    3700:	b0 e4       	ldi	r27, 0x40	; 64
    3702:	89 8f       	std	Y+25, r24	; 0x19
    3704:	9a 8f       	std	Y+26, r25	; 0x1a
    3706:	ab 8f       	std	Y+27, r26	; 0x1b
    3708:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    370a:	69 8d       	ldd	r22, Y+25	; 0x19
    370c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    370e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3710:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3712:	20 e0       	ldi	r18, 0x00	; 0
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	4a ef       	ldi	r20, 0xFA	; 250
    3718:	54 e4       	ldi	r21, 0x44	; 68
    371a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    371e:	dc 01       	movw	r26, r24
    3720:	cb 01       	movw	r24, r22
    3722:	8d 8b       	std	Y+21, r24	; 0x15
    3724:	9e 8b       	std	Y+22, r25	; 0x16
    3726:	af 8b       	std	Y+23, r26	; 0x17
    3728:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    372a:	6d 89       	ldd	r22, Y+21	; 0x15
    372c:	7e 89       	ldd	r23, Y+22	; 0x16
    372e:	8f 89       	ldd	r24, Y+23	; 0x17
    3730:	98 8d       	ldd	r25, Y+24	; 0x18
    3732:	20 e0       	ldi	r18, 0x00	; 0
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	40 e8       	ldi	r20, 0x80	; 128
    3738:	5f e3       	ldi	r21, 0x3F	; 63
    373a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    373e:	88 23       	and	r24, r24
    3740:	2c f4       	brge	.+10     	; 0x374c <LCD_8_BitvidsendCommand+0x8e>
		__ticks = 1;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	9c 8b       	std	Y+20, r25	; 0x14
    3748:	8b 8b       	std	Y+19, r24	; 0x13
    374a:	3f c0       	rjmp	.+126    	; 0x37ca <LCD_8_BitvidsendCommand+0x10c>
	else if (__tmp > 65535)
    374c:	6d 89       	ldd	r22, Y+21	; 0x15
    374e:	7e 89       	ldd	r23, Y+22	; 0x16
    3750:	8f 89       	ldd	r24, Y+23	; 0x17
    3752:	98 8d       	ldd	r25, Y+24	; 0x18
    3754:	20 e0       	ldi	r18, 0x00	; 0
    3756:	3f ef       	ldi	r19, 0xFF	; 255
    3758:	4f e7       	ldi	r20, 0x7F	; 127
    375a:	57 e4       	ldi	r21, 0x47	; 71
    375c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3760:	18 16       	cp	r1, r24
    3762:	4c f5       	brge	.+82     	; 0x37b6 <LCD_8_BitvidsendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3764:	69 8d       	ldd	r22, Y+25	; 0x19
    3766:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3768:	8b 8d       	ldd	r24, Y+27	; 0x1b
    376a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    376c:	20 e0       	ldi	r18, 0x00	; 0
    376e:	30 e0       	ldi	r19, 0x00	; 0
    3770:	40 e2       	ldi	r20, 0x20	; 32
    3772:	51 e4       	ldi	r21, 0x41	; 65
    3774:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3778:	dc 01       	movw	r26, r24
    377a:	cb 01       	movw	r24, r22
    377c:	bc 01       	movw	r22, r24
    377e:	cd 01       	movw	r24, r26
    3780:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3784:	dc 01       	movw	r26, r24
    3786:	cb 01       	movw	r24, r22
    3788:	9c 8b       	std	Y+20, r25	; 0x14
    378a:	8b 8b       	std	Y+19, r24	; 0x13
    378c:	0f c0       	rjmp	.+30     	; 0x37ac <LCD_8_BitvidsendCommand+0xee>
    378e:	88 ec       	ldi	r24, 0xC8	; 200
    3790:	90 e0       	ldi	r25, 0x00	; 0
    3792:	9a 8b       	std	Y+18, r25	; 0x12
    3794:	89 8b       	std	Y+17, r24	; 0x11
    3796:	89 89       	ldd	r24, Y+17	; 0x11
    3798:	9a 89       	ldd	r25, Y+18	; 0x12
    379a:	01 97       	sbiw	r24, 0x01	; 1
    379c:	f1 f7       	brne	.-4      	; 0x379a <LCD_8_BitvidsendCommand+0xdc>
    379e:	9a 8b       	std	Y+18, r25	; 0x12
    37a0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37a2:	8b 89       	ldd	r24, Y+19	; 0x13
    37a4:	9c 89       	ldd	r25, Y+20	; 0x14
    37a6:	01 97       	sbiw	r24, 0x01	; 1
    37a8:	9c 8b       	std	Y+20, r25	; 0x14
    37aa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37ac:	8b 89       	ldd	r24, Y+19	; 0x13
    37ae:	9c 89       	ldd	r25, Y+20	; 0x14
    37b0:	00 97       	sbiw	r24, 0x00	; 0
    37b2:	69 f7       	brne	.-38     	; 0x378e <LCD_8_BitvidsendCommand+0xd0>
    37b4:	14 c0       	rjmp	.+40     	; 0x37de <LCD_8_BitvidsendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    37b6:	6d 89       	ldd	r22, Y+21	; 0x15
    37b8:	7e 89       	ldd	r23, Y+22	; 0x16
    37ba:	8f 89       	ldd	r24, Y+23	; 0x17
    37bc:	98 8d       	ldd	r25, Y+24	; 0x18
    37be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37c2:	dc 01       	movw	r26, r24
    37c4:	cb 01       	movw	r24, r22
    37c6:	9c 8b       	std	Y+20, r25	; 0x14
    37c8:	8b 8b       	std	Y+19, r24	; 0x13
    37ca:	8b 89       	ldd	r24, Y+19	; 0x13
    37cc:	9c 89       	ldd	r25, Y+20	; 0x14
    37ce:	98 8b       	std	Y+16, r25	; 0x10
    37d0:	8f 87       	std	Y+15, r24	; 0x0f
    37d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    37d4:	98 89       	ldd	r25, Y+16	; 0x10
    37d6:	01 97       	sbiw	r24, 0x01	; 1
    37d8:	f1 f7       	brne	.-4      	; 0x37d6 <LCD_8_BitvidsendCommand+0x118>
    37da:	98 8b       	std	Y+16, r25	; 0x10
    37dc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    37de:	83 e0       	ldi	r24, 0x03	; 3
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	90 e0       	ldi	r25, 0x00	; 0
    37ec:	a0 e0       	ldi	r26, 0x00	; 0
    37ee:	b0 e4       	ldi	r27, 0x40	; 64
    37f0:	8b 87       	std	Y+11, r24	; 0x0b
    37f2:	9c 87       	std	Y+12, r25	; 0x0c
    37f4:	ad 87       	std	Y+13, r26	; 0x0d
    37f6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    37fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    37fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    37fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    3800:	20 e0       	ldi	r18, 0x00	; 0
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	4a ef       	ldi	r20, 0xFA	; 250
    3806:	54 e4       	ldi	r21, 0x44	; 68
    3808:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    380c:	dc 01       	movw	r26, r24
    380e:	cb 01       	movw	r24, r22
    3810:	8f 83       	std	Y+7, r24	; 0x07
    3812:	98 87       	std	Y+8, r25	; 0x08
    3814:	a9 87       	std	Y+9, r26	; 0x09
    3816:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3818:	6f 81       	ldd	r22, Y+7	; 0x07
    381a:	78 85       	ldd	r23, Y+8	; 0x08
    381c:	89 85       	ldd	r24, Y+9	; 0x09
    381e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3820:	20 e0       	ldi	r18, 0x00	; 0
    3822:	30 e0       	ldi	r19, 0x00	; 0
    3824:	40 e8       	ldi	r20, 0x80	; 128
    3826:	5f e3       	ldi	r21, 0x3F	; 63
    3828:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    382c:	88 23       	and	r24, r24
    382e:	2c f4       	brge	.+10     	; 0x383a <LCD_8_BitvidsendCommand+0x17c>
		__ticks = 1;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	9e 83       	std	Y+6, r25	; 0x06
    3836:	8d 83       	std	Y+5, r24	; 0x05
    3838:	3f c0       	rjmp	.+126    	; 0x38b8 <LCD_8_BitvidsendCommand+0x1fa>
	else if (__tmp > 65535)
    383a:	6f 81       	ldd	r22, Y+7	; 0x07
    383c:	78 85       	ldd	r23, Y+8	; 0x08
    383e:	89 85       	ldd	r24, Y+9	; 0x09
    3840:	9a 85       	ldd	r25, Y+10	; 0x0a
    3842:	20 e0       	ldi	r18, 0x00	; 0
    3844:	3f ef       	ldi	r19, 0xFF	; 255
    3846:	4f e7       	ldi	r20, 0x7F	; 127
    3848:	57 e4       	ldi	r21, 0x47	; 71
    384a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    384e:	18 16       	cp	r1, r24
    3850:	4c f5       	brge	.+82     	; 0x38a4 <LCD_8_BitvidsendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3852:	6b 85       	ldd	r22, Y+11	; 0x0b
    3854:	7c 85       	ldd	r23, Y+12	; 0x0c
    3856:	8d 85       	ldd	r24, Y+13	; 0x0d
    3858:	9e 85       	ldd	r25, Y+14	; 0x0e
    385a:	20 e0       	ldi	r18, 0x00	; 0
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	40 e2       	ldi	r20, 0x20	; 32
    3860:	51 e4       	ldi	r21, 0x41	; 65
    3862:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3866:	dc 01       	movw	r26, r24
    3868:	cb 01       	movw	r24, r22
    386a:	bc 01       	movw	r22, r24
    386c:	cd 01       	movw	r24, r26
    386e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3872:	dc 01       	movw	r26, r24
    3874:	cb 01       	movw	r24, r22
    3876:	9e 83       	std	Y+6, r25	; 0x06
    3878:	8d 83       	std	Y+5, r24	; 0x05
    387a:	0f c0       	rjmp	.+30     	; 0x389a <LCD_8_BitvidsendCommand+0x1dc>
    387c:	88 ec       	ldi	r24, 0xC8	; 200
    387e:	90 e0       	ldi	r25, 0x00	; 0
    3880:	9c 83       	std	Y+4, r25	; 0x04
    3882:	8b 83       	std	Y+3, r24	; 0x03
    3884:	8b 81       	ldd	r24, Y+3	; 0x03
    3886:	9c 81       	ldd	r25, Y+4	; 0x04
    3888:	01 97       	sbiw	r24, 0x01	; 1
    388a:	f1 f7       	brne	.-4      	; 0x3888 <LCD_8_BitvidsendCommand+0x1ca>
    388c:	9c 83       	std	Y+4, r25	; 0x04
    388e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3890:	8d 81       	ldd	r24, Y+5	; 0x05
    3892:	9e 81       	ldd	r25, Y+6	; 0x06
    3894:	01 97       	sbiw	r24, 0x01	; 1
    3896:	9e 83       	std	Y+6, r25	; 0x06
    3898:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    389a:	8d 81       	ldd	r24, Y+5	; 0x05
    389c:	9e 81       	ldd	r25, Y+6	; 0x06
    389e:	00 97       	sbiw	r24, 0x00	; 0
    38a0:	69 f7       	brne	.-38     	; 0x387c <LCD_8_BitvidsendCommand+0x1be>
    38a2:	14 c0       	rjmp	.+40     	; 0x38cc <LCD_8_BitvidsendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38a4:	6f 81       	ldd	r22, Y+7	; 0x07
    38a6:	78 85       	ldd	r23, Y+8	; 0x08
    38a8:	89 85       	ldd	r24, Y+9	; 0x09
    38aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    38ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38b0:	dc 01       	movw	r26, r24
    38b2:	cb 01       	movw	r24, r22
    38b4:	9e 83       	std	Y+6, r25	; 0x06
    38b6:	8d 83       	std	Y+5, r24	; 0x05
    38b8:	8d 81       	ldd	r24, Y+5	; 0x05
    38ba:	9e 81       	ldd	r25, Y+6	; 0x06
    38bc:	9a 83       	std	Y+2, r25	; 0x02
    38be:	89 83       	std	Y+1, r24	; 0x01
    38c0:	89 81       	ldd	r24, Y+1	; 0x01
    38c2:	9a 81       	ldd	r25, Y+2	; 0x02
    38c4:	01 97       	sbiw	r24, 0x01	; 1
    38c6:	f1 f7       	brne	.-4      	; 0x38c4 <LCD_8_BitvidsendCommand+0x206>
    38c8:	9a 83       	std	Y+2, r25	; 0x02
    38ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    38cc:	6d 96       	adiw	r28, 0x1d	; 29
    38ce:	0f b6       	in	r0, 0x3f	; 63
    38d0:	f8 94       	cli
    38d2:	de bf       	out	0x3e, r29	; 62
    38d4:	0f be       	out	0x3f, r0	; 63
    38d6:	cd bf       	out	0x3d, r28	; 61
    38d8:	cf 91       	pop	r28
    38da:	df 91       	pop	r29
    38dc:	08 95       	ret

000038de <LCD_8_BitvidwriteCharacter>:
void LCD_8_BitvidwriteCharacter(u8 Copy_u8character)
{
    38de:	df 93       	push	r29
    38e0:	cf 93       	push	r28
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	6d 97       	sbiw	r28, 0x1d	; 29
    38e8:	0f b6       	in	r0, 0x3f	; 63
    38ea:	f8 94       	cli
    38ec:	de bf       	out	0x3e, r29	; 62
    38ee:	0f be       	out	0x3f, r0	; 63
    38f0:	cd bf       	out	0x3d, r28	; 61
    38f2:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    38f4:	83 e0       	ldi	r24, 0x03	; 3
    38f6:	62 e0       	ldi	r22, 0x02	; 2
    38f8:	41 e0       	ldi	r20, 0x01	; 1
    38fa:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, LOW);
    38fe:	83 e0       	ldi	r24, 0x03	; 3
    3900:	61 e0       	ldi	r22, 0x01	; 1
    3902:	40 e0       	ldi	r20, 0x00	; 0
    3904:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    390c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3910:	83 e0       	ldi	r24, 0x03	; 3
    3912:	60 e0       	ldi	r22, 0x00	; 0
    3914:	41 e0       	ldi	r20, 0x01	; 1
    3916:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    391a:	80 e0       	ldi	r24, 0x00	; 0
    391c:	90 e0       	ldi	r25, 0x00	; 0
    391e:	a0 e0       	ldi	r26, 0x00	; 0
    3920:	b0 e4       	ldi	r27, 0x40	; 64
    3922:	89 8f       	std	Y+25, r24	; 0x19
    3924:	9a 8f       	std	Y+26, r25	; 0x1a
    3926:	ab 8f       	std	Y+27, r26	; 0x1b
    3928:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    392a:	69 8d       	ldd	r22, Y+25	; 0x19
    392c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    392e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3930:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3932:	20 e0       	ldi	r18, 0x00	; 0
    3934:	30 e0       	ldi	r19, 0x00	; 0
    3936:	4a ef       	ldi	r20, 0xFA	; 250
    3938:	54 e4       	ldi	r21, 0x44	; 68
    393a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    393e:	dc 01       	movw	r26, r24
    3940:	cb 01       	movw	r24, r22
    3942:	8d 8b       	std	Y+21, r24	; 0x15
    3944:	9e 8b       	std	Y+22, r25	; 0x16
    3946:	af 8b       	std	Y+23, r26	; 0x17
    3948:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    394a:	6d 89       	ldd	r22, Y+21	; 0x15
    394c:	7e 89       	ldd	r23, Y+22	; 0x16
    394e:	8f 89       	ldd	r24, Y+23	; 0x17
    3950:	98 8d       	ldd	r25, Y+24	; 0x18
    3952:	20 e0       	ldi	r18, 0x00	; 0
    3954:	30 e0       	ldi	r19, 0x00	; 0
    3956:	40 e8       	ldi	r20, 0x80	; 128
    3958:	5f e3       	ldi	r21, 0x3F	; 63
    395a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    395e:	88 23       	and	r24, r24
    3960:	2c f4       	brge	.+10     	; 0x396c <LCD_8_BitvidwriteCharacter+0x8e>
		__ticks = 1;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9c 8b       	std	Y+20, r25	; 0x14
    3968:	8b 8b       	std	Y+19, r24	; 0x13
    396a:	3f c0       	rjmp	.+126    	; 0x39ea <LCD_8_BitvidwriteCharacter+0x10c>
	else if (__tmp > 65535)
    396c:	6d 89       	ldd	r22, Y+21	; 0x15
    396e:	7e 89       	ldd	r23, Y+22	; 0x16
    3970:	8f 89       	ldd	r24, Y+23	; 0x17
    3972:	98 8d       	ldd	r25, Y+24	; 0x18
    3974:	20 e0       	ldi	r18, 0x00	; 0
    3976:	3f ef       	ldi	r19, 0xFF	; 255
    3978:	4f e7       	ldi	r20, 0x7F	; 127
    397a:	57 e4       	ldi	r21, 0x47	; 71
    397c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3980:	18 16       	cp	r1, r24
    3982:	4c f5       	brge	.+82     	; 0x39d6 <LCD_8_BitvidwriteCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3984:	69 8d       	ldd	r22, Y+25	; 0x19
    3986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    398a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    398c:	20 e0       	ldi	r18, 0x00	; 0
    398e:	30 e0       	ldi	r19, 0x00	; 0
    3990:	40 e2       	ldi	r20, 0x20	; 32
    3992:	51 e4       	ldi	r21, 0x41	; 65
    3994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3998:	dc 01       	movw	r26, r24
    399a:	cb 01       	movw	r24, r22
    399c:	bc 01       	movw	r22, r24
    399e:	cd 01       	movw	r24, r26
    39a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39a4:	dc 01       	movw	r26, r24
    39a6:	cb 01       	movw	r24, r22
    39a8:	9c 8b       	std	Y+20, r25	; 0x14
    39aa:	8b 8b       	std	Y+19, r24	; 0x13
    39ac:	0f c0       	rjmp	.+30     	; 0x39cc <LCD_8_BitvidwriteCharacter+0xee>
    39ae:	88 ec       	ldi	r24, 0xC8	; 200
    39b0:	90 e0       	ldi	r25, 0x00	; 0
    39b2:	9a 8b       	std	Y+18, r25	; 0x12
    39b4:	89 8b       	std	Y+17, r24	; 0x11
    39b6:	89 89       	ldd	r24, Y+17	; 0x11
    39b8:	9a 89       	ldd	r25, Y+18	; 0x12
    39ba:	01 97       	sbiw	r24, 0x01	; 1
    39bc:	f1 f7       	brne	.-4      	; 0x39ba <LCD_8_BitvidwriteCharacter+0xdc>
    39be:	9a 8b       	std	Y+18, r25	; 0x12
    39c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39c2:	8b 89       	ldd	r24, Y+19	; 0x13
    39c4:	9c 89       	ldd	r25, Y+20	; 0x14
    39c6:	01 97       	sbiw	r24, 0x01	; 1
    39c8:	9c 8b       	std	Y+20, r25	; 0x14
    39ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39cc:	8b 89       	ldd	r24, Y+19	; 0x13
    39ce:	9c 89       	ldd	r25, Y+20	; 0x14
    39d0:	00 97       	sbiw	r24, 0x00	; 0
    39d2:	69 f7       	brne	.-38     	; 0x39ae <LCD_8_BitvidwriteCharacter+0xd0>
    39d4:	14 c0       	rjmp	.+40     	; 0x39fe <LCD_8_BitvidwriteCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39d6:	6d 89       	ldd	r22, Y+21	; 0x15
    39d8:	7e 89       	ldd	r23, Y+22	; 0x16
    39da:	8f 89       	ldd	r24, Y+23	; 0x17
    39dc:	98 8d       	ldd	r25, Y+24	; 0x18
    39de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39e2:	dc 01       	movw	r26, r24
    39e4:	cb 01       	movw	r24, r22
    39e6:	9c 8b       	std	Y+20, r25	; 0x14
    39e8:	8b 8b       	std	Y+19, r24	; 0x13
    39ea:	8b 89       	ldd	r24, Y+19	; 0x13
    39ec:	9c 89       	ldd	r25, Y+20	; 0x14
    39ee:	98 8b       	std	Y+16, r25	; 0x10
    39f0:	8f 87       	std	Y+15, r24	; 0x0f
    39f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39f4:	98 89       	ldd	r25, Y+16	; 0x10
    39f6:	01 97       	sbiw	r24, 0x01	; 1
    39f8:	f1 f7       	brne	.-4      	; 0x39f6 <LCD_8_BitvidwriteCharacter+0x118>
    39fa:	98 8b       	std	Y+16, r25	; 0x10
    39fc:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    39fe:	83 e0       	ldi	r24, 0x03	; 3
    3a00:	60 e0       	ldi	r22, 0x00	; 0
    3a02:	40 e0       	ldi	r20, 0x00	; 0
    3a04:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    3a08:	80 e0       	ldi	r24, 0x00	; 0
    3a0a:	90 e0       	ldi	r25, 0x00	; 0
    3a0c:	a0 e0       	ldi	r26, 0x00	; 0
    3a0e:	b0 e4       	ldi	r27, 0x40	; 64
    3a10:	8b 87       	std	Y+11, r24	; 0x0b
    3a12:	9c 87       	std	Y+12, r25	; 0x0c
    3a14:	ad 87       	std	Y+13, r26	; 0x0d
    3a16:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a20:	20 e0       	ldi	r18, 0x00	; 0
    3a22:	30 e0       	ldi	r19, 0x00	; 0
    3a24:	4a ef       	ldi	r20, 0xFA	; 250
    3a26:	54 e4       	ldi	r21, 0x44	; 68
    3a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a2c:	dc 01       	movw	r26, r24
    3a2e:	cb 01       	movw	r24, r22
    3a30:	8f 83       	std	Y+7, r24	; 0x07
    3a32:	98 87       	std	Y+8, r25	; 0x08
    3a34:	a9 87       	std	Y+9, r26	; 0x09
    3a36:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3a38:	6f 81       	ldd	r22, Y+7	; 0x07
    3a3a:	78 85       	ldd	r23, Y+8	; 0x08
    3a3c:	89 85       	ldd	r24, Y+9	; 0x09
    3a3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	40 e8       	ldi	r20, 0x80	; 128
    3a46:	5f e3       	ldi	r21, 0x3F	; 63
    3a48:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3a4c:	88 23       	and	r24, r24
    3a4e:	2c f4       	brge	.+10     	; 0x3a5a <LCD_8_BitvidwriteCharacter+0x17c>
		__ticks = 1;
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	90 e0       	ldi	r25, 0x00	; 0
    3a54:	9e 83       	std	Y+6, r25	; 0x06
    3a56:	8d 83       	std	Y+5, r24	; 0x05
    3a58:	3f c0       	rjmp	.+126    	; 0x3ad8 <LCD_8_BitvidwriteCharacter+0x1fa>
	else if (__tmp > 65535)
    3a5a:	6f 81       	ldd	r22, Y+7	; 0x07
    3a5c:	78 85       	ldd	r23, Y+8	; 0x08
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	20 e0       	ldi	r18, 0x00	; 0
    3a64:	3f ef       	ldi	r19, 0xFF	; 255
    3a66:	4f e7       	ldi	r20, 0x7F	; 127
    3a68:	57 e4       	ldi	r21, 0x47	; 71
    3a6a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3a6e:	18 16       	cp	r1, r24
    3a70:	4c f5       	brge	.+82     	; 0x3ac4 <LCD_8_BitvidwriteCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a72:	6b 85       	ldd	r22, Y+11	; 0x0b
    3a74:	7c 85       	ldd	r23, Y+12	; 0x0c
    3a76:	8d 85       	ldd	r24, Y+13	; 0x0d
    3a78:	9e 85       	ldd	r25, Y+14	; 0x0e
    3a7a:	20 e0       	ldi	r18, 0x00	; 0
    3a7c:	30 e0       	ldi	r19, 0x00	; 0
    3a7e:	40 e2       	ldi	r20, 0x20	; 32
    3a80:	51 e4       	ldi	r21, 0x41	; 65
    3a82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a86:	dc 01       	movw	r26, r24
    3a88:	cb 01       	movw	r24, r22
    3a8a:	bc 01       	movw	r22, r24
    3a8c:	cd 01       	movw	r24, r26
    3a8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	9e 83       	std	Y+6, r25	; 0x06
    3a98:	8d 83       	std	Y+5, r24	; 0x05
    3a9a:	0f c0       	rjmp	.+30     	; 0x3aba <LCD_8_BitvidwriteCharacter+0x1dc>
    3a9c:	88 ec       	ldi	r24, 0xC8	; 200
    3a9e:	90 e0       	ldi	r25, 0x00	; 0
    3aa0:	9c 83       	std	Y+4, r25	; 0x04
    3aa2:	8b 83       	std	Y+3, r24	; 0x03
    3aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    3aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    3aa8:	01 97       	sbiw	r24, 0x01	; 1
    3aaa:	f1 f7       	brne	.-4      	; 0x3aa8 <LCD_8_BitvidwriteCharacter+0x1ca>
    3aac:	9c 83       	std	Y+4, r25	; 0x04
    3aae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ab4:	01 97       	sbiw	r24, 0x01	; 1
    3ab6:	9e 83       	std	Y+6, r25	; 0x06
    3ab8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3aba:	8d 81       	ldd	r24, Y+5	; 0x05
    3abc:	9e 81       	ldd	r25, Y+6	; 0x06
    3abe:	00 97       	sbiw	r24, 0x00	; 0
    3ac0:	69 f7       	brne	.-38     	; 0x3a9c <LCD_8_BitvidwriteCharacter+0x1be>
    3ac2:	14 c0       	rjmp	.+40     	; 0x3aec <LCD_8_BitvidwriteCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ac4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ac6:	78 85       	ldd	r23, Y+8	; 0x08
    3ac8:	89 85       	ldd	r24, Y+9	; 0x09
    3aca:	9a 85       	ldd	r25, Y+10	; 0x0a
    3acc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ad0:	dc 01       	movw	r26, r24
    3ad2:	cb 01       	movw	r24, r22
    3ad4:	9e 83       	std	Y+6, r25	; 0x06
    3ad6:	8d 83       	std	Y+5, r24	; 0x05
    3ad8:	8d 81       	ldd	r24, Y+5	; 0x05
    3ada:	9e 81       	ldd	r25, Y+6	; 0x06
    3adc:	9a 83       	std	Y+2, r25	; 0x02
    3ade:	89 83       	std	Y+1, r24	; 0x01
    3ae0:	89 81       	ldd	r24, Y+1	; 0x01
    3ae2:	9a 81       	ldd	r25, Y+2	; 0x02
    3ae4:	01 97       	sbiw	r24, 0x01	; 1
    3ae6:	f1 f7       	brne	.-4      	; 0x3ae4 <LCD_8_BitvidwriteCharacter+0x206>
    3ae8:	9a 83       	std	Y+2, r25	; 0x02
    3aea:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3aec:	6d 96       	adiw	r28, 0x1d	; 29
    3aee:	0f b6       	in	r0, 0x3f	; 63
    3af0:	f8 94       	cli
    3af2:	de bf       	out	0x3e, r29	; 62
    3af4:	0f be       	out	0x3f, r0	; 63
    3af6:	cd bf       	out	0x3d, r28	; 61
    3af8:	cf 91       	pop	r28
    3afa:	df 91       	pop	r29
    3afc:	08 95       	ret

00003afe <LCD_8_BitvidreadCharacter>:
void LCD_8_BitvidreadCharacter(u8 Copy_u8character)
{
    3afe:	df 93       	push	r29
    3b00:	cf 93       	push	r28
    3b02:	cd b7       	in	r28, 0x3d	; 61
    3b04:	de b7       	in	r29, 0x3e	; 62
    3b06:	6d 97       	sbiw	r28, 0x1d	; 29
    3b08:	0f b6       	in	r0, 0x3f	; 63
    3b0a:	f8 94       	cli
    3b0c:	de bf       	out	0x3e, r29	; 62
    3b0e:	0f be       	out	0x3f, r0	; 63
    3b10:	cd bf       	out	0x3d, r28	; 61
    3b12:	8d 8f       	std	Y+29, r24	; 0x1d
	DIO_u8setPinValue(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    3b14:	83 e0       	ldi	r24, 0x03	; 3
    3b16:	62 e0       	ldi	r22, 0x02	; 2
    3b18:	41 e0       	ldi	r20, 0x01	; 1
    3b1a:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPinValue(LCD_RW_PORT, LCD_RW_PIN, HIGH);
    3b1e:	83 e0       	ldi	r24, 0x03	; 3
    3b20:	61 e0       	ldi	r22, 0x01	; 1
    3b22:	41 e0       	ldi	r20, 0x01	; 1
    3b24:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
	DIO_u8setPortValue(LCD_DATA_PORT,Copy_u8character);
    3b28:	82 e0       	ldi	r24, 0x02	; 2
    3b2a:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3b2c:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <DIO_u8setPortValue>
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    3b30:	83 e0       	ldi	r24, 0x03	; 3
    3b32:	60 e0       	ldi	r22, 0x00	; 0
    3b34:	41 e0       	ldi	r20, 0x01	; 1
    3b36:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	a0 e0       	ldi	r26, 0x00	; 0
    3b40:	b0 e4       	ldi	r27, 0x40	; 64
    3b42:	89 8f       	std	Y+25, r24	; 0x19
    3b44:	9a 8f       	std	Y+26, r25	; 0x1a
    3b46:	ab 8f       	std	Y+27, r26	; 0x1b
    3b48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b4a:	69 8d       	ldd	r22, Y+25	; 0x19
    3b4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3b4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3b50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3b52:	20 e0       	ldi	r18, 0x00	; 0
    3b54:	30 e0       	ldi	r19, 0x00	; 0
    3b56:	4a ef       	ldi	r20, 0xFA	; 250
    3b58:	54 e4       	ldi	r21, 0x44	; 68
    3b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5e:	dc 01       	movw	r26, r24
    3b60:	cb 01       	movw	r24, r22
    3b62:	8d 8b       	std	Y+21, r24	; 0x15
    3b64:	9e 8b       	std	Y+22, r25	; 0x16
    3b66:	af 8b       	std	Y+23, r26	; 0x17
    3b68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3b6a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b6c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b6e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b70:	98 8d       	ldd	r25, Y+24	; 0x18
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	30 e0       	ldi	r19, 0x00	; 0
    3b76:	40 e8       	ldi	r20, 0x80	; 128
    3b78:	5f e3       	ldi	r21, 0x3F	; 63
    3b7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b7e:	88 23       	and	r24, r24
    3b80:	2c f4       	brge	.+10     	; 0x3b8c <LCD_8_BitvidreadCharacter+0x8e>
		__ticks = 1;
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	9c 8b       	std	Y+20, r25	; 0x14
    3b88:	8b 8b       	std	Y+19, r24	; 0x13
    3b8a:	3f c0       	rjmp	.+126    	; 0x3c0a <LCD_8_BitvidreadCharacter+0x10c>
	else if (__tmp > 65535)
    3b8c:	6d 89       	ldd	r22, Y+21	; 0x15
    3b8e:	7e 89       	ldd	r23, Y+22	; 0x16
    3b90:	8f 89       	ldd	r24, Y+23	; 0x17
    3b92:	98 8d       	ldd	r25, Y+24	; 0x18
    3b94:	20 e0       	ldi	r18, 0x00	; 0
    3b96:	3f ef       	ldi	r19, 0xFF	; 255
    3b98:	4f e7       	ldi	r20, 0x7F	; 127
    3b9a:	57 e4       	ldi	r21, 0x47	; 71
    3b9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ba0:	18 16       	cp	r1, r24
    3ba2:	4c f5       	brge	.+82     	; 0x3bf6 <LCD_8_BitvidreadCharacter+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba4:	69 8d       	ldd	r22, Y+25	; 0x19
    3ba6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3ba8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3baa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3bac:	20 e0       	ldi	r18, 0x00	; 0
    3bae:	30 e0       	ldi	r19, 0x00	; 0
    3bb0:	40 e2       	ldi	r20, 0x20	; 32
    3bb2:	51 e4       	ldi	r21, 0x41	; 65
    3bb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb8:	dc 01       	movw	r26, r24
    3bba:	cb 01       	movw	r24, r22
    3bbc:	bc 01       	movw	r22, r24
    3bbe:	cd 01       	movw	r24, r26
    3bc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc4:	dc 01       	movw	r26, r24
    3bc6:	cb 01       	movw	r24, r22
    3bc8:	9c 8b       	std	Y+20, r25	; 0x14
    3bca:	8b 8b       	std	Y+19, r24	; 0x13
    3bcc:	0f c0       	rjmp	.+30     	; 0x3bec <LCD_8_BitvidreadCharacter+0xee>
    3bce:	88 ec       	ldi	r24, 0xC8	; 200
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	9a 8b       	std	Y+18, r25	; 0x12
    3bd4:	89 8b       	std	Y+17, r24	; 0x11
    3bd6:	89 89       	ldd	r24, Y+17	; 0x11
    3bd8:	9a 89       	ldd	r25, Y+18	; 0x12
    3bda:	01 97       	sbiw	r24, 0x01	; 1
    3bdc:	f1 f7       	brne	.-4      	; 0x3bda <LCD_8_BitvidreadCharacter+0xdc>
    3bde:	9a 8b       	std	Y+18, r25	; 0x12
    3be0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be2:	8b 89       	ldd	r24, Y+19	; 0x13
    3be4:	9c 89       	ldd	r25, Y+20	; 0x14
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	9c 8b       	std	Y+20, r25	; 0x14
    3bea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bec:	8b 89       	ldd	r24, Y+19	; 0x13
    3bee:	9c 89       	ldd	r25, Y+20	; 0x14
    3bf0:	00 97       	sbiw	r24, 0x00	; 0
    3bf2:	69 f7       	brne	.-38     	; 0x3bce <LCD_8_BitvidreadCharacter+0xd0>
    3bf4:	14 c0       	rjmp	.+40     	; 0x3c1e <LCD_8_BitvidreadCharacter+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf6:	6d 89       	ldd	r22, Y+21	; 0x15
    3bf8:	7e 89       	ldd	r23, Y+22	; 0x16
    3bfa:	8f 89       	ldd	r24, Y+23	; 0x17
    3bfc:	98 8d       	ldd	r25, Y+24	; 0x18
    3bfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c02:	dc 01       	movw	r26, r24
    3c04:	cb 01       	movw	r24, r22
    3c06:	9c 8b       	std	Y+20, r25	; 0x14
    3c08:	8b 8b       	std	Y+19, r24	; 0x13
    3c0a:	8b 89       	ldd	r24, Y+19	; 0x13
    3c0c:	9c 89       	ldd	r25, Y+20	; 0x14
    3c0e:	98 8b       	std	Y+16, r25	; 0x10
    3c10:	8f 87       	std	Y+15, r24	; 0x0f
    3c12:	8f 85       	ldd	r24, Y+15	; 0x0f
    3c14:	98 89       	ldd	r25, Y+16	; 0x10
    3c16:	01 97       	sbiw	r24, 0x01	; 1
    3c18:	f1 f7       	brne	.-4      	; 0x3c16 <LCD_8_BitvidreadCharacter+0x118>
    3c1a:	98 8b       	std	Y+16, r25	; 0x10
    3c1c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	DIO_u8setPinValue(LCD_EN_PORT, LCD_EN_PIN, LOW);
    3c1e:	83 e0       	ldi	r24, 0x03	; 3
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	0e 94 dc 0f 	call	0x1fb8	; 0x1fb8 <DIO_u8setPinValue>
    3c28:	80 e0       	ldi	r24, 0x00	; 0
    3c2a:	90 e0       	ldi	r25, 0x00	; 0
    3c2c:	a0 e0       	ldi	r26, 0x00	; 0
    3c2e:	b0 e4       	ldi	r27, 0x40	; 64
    3c30:	8b 87       	std	Y+11, r24	; 0x0b
    3c32:	9c 87       	std	Y+12, r25	; 0x0c
    3c34:	ad 87       	std	Y+13, r26	; 0x0d
    3c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c40:	20 e0       	ldi	r18, 0x00	; 0
    3c42:	30 e0       	ldi	r19, 0x00	; 0
    3c44:	4a ef       	ldi	r20, 0xFA	; 250
    3c46:	54 e4       	ldi	r21, 0x44	; 68
    3c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c4c:	dc 01       	movw	r26, r24
    3c4e:	cb 01       	movw	r24, r22
    3c50:	8f 83       	std	Y+7, r24	; 0x07
    3c52:	98 87       	std	Y+8, r25	; 0x08
    3c54:	a9 87       	std	Y+9, r26	; 0x09
    3c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c58:	6f 81       	ldd	r22, Y+7	; 0x07
    3c5a:	78 85       	ldd	r23, Y+8	; 0x08
    3c5c:	89 85       	ldd	r24, Y+9	; 0x09
    3c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c60:	20 e0       	ldi	r18, 0x00	; 0
    3c62:	30 e0       	ldi	r19, 0x00	; 0
    3c64:	40 e8       	ldi	r20, 0x80	; 128
    3c66:	5f e3       	ldi	r21, 0x3F	; 63
    3c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3c6c:	88 23       	and	r24, r24
    3c6e:	2c f4       	brge	.+10     	; 0x3c7a <LCD_8_BitvidreadCharacter+0x17c>
		__ticks = 1;
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	90 e0       	ldi	r25, 0x00	; 0
    3c74:	9e 83       	std	Y+6, r25	; 0x06
    3c76:	8d 83       	std	Y+5, r24	; 0x05
    3c78:	3f c0       	rjmp	.+126    	; 0x3cf8 <LCD_8_BitvidreadCharacter+0x1fa>
	else if (__tmp > 65535)
    3c7a:	6f 81       	ldd	r22, Y+7	; 0x07
    3c7c:	78 85       	ldd	r23, Y+8	; 0x08
    3c7e:	89 85       	ldd	r24, Y+9	; 0x09
    3c80:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c82:	20 e0       	ldi	r18, 0x00	; 0
    3c84:	3f ef       	ldi	r19, 0xFF	; 255
    3c86:	4f e7       	ldi	r20, 0x7F	; 127
    3c88:	57 e4       	ldi	r21, 0x47	; 71
    3c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3c8e:	18 16       	cp	r1, r24
    3c90:	4c f5       	brge	.+82     	; 0x3ce4 <LCD_8_BitvidreadCharacter+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c9a:	20 e0       	ldi	r18, 0x00	; 0
    3c9c:	30 e0       	ldi	r19, 0x00	; 0
    3c9e:	40 e2       	ldi	r20, 0x20	; 32
    3ca0:	51 e4       	ldi	r21, 0x41	; 65
    3ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ca6:	dc 01       	movw	r26, r24
    3ca8:	cb 01       	movw	r24, r22
    3caa:	bc 01       	movw	r22, r24
    3cac:	cd 01       	movw	r24, r26
    3cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cb2:	dc 01       	movw	r26, r24
    3cb4:	cb 01       	movw	r24, r22
    3cb6:	9e 83       	std	Y+6, r25	; 0x06
    3cb8:	8d 83       	std	Y+5, r24	; 0x05
    3cba:	0f c0       	rjmp	.+30     	; 0x3cda <LCD_8_BitvidreadCharacter+0x1dc>
    3cbc:	88 ec       	ldi	r24, 0xC8	; 200
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	9c 83       	std	Y+4, r25	; 0x04
    3cc2:	8b 83       	std	Y+3, r24	; 0x03
    3cc4:	8b 81       	ldd	r24, Y+3	; 0x03
    3cc6:	9c 81       	ldd	r25, Y+4	; 0x04
    3cc8:	01 97       	sbiw	r24, 0x01	; 1
    3cca:	f1 f7       	brne	.-4      	; 0x3cc8 <LCD_8_BitvidreadCharacter+0x1ca>
    3ccc:	9c 83       	std	Y+4, r25	; 0x04
    3cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3cd0:	8d 81       	ldd	r24, Y+5	; 0x05
    3cd2:	9e 81       	ldd	r25, Y+6	; 0x06
    3cd4:	01 97       	sbiw	r24, 0x01	; 1
    3cd6:	9e 83       	std	Y+6, r25	; 0x06
    3cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3cda:	8d 81       	ldd	r24, Y+5	; 0x05
    3cdc:	9e 81       	ldd	r25, Y+6	; 0x06
    3cde:	00 97       	sbiw	r24, 0x00	; 0
    3ce0:	69 f7       	brne	.-38     	; 0x3cbc <LCD_8_BitvidreadCharacter+0x1be>
    3ce2:	14 c0       	rjmp	.+40     	; 0x3d0c <LCD_8_BitvidreadCharacter+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ce4:	6f 81       	ldd	r22, Y+7	; 0x07
    3ce6:	78 85       	ldd	r23, Y+8	; 0x08
    3ce8:	89 85       	ldd	r24, Y+9	; 0x09
    3cea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf0:	dc 01       	movw	r26, r24
    3cf2:	cb 01       	movw	r24, r22
    3cf4:	9e 83       	std	Y+6, r25	; 0x06
    3cf6:	8d 83       	std	Y+5, r24	; 0x05
    3cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    3cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    3cfc:	9a 83       	std	Y+2, r25	; 0x02
    3cfe:	89 83       	std	Y+1, r24	; 0x01
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	9a 81       	ldd	r25, Y+2	; 0x02
    3d04:	01 97       	sbiw	r24, 0x01	; 1
    3d06:	f1 f7       	brne	.-4      	; 0x3d04 <LCD_8_BitvidreadCharacter+0x206>
    3d08:	9a 83       	std	Y+2, r25	; 0x02
    3d0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
}
    3d0c:	6d 96       	adiw	r28, 0x1d	; 29
    3d0e:	0f b6       	in	r0, 0x3f	; 63
    3d10:	f8 94       	cli
    3d12:	de bf       	out	0x3e, r29	; 62
    3d14:	0f be       	out	0x3f, r0	; 63
    3d16:	cd bf       	out	0x3d, r28	; 61
    3d18:	cf 91       	pop	r28
    3d1a:	df 91       	pop	r29
    3d1c:	08 95       	ret

00003d1e <LCD_8_BitvidwriteString>:
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
    3d1e:	df 93       	push	r29
    3d20:	cf 93       	push	r28
    3d22:	00 d0       	rcall	.+0      	; 0x3d24 <LCD_8_BitvidwriteString+0x6>
    3d24:	0f 92       	push	r0
    3d26:	cd b7       	in	r28, 0x3d	; 61
    3d28:	de b7       	in	r29, 0x3e	; 62
    3d2a:	9b 83       	std	Y+3, r25	; 0x03
    3d2c:	8a 83       	std	Y+2, r24	; 0x02
	if(Copy_p2cString != NULL)
    3d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3d30:	9b 81       	ldd	r25, Y+3	; 0x03
    3d32:	00 97       	sbiw	r24, 0x00	; 0
    3d34:	d9 f0       	breq	.+54     	; 0x3d6c <LCD_8_BitvidwriteString+0x4e>
	{
		u8 Local_u8Counter=0;
    3d36:	19 82       	std	Y+1, r1	; 0x01
    3d38:	0e c0       	rjmp	.+28     	; 0x3d56 <LCD_8_BitvidwriteString+0x38>
		while(Copy_p2cString[Local_u8Counter]!='\0')
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
    3d3a:	89 81       	ldd	r24, Y+1	; 0x01
    3d3c:	28 2f       	mov	r18, r24
    3d3e:	30 e0       	ldi	r19, 0x00	; 0
    3d40:	8a 81       	ldd	r24, Y+2	; 0x02
    3d42:	9b 81       	ldd	r25, Y+3	; 0x03
    3d44:	fc 01       	movw	r30, r24
    3d46:	e2 0f       	add	r30, r18
    3d48:	f3 1f       	adc	r31, r19
    3d4a:	80 81       	ld	r24, Z
    3d4c:	0e 94 6f 1c 	call	0x38de	; 0x38de <LCD_8_BitvidwriteCharacter>
			Local_u8Counter++;
    3d50:	89 81       	ldd	r24, Y+1	; 0x01
    3d52:	8f 5f       	subi	r24, 0xFF	; 255
    3d54:	89 83       	std	Y+1, r24	; 0x01
void LCD_8_BitvidwriteString(const char* Copy_p2cString)
{
	if(Copy_p2cString != NULL)
	{
		u8 Local_u8Counter=0;
		while(Copy_p2cString[Local_u8Counter]!='\0')
    3d56:	89 81       	ldd	r24, Y+1	; 0x01
    3d58:	28 2f       	mov	r18, r24
    3d5a:	30 e0       	ldi	r19, 0x00	; 0
    3d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    3d60:	fc 01       	movw	r30, r24
    3d62:	e2 0f       	add	r30, r18
    3d64:	f3 1f       	adc	r31, r19
    3d66:	80 81       	ld	r24, Z
    3d68:	88 23       	and	r24, r24
    3d6a:	39 f7       	brne	.-50     	; 0x3d3a <LCD_8_BitvidwriteString+0x1c>
		{
			LCD_8_BitvidwriteCharacter(Copy_p2cString[Local_u8Counter]);
			Local_u8Counter++;
		}
	}
}
    3d6c:	0f 90       	pop	r0
    3d6e:	0f 90       	pop	r0
    3d70:	0f 90       	pop	r0
    3d72:	cf 91       	pop	r28
    3d74:	df 91       	pop	r29
    3d76:	08 95       	ret

00003d78 <LCD_8_BitvidGoToXY>:
void LCD_8_BitvidGoToXY(u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3d78:	df 93       	push	r29
    3d7a:	cf 93       	push	r28
    3d7c:	00 d0       	rcall	.+0      	; 0x3d7e <LCD_8_BitvidGoToXY+0x6>
    3d7e:	0f 92       	push	r0
    3d80:	cd b7       	in	r28, 0x3d	; 61
    3d82:	de b7       	in	r29, 0x3e	; 62
    3d84:	8a 83       	std	Y+2, r24	; 0x02
    3d86:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8Address;
	if(Copy_u8XPos==0)
    3d88:	8a 81       	ldd	r24, Y+2	; 0x02
    3d8a:	88 23       	and	r24, r24
    3d8c:	19 f4       	brne	.+6      	; 0x3d94 <LCD_8_BitvidGoToXY+0x1c>
	{
		Local_u8Address=Copy_u8YPos;
    3d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d90:	89 83       	std	Y+1, r24	; 0x01
    3d92:	06 c0       	rjmp	.+12     	; 0x3da0 <LCD_8_BitvidGoToXY+0x28>
	}
	else if(Copy_u8XPos==1)
    3d94:	8a 81       	ldd	r24, Y+2	; 0x02
    3d96:	81 30       	cpi	r24, 0x01	; 1
    3d98:	19 f4       	brne	.+6      	; 0x3da0 <LCD_8_BitvidGoToXY+0x28>
	{
		Local_u8Address=Copy_u8YPos + 0X40;
    3d9a:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9c:	80 5c       	subi	r24, 0xC0	; 192
    3d9e:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_8_BitvidsendCommand(Local_u8Address+128);
    3da0:	89 81       	ldd	r24, Y+1	; 0x01
    3da2:	80 58       	subi	r24, 0x80	; 128
    3da4:	0e 94 5f 1b 	call	0x36be	; 0x36be <LCD_8_BitvidsendCommand>
}
    3da8:	0f 90       	pop	r0
    3daa:	0f 90       	pop	r0
    3dac:	0f 90       	pop	r0
    3dae:	cf 91       	pop	r28
    3db0:	df 91       	pop	r29
    3db2:	08 95       	ret

00003db4 <LCD_8_BitvidwriteSpecialCharacter>:
void LCD_8_BitvidwriteSpecialCharacter(u8* Copy_pu8Pattern, u8 Copy_u8PatternNumber, u8 Copy_u8XPos , u8 Copy_u8YPos)
{
    3db4:	df 93       	push	r29
    3db6:	cf 93       	push	r28
    3db8:	cd b7       	in	r28, 0x3d	; 61
    3dba:	de b7       	in	r29, 0x3e	; 62
    3dbc:	27 97       	sbiw	r28, 0x07	; 7
    3dbe:	0f b6       	in	r0, 0x3f	; 63
    3dc0:	f8 94       	cli
    3dc2:	de bf       	out	0x3e, r29	; 62
    3dc4:	0f be       	out	0x3f, r0	; 63
    3dc6:	cd bf       	out	0x3d, r28	; 61
    3dc8:	9c 83       	std	Y+4, r25	; 0x04
    3dca:	8b 83       	std	Y+3, r24	; 0x03
    3dcc:	6d 83       	std	Y+5, r22	; 0x05
    3dce:	4e 83       	std	Y+6, r20	; 0x06
    3dd0:	2f 83       	std	Y+7, r18	; 0x07
	u8 Local_u8CGRAMAddress=0 , Local_u8Iterator;
    3dd2:	1a 82       	std	Y+2, r1	; 0x02
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
    3dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    3dd6:	88 2f       	mov	r24, r24
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	88 0f       	add	r24, r24
    3ddc:	99 1f       	adc	r25, r25
    3dde:	88 0f       	add	r24, r24
    3de0:	99 1f       	adc	r25, r25
    3de2:	88 0f       	add	r24, r24
    3de4:	99 1f       	adc	r25, r25
    3de6:	8a 83       	std	Y+2, r24	; 0x02
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
    3de8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dea:	80 5c       	subi	r24, 0xC0	; 192
    3dec:	0e 94 5f 1b 	call	0x36be	; 0x36be <LCD_8_BitvidsendCommand>
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3df0:	19 82       	std	Y+1, r1	; 0x01
    3df2:	0e c0       	rjmp	.+28     	; 0x3e10 <LCD_8_BitvidwriteSpecialCharacter+0x5c>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
    3df4:	89 81       	ldd	r24, Y+1	; 0x01
    3df6:	28 2f       	mov	r18, r24
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3dfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3dfe:	fc 01       	movw	r30, r24
    3e00:	e2 0f       	add	r30, r18
    3e02:	f3 1f       	adc	r31, r19
    3e04:	80 81       	ld	r24, Z
    3e06:	0e 94 6f 1c 	call	0x38de	; 0x38de <LCD_8_BitvidwriteCharacter>
	/*Calculate CGRam Address whose each block is 8 bytes*/
	Local_u8CGRAMAddress=Copy_u8PatternNumber*8;
	/*Send CGRam Address Command to LCD, with setting bit 6, clearing bit 7*/
	LCD_8_BitvidsendCommand(Local_u8CGRAMAddress+64);
	/*Write the Pattern into CGRam*/
	for(Local_u8Iterator=0;Local_u8Iterator<8;Local_u8Iterator++)
    3e0a:	89 81       	ldd	r24, Y+1	; 0x01
    3e0c:	8f 5f       	subi	r24, 0xFF	; 255
    3e0e:	89 83       	std	Y+1, r24	; 0x01
    3e10:	89 81       	ldd	r24, Y+1	; 0x01
    3e12:	88 30       	cpi	r24, 0x08	; 8
    3e14:	78 f3       	brcs	.-34     	; 0x3df4 <LCD_8_BitvidwriteSpecialCharacter+0x40>
	{
		LCD_8_BitvidwriteCharacter(Copy_pu8Pattern[Local_u8Iterator]);
	}
	/*Go Back to DDRam to Display the Pattern*/
	LCD_8_BitvidGoToXY(Copy_u8XPos,Copy_u8YPos);
    3e16:	8e 81       	ldd	r24, Y+6	; 0x06
    3e18:	6f 81       	ldd	r22, Y+7	; 0x07
    3e1a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <LCD_8_BitvidGoToXY>
	/*Display the Pattern Written in CGRam*/
	LCD_8_BitvidwriteCharacter(Copy_u8PatternNumber);
    3e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3e20:	0e 94 6f 1c 	call	0x38de	; 0x38de <LCD_8_BitvidwriteCharacter>
}
    3e24:	27 96       	adiw	r28, 0x07	; 7
    3e26:	0f b6       	in	r0, 0x3f	; 63
    3e28:	f8 94       	cli
    3e2a:	de bf       	out	0x3e, r29	; 62
    3e2c:	0f be       	out	0x3f, r0	; 63
    3e2e:	cd bf       	out	0x3d, r28	; 61
    3e30:	cf 91       	pop	r28
    3e32:	df 91       	pop	r29
    3e34:	08 95       	ret

00003e36 <LCD_8_BitvidwriteInt>:
void LCD_8_BitvidwriteInt(u32 copy_u8number)
{
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	df 93       	push	r29
    3e3c:	cf 93       	push	r28
    3e3e:	cd b7       	in	r28, 0x3d	; 61
    3e40:	de b7       	in	r29, 0x3e	; 62
    3e42:	61 97       	sbiw	r28, 0x11	; 17
    3e44:	0f b6       	in	r0, 0x3f	; 63
    3e46:	f8 94       	cli
    3e48:	de bf       	out	0x3e, r29	; 62
    3e4a:	0f be       	out	0x3f, r0	; 63
    3e4c:	cd bf       	out	0x3d, r28	; 61
    3e4e:	6e 87       	std	Y+14, r22	; 0x0e
    3e50:	7f 87       	std	Y+15, r23	; 0x0f
    3e52:	88 8b       	std	Y+16, r24	; 0x10
    3e54:	99 8b       	std	Y+17, r25	; 0x11
	u32 temp = copy_u8number;
    3e56:	8e 85       	ldd	r24, Y+14	; 0x0e
    3e58:	9f 85       	ldd	r25, Y+15	; 0x0f
    3e5a:	a8 89       	ldd	r26, Y+16	; 0x10
    3e5c:	b9 89       	ldd	r27, Y+17	; 0x11
    3e5e:	8b 83       	std	Y+3, r24	; 0x03
    3e60:	9c 83       	std	Y+4, r25	; 0x04
    3e62:	ad 83       	std	Y+5, r26	; 0x05
    3e64:	be 83       	std	Y+6, r27	; 0x06
	u8 digit[7];
	u8 lenght = 0;
    3e66:	1a 82       	std	Y+2, r1	; 0x02
	s8 i;
	if(temp==0)
    3e68:	8b 81       	ldd	r24, Y+3	; 0x03
    3e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3e6c:	ad 81       	ldd	r26, Y+5	; 0x05
    3e6e:	be 81       	ldd	r27, Y+6	; 0x06
    3e70:	00 97       	sbiw	r24, 0x00	; 0
    3e72:	a1 05       	cpc	r26, r1
    3e74:	b1 05       	cpc	r27, r1
    3e76:	89 f5       	brne	.+98     	; 0x3eda <LCD_8_BitvidwriteInt+0xa4>
	{
		LCD_8_BitvidwriteCharacter('0');
    3e78:	80 e3       	ldi	r24, 0x30	; 48
    3e7a:	0e 94 6f 1c 	call	0x38de	; 0x38de <LCD_8_BitvidwriteCharacter>
    3e7e:	4d c0       	rjmp	.+154    	; 0x3f1a <LCD_8_BitvidwriteInt+0xe4>
	}
	else
	{
		while(temp!=0)
		{
			digit[lenght]=temp%10;
    3e80:	8a 81       	ldd	r24, Y+2	; 0x02
    3e82:	08 2f       	mov	r16, r24
    3e84:	10 e0       	ldi	r17, 0x00	; 0
    3e86:	8b 81       	ldd	r24, Y+3	; 0x03
    3e88:	9c 81       	ldd	r25, Y+4	; 0x04
    3e8a:	ad 81       	ldd	r26, Y+5	; 0x05
    3e8c:	be 81       	ldd	r27, Y+6	; 0x06
    3e8e:	2a e0       	ldi	r18, 0x0A	; 10
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	40 e0       	ldi	r20, 0x00	; 0
    3e94:	50 e0       	ldi	r21, 0x00	; 0
    3e96:	bc 01       	movw	r22, r24
    3e98:	cd 01       	movw	r24, r26
    3e9a:	0e 94 c1 20 	call	0x4182	; 0x4182 <__udivmodsi4>
    3e9e:	dc 01       	movw	r26, r24
    3ea0:	cb 01       	movw	r24, r22
    3ea2:	28 2f       	mov	r18, r24
    3ea4:	ce 01       	movw	r24, r28
    3ea6:	07 96       	adiw	r24, 0x07	; 7
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	e0 0f       	add	r30, r16
    3eac:	f1 1f       	adc	r31, r17
    3eae:	20 83       	st	Z, r18
			temp/=10;
    3eb0:	8b 81       	ldd	r24, Y+3	; 0x03
    3eb2:	9c 81       	ldd	r25, Y+4	; 0x04
    3eb4:	ad 81       	ldd	r26, Y+5	; 0x05
    3eb6:	be 81       	ldd	r27, Y+6	; 0x06
    3eb8:	2a e0       	ldi	r18, 0x0A	; 10
    3eba:	30 e0       	ldi	r19, 0x00	; 0
    3ebc:	40 e0       	ldi	r20, 0x00	; 0
    3ebe:	50 e0       	ldi	r21, 0x00	; 0
    3ec0:	bc 01       	movw	r22, r24
    3ec2:	cd 01       	movw	r24, r26
    3ec4:	0e 94 c1 20 	call	0x4182	; 0x4182 <__udivmodsi4>
    3ec8:	da 01       	movw	r26, r20
    3eca:	c9 01       	movw	r24, r18
    3ecc:	8b 83       	std	Y+3, r24	; 0x03
    3ece:	9c 83       	std	Y+4, r25	; 0x04
    3ed0:	ad 83       	std	Y+5, r26	; 0x05
    3ed2:	be 83       	std	Y+6, r27	; 0x06
			lenght++;
    3ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    3ed6:	8f 5f       	subi	r24, 0xFF	; 255
    3ed8:	8a 83       	std	Y+2, r24	; 0x02
	{
		LCD_8_BitvidwriteCharacter('0');
	}
	else
	{
		while(temp!=0)
    3eda:	8b 81       	ldd	r24, Y+3	; 0x03
    3edc:	9c 81       	ldd	r25, Y+4	; 0x04
    3ede:	ad 81       	ldd	r26, Y+5	; 0x05
    3ee0:	be 81       	ldd	r27, Y+6	; 0x06
    3ee2:	00 97       	sbiw	r24, 0x00	; 0
    3ee4:	a1 05       	cpc	r26, r1
    3ee6:	b1 05       	cpc	r27, r1
    3ee8:	59 f6       	brne	.-106    	; 0x3e80 <LCD_8_BitvidwriteInt+0x4a>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3eea:	8a 81       	ldd	r24, Y+2	; 0x02
    3eec:	81 50       	subi	r24, 0x01	; 1
    3eee:	89 83       	std	Y+1, r24	; 0x01
    3ef0:	11 c0       	rjmp	.+34     	; 0x3f14 <LCD_8_BitvidwriteInt+0xde>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	28 2f       	mov	r18, r24
    3ef6:	33 27       	eor	r19, r19
    3ef8:	27 fd       	sbrc	r18, 7
    3efa:	30 95       	com	r19
    3efc:	ce 01       	movw	r24, r28
    3efe:	07 96       	adiw	r24, 0x07	; 7
    3f00:	fc 01       	movw	r30, r24
    3f02:	e2 0f       	add	r30, r18
    3f04:	f3 1f       	adc	r31, r19
    3f06:	80 81       	ld	r24, Z
    3f08:	80 5d       	subi	r24, 0xD0	; 208
    3f0a:	0e 94 6f 1c 	call	0x38de	; 0x38de <LCD_8_BitvidwriteCharacter>
		{
			digit[lenght]=temp%10;
			temp/=10;
			lenght++;
		}
		for(i=lenght-1;i>=0;i--)
    3f0e:	89 81       	ldd	r24, Y+1	; 0x01
    3f10:	81 50       	subi	r24, 0x01	; 1
    3f12:	89 83       	std	Y+1, r24	; 0x01
    3f14:	89 81       	ldd	r24, Y+1	; 0x01
    3f16:	88 23       	and	r24, r24
    3f18:	64 f7       	brge	.-40     	; 0x3ef2 <LCD_8_BitvidwriteInt+0xbc>
		{
			LCD_8_BitvidwriteCharacter(digit[i]+'0');
		}
	}
}
    3f1a:	61 96       	adiw	r28, 0x11	; 17
    3f1c:	0f b6       	in	r0, 0x3f	; 63
    3f1e:	f8 94       	cli
    3f20:	de bf       	out	0x3e, r29	; 62
    3f22:	0f be       	out	0x3f, r0	; 63
    3f24:	cd bf       	out	0x3d, r28	; 61
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	1f 91       	pop	r17
    3f2c:	0f 91       	pop	r16
    3f2e:	08 95       	ret

00003f30 <create_task>:
void LED_2(void);
void LED_3(void);
void SSD_voidCount(void);

void create_task(void)
{
    3f30:	df 93       	push	r29
    3f32:	cf 93       	push	r28
    3f34:	cd b7       	in	r28, 0x3d	; 61
    3f36:	de b7       	in	r29, 0x3e	; 62
    3f38:	a0 97       	sbiw	r28, 0x20	; 32
    3f3a:	0f b6       	in	r0, 0x3f	; 63
    3f3c:	f8 94       	cli
    3f3e:	de bf       	out	0x3e, r29	; 62
    3f40:	0f be       	out	0x3f, r0	; 63
    3f42:	cd bf       	out	0x3d, r28	; 61
	CreateTask_FuncArgus SSD_task;
	SSD_task.Copy_u8Priority = SSD_COUNT;
    3f44:	1c 82       	std	Y+4, r1	; 0x04
	SSD_task.Copy_u8State = TASK_RESUMED;
    3f46:	1b 82       	std	Y+3, r1	; 0x03
	SSD_task.Copy_u16Periodicity = 1000;
    3f48:	88 ee       	ldi	r24, 0xE8	; 232
    3f4a:	93 e0       	ldi	r25, 0x03	; 3
    3f4c:	9e 83       	std	Y+6, r25	; 0x06
    3f4e:	8d 83       	std	Y+5, r24	; 0x05
	SSD_task.Copy_u16FirstDelay = 0 ;
    3f50:	18 86       	std	Y+8, r1	; 0x08
    3f52:	1f 82       	std	Y+7, r1	; 0x07
	SSD_task.Copy_pvTaskFunc = &SSD_voidCount;
    3f54:	8a e4       	ldi	r24, 0x4A	; 74
    3f56:	90 e2       	ldi	r25, 0x20	; 32
    3f58:	9a 83       	std	Y+2, r25	; 0x02
    3f5a:	89 83       	std	Y+1, r24	; 0x01
	RTOS_u8CreateTask(&SSD_task);
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	01 96       	adiw	r24, 0x01	; 1
    3f60:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus LED_1_task;
	LED_1_task.Copy_u8Priority = LED1;
    3f64:	81 e0       	ldi	r24, 0x01	; 1
    3f66:	8c 87       	std	Y+12, r24	; 0x0c
	LED_1_task.Copy_u8State = TASK_SUSPENDED;
    3f68:	81 e0       	ldi	r24, 0x01	; 1
    3f6a:	8b 87       	std	Y+11, r24	; 0x0b
	LED_1_task.Copy_u16Periodicity = 60000;
    3f6c:	80 e6       	ldi	r24, 0x60	; 96
    3f6e:	9a ee       	ldi	r25, 0xEA	; 234
    3f70:	9e 87       	std	Y+14, r25	; 0x0e
    3f72:	8d 87       	std	Y+13, r24	; 0x0d
	LED_1_task.Copy_u16FirstDelay = 0 ;
    3f74:	18 8a       	std	Y+16, r1	; 0x10
    3f76:	1f 86       	std	Y+15, r1	; 0x0f
	LED_1_task.Copy_pvTaskFunc = &LED_1;
    3f78:	88 e0       	ldi	r24, 0x08	; 8
    3f7a:	90 e2       	ldi	r25, 0x20	; 32
    3f7c:	9a 87       	std	Y+10, r25	; 0x0a
    3f7e:	89 87       	std	Y+9, r24	; 0x09
	RTOS_u8CreateTask(&LED_1_task);
    3f80:	ce 01       	movw	r24, r28
    3f82:	09 96       	adiw	r24, 0x09	; 9
    3f84:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus LED_2_task;
	LED_2_task.Copy_u8Priority = LED2;
    3f88:	82 e0       	ldi	r24, 0x02	; 2
    3f8a:	8c 8b       	std	Y+20, r24	; 0x14
	LED_2_task.Copy_u8State = TASK_SUSPENDED;
    3f8c:	81 e0       	ldi	r24, 0x01	; 1
    3f8e:	8b 8b       	std	Y+19, r24	; 0x13
	LED_2_task.Copy_u16Periodicity = 5000;
    3f90:	88 e8       	ldi	r24, 0x88	; 136
    3f92:	93 e1       	ldi	r25, 0x13	; 19
    3f94:	9e 8b       	std	Y+22, r25	; 0x16
    3f96:	8d 8b       	std	Y+21, r24	; 0x15
	LED_2_task.Copy_u16FirstDelay = 0;
    3f98:	18 8e       	std	Y+24, r1	; 0x18
    3f9a:	1f 8a       	std	Y+23, r1	; 0x17
	LED_2_task.Copy_pvTaskFunc = &LED_2;
    3f9c:	8e e1       	ldi	r24, 0x1E	; 30
    3f9e:	90 e2       	ldi	r25, 0x20	; 32
    3fa0:	9a 8b       	std	Y+18, r25	; 0x12
    3fa2:	89 8b       	std	Y+17, r24	; 0x11
	RTOS_u8CreateTask(&LED_2_task);
    3fa4:	ce 01       	movw	r24, r28
    3fa6:	41 96       	adiw	r24, 0x11	; 17
    3fa8:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>

	CreateTask_FuncArgus LED_3_task;
	LED_3_task.Copy_u8Priority = LED3;
    3fac:	83 e0       	ldi	r24, 0x03	; 3
    3fae:	8c 8f       	std	Y+28, r24	; 0x1c
	LED_3_task.Copy_u8State = TASK_SUSPENDED;
    3fb0:	81 e0       	ldi	r24, 0x01	; 1
    3fb2:	8b 8f       	std	Y+27, r24	; 0x1b
	LED_3_task.Copy_u16Periodicity = 10000;
    3fb4:	80 e1       	ldi	r24, 0x10	; 16
    3fb6:	97 e2       	ldi	r25, 0x27	; 39
    3fb8:	9e 8f       	std	Y+30, r25	; 0x1e
    3fba:	8d 8f       	std	Y+29, r24	; 0x1d
	LED_3_task.Copy_u16FirstDelay = 0;
    3fbc:	18 a2       	std	Y+32, r1	; 0x20
    3fbe:	1f 8e       	std	Y+31, r1	; 0x1f
	LED_3_task.Copy_pvTaskFunc = &LED_3;
    3fc0:	84 e3       	ldi	r24, 0x34	; 52
    3fc2:	90 e2       	ldi	r25, 0x20	; 32
    3fc4:	9a 8f       	std	Y+26, r25	; 0x1a
    3fc6:	89 8f       	std	Y+25, r24	; 0x19
	RTOS_u8CreateTask(&LED_3_task);
    3fc8:	ce 01       	movw	r24, r28
    3fca:	49 96       	adiw	r24, 0x19	; 25
    3fcc:	0e 94 c9 05 	call	0xb92	; 0xb92 <RTOS_u8CreateTask>



}
    3fd0:	a0 96       	adiw	r28, 0x20	; 32
    3fd2:	0f b6       	in	r0, 0x3f	; 63
    3fd4:	f8 94       	cli
    3fd6:	de bf       	out	0x3e, r29	; 62
    3fd8:	0f be       	out	0x3f, r0	; 63
    3fda:	cd bf       	out	0x3d, r28	; 61
    3fdc:	cf 91       	pop	r28
    3fde:	df 91       	pop	r29
    3fe0:	08 95       	ret

00003fe2 <main>:

void main(void)
{
    3fe2:	df 93       	push	r29
    3fe4:	cf 93       	push	r28
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62

	LED_voidInit(PORT_B,PIN_3);
    3fea:	81 e0       	ldi	r24, 0x01	; 1
    3fec:	63 e0       	ldi	r22, 0x03	; 3
    3fee:	0e 94 af 12 	call	0x255e	; 0x255e <LED_voidInit>
	LED_voidInit(PORT_B,PIN_4);
    3ff2:	81 e0       	ldi	r24, 0x01	; 1
    3ff4:	64 e0       	ldi	r22, 0x04	; 4
    3ff6:	0e 94 af 12 	call	0x255e	; 0x255e <LED_voidInit>
	LED_voidInit(PORT_B,PIN_5);
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	65 e0       	ldi	r22, 0x05	; 5
    3ffe:	0e 94 af 12 	call	0x255e	; 0x255e <LED_voidInit>
	SSD_voidInit();
    4002:	0e 94 1b 11 	call	0x2236	; 0x2236 <SSD_voidInit>


	create_task();
    4006:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <create_task>
	RTOS_voidStart();
    400a:	0e 94 a3 05 	call	0xb46	; 0xb46 <RTOS_voidStart>
    400e:	ff cf       	rjmp	.-2      	; 0x400e <main+0x2c>

00004010 <LED_1>:

	}
}

void LED_1(void)
{
    4010:	df 93       	push	r29
    4012:	cf 93       	push	r28
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
	LED_voidOn(PORT_B,PIN_3,LED_FORWARD_CONNECTION);
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	63 e0       	ldi	r22, 0x03	; 3
    401c:	41 e0       	ldi	r20, 0x01	; 1
    401e:	0e 94 c0 12 	call	0x2580	; 0x2580 <LED_voidOn>
	LED_voidOff(PORT_B,PIN_4,LED_FORWARD_CONNECTION);
    4022:	81 e0       	ldi	r24, 0x01	; 1
    4024:	64 e0       	ldi	r22, 0x04	; 4
    4026:	41 e0       	ldi	r20, 0x01	; 1
    4028:	0e 94 ed 12 	call	0x25da	; 0x25da <LED_voidOff>
	LED_voidOff(PORT_B,PIN_5,LED_FORWARD_CONNECTION);
    402c:	81 e0       	ldi	r24, 0x01	; 1
    402e:	65 e0       	ldi	r22, 0x05	; 5
    4030:	41 e0       	ldi	r20, 0x01	; 1
    4032:	0e 94 ed 12 	call	0x25da	; 0x25da <LED_voidOff>
}
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	08 95       	ret

0000403c <LED_2>:
void LED_2(void)
{
    403c:	df 93       	push	r29
    403e:	cf 93       	push	r28
    4040:	cd b7       	in	r28, 0x3d	; 61
    4042:	de b7       	in	r29, 0x3e	; 62
	LED_voidOff(PORT_B,PIN_3,LED_FORWARD_CONNECTION);
    4044:	81 e0       	ldi	r24, 0x01	; 1
    4046:	63 e0       	ldi	r22, 0x03	; 3
    4048:	41 e0       	ldi	r20, 0x01	; 1
    404a:	0e 94 ed 12 	call	0x25da	; 0x25da <LED_voidOff>
	LED_voidOn(PORT_B,PIN_4,LED_FORWARD_CONNECTION);
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	64 e0       	ldi	r22, 0x04	; 4
    4052:	41 e0       	ldi	r20, 0x01	; 1
    4054:	0e 94 c0 12 	call	0x2580	; 0x2580 <LED_voidOn>
	LED_voidOff(PORT_B,PIN_5,LED_FORWARD_CONNECTION);
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	65 e0       	ldi	r22, 0x05	; 5
    405c:	41 e0       	ldi	r20, 0x01	; 1
    405e:	0e 94 ed 12 	call	0x25da	; 0x25da <LED_voidOff>
}
    4062:	cf 91       	pop	r28
    4064:	df 91       	pop	r29
    4066:	08 95       	ret

00004068 <LED_3>:
void LED_3(void)
{
    4068:	df 93       	push	r29
    406a:	cf 93       	push	r28
    406c:	cd b7       	in	r28, 0x3d	; 61
    406e:	de b7       	in	r29, 0x3e	; 62
	LED_voidOff(PORT_B,PIN_3,LED_FORWARD_CONNECTION);
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	63 e0       	ldi	r22, 0x03	; 3
    4074:	41 e0       	ldi	r20, 0x01	; 1
    4076:	0e 94 ed 12 	call	0x25da	; 0x25da <LED_voidOff>
	LED_voidOff(PORT_B,PIN_4,LED_FORWARD_CONNECTION);
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	64 e0       	ldi	r22, 0x04	; 4
    407e:	41 e0       	ldi	r20, 0x01	; 1
    4080:	0e 94 ed 12 	call	0x25da	; 0x25da <LED_voidOff>
	LED_voidOn(PORT_B,PIN_5,LED_FORWARD_CONNECTION);
    4084:	81 e0       	ldi	r24, 0x01	; 1
    4086:	65 e0       	ldi	r22, 0x05	; 5
    4088:	41 e0       	ldi	r20, 0x01	; 1
    408a:	0e 94 c0 12 	call	0x2580	; 0x2580 <LED_voidOn>
}
    408e:	cf 91       	pop	r28
    4090:	df 91       	pop	r29
    4092:	08 95       	ret

00004094 <SSD_voidCount>:

void SSD_voidCount(void)
{
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
	static u8 local_u8Counter = 0;
	local_u8Counter++;
    409c:	80 91 aa 00 	lds	r24, 0x00AA
    40a0:	8f 5f       	subi	r24, 0xFF	; 255
    40a2:	80 93 aa 00 	sts	0x00AA, r24
	if(local_u8Counter <= 60)
    40a6:	80 91 aa 00 	lds	r24, 0x00AA
    40aa:	8d 33       	cpi	r24, 0x3D	; 61
    40ac:	70 f4       	brcc	.+28     	; 0x40ca <SSD_voidCount+0x36>
	{
		SSD_voidDisplayMultiplexedNumber(local_u8Counter);
    40ae:	80 91 aa 00 	lds	r24, 0x00AA
    40b2:	0e 94 72 11 	call	0x22e4	; 0x22e4 <SSD_voidDisplayMultiplexedNumber>
		RTOS_voidResumeTask(LED1);
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		RTOS_voidSuspendTask(LED2);
    40bc:	82 e0       	ldi	r24, 0x02	; 2
    40be:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LED3);
    40c2:	83 e0       	ldi	r24, 0x03	; 3
    40c4:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
    40c8:	39 c0       	rjmp	.+114    	; 0x413c <SSD_voidCount+0xa8>
	}
	else if(local_u8Counter > 60 && local_u8Counter <= 66)
    40ca:	80 91 aa 00 	lds	r24, 0x00AA
    40ce:	8d 33       	cpi	r24, 0x3D	; 61
    40d0:	98 f0       	brcs	.+38     	; 0x40f8 <SSD_voidCount+0x64>
    40d2:	80 91 aa 00 	lds	r24, 0x00AA
    40d6:	83 34       	cpi	r24, 0x43	; 67
    40d8:	78 f4       	brcc	.+30     	; 0x40f8 <SSD_voidCount+0x64>
	{
		SSD_voidDisplayMultiplexedNumber(local_u8Counter - 60);
    40da:	80 91 aa 00 	lds	r24, 0x00AA
    40de:	8c 53       	subi	r24, 0x3C	; 60
    40e0:	0e 94 72 11 	call	0x22e4	; 0x22e4 <SSD_voidDisplayMultiplexedNumber>
		RTOS_voidResumeTask(LED2);
    40e4:	82 e0       	ldi	r24, 0x02	; 2
    40e6:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		RTOS_voidSuspendTask(LED1);
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LED3);
    40f0:	83 e0       	ldi	r24, 0x03	; 3
    40f2:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
    40f6:	22 c0       	rjmp	.+68     	; 0x413c <SSD_voidCount+0xa8>
	}
	else if(local_u8Counter > 66 && local_u8Counter <= 77)
    40f8:	80 91 aa 00 	lds	r24, 0x00AA
    40fc:	83 34       	cpi	r24, 0x43	; 67
    40fe:	98 f0       	brcs	.+38     	; 0x4126 <SSD_voidCount+0x92>
    4100:	80 91 aa 00 	lds	r24, 0x00AA
    4104:	8e 34       	cpi	r24, 0x4E	; 78
    4106:	78 f4       	brcc	.+30     	; 0x4126 <SSD_voidCount+0x92>
	{
		SSD_voidDisplayMultiplexedNumber(local_u8Counter - 66);
    4108:	80 91 aa 00 	lds	r24, 0x00AA
    410c:	82 54       	subi	r24, 0x42	; 66
    410e:	0e 94 72 11 	call	0x22e4	; 0x22e4 <SSD_voidDisplayMultiplexedNumber>
		RTOS_voidResumeTask(LED3);
    4112:	83 e0       	ldi	r24, 0x03	; 3
    4114:	0e 94 55 06 	call	0xcaa	; 0xcaa <RTOS_voidResumeTask>
		RTOS_voidSuspendTask(LED1);
    4118:	81 e0       	ldi	r24, 0x01	; 1
    411a:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LED2);
    411e:	82 e0       	ldi	r24, 0x02	; 2
    4120:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
    4124:	0b c0       	rjmp	.+22     	; 0x413c <SSD_voidCount+0xa8>
	}
	else
	{
		local_u8Counter = 0;
    4126:	10 92 aa 00 	sts	0x00AA, r1
		RTOS_voidSuspendTask(LED1);
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LED2);
    4130:	82 e0       	ldi	r24, 0x02	; 2
    4132:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>
		RTOS_voidSuspendTask(LED3);
    4136:	83 e0       	ldi	r24, 0x03	; 3
    4138:	0e 94 3c 06 	call	0xc78	; 0xc78 <RTOS_voidSuspendTask>

	}

}
    413c:	cf 91       	pop	r28
    413e:	df 91       	pop	r29
    4140:	08 95       	ret

00004142 <__udivmodqi4>:
    4142:	99 1b       	sub	r25, r25
    4144:	79 e0       	ldi	r23, 0x09	; 9
    4146:	04 c0       	rjmp	.+8      	; 0x4150 <__udivmodqi4_ep>

00004148 <__udivmodqi4_loop>:
    4148:	99 1f       	adc	r25, r25
    414a:	96 17       	cp	r25, r22
    414c:	08 f0       	brcs	.+2      	; 0x4150 <__udivmodqi4_ep>
    414e:	96 1b       	sub	r25, r22

00004150 <__udivmodqi4_ep>:
    4150:	88 1f       	adc	r24, r24
    4152:	7a 95       	dec	r23
    4154:	c9 f7       	brne	.-14     	; 0x4148 <__udivmodqi4_loop>
    4156:	80 95       	com	r24
    4158:	08 95       	ret

0000415a <__udivmodhi4>:
    415a:	aa 1b       	sub	r26, r26
    415c:	bb 1b       	sub	r27, r27
    415e:	51 e1       	ldi	r21, 0x11	; 17
    4160:	07 c0       	rjmp	.+14     	; 0x4170 <__udivmodhi4_ep>

00004162 <__udivmodhi4_loop>:
    4162:	aa 1f       	adc	r26, r26
    4164:	bb 1f       	adc	r27, r27
    4166:	a6 17       	cp	r26, r22
    4168:	b7 07       	cpc	r27, r23
    416a:	10 f0       	brcs	.+4      	; 0x4170 <__udivmodhi4_ep>
    416c:	a6 1b       	sub	r26, r22
    416e:	b7 0b       	sbc	r27, r23

00004170 <__udivmodhi4_ep>:
    4170:	88 1f       	adc	r24, r24
    4172:	99 1f       	adc	r25, r25
    4174:	5a 95       	dec	r21
    4176:	a9 f7       	brne	.-22     	; 0x4162 <__udivmodhi4_loop>
    4178:	80 95       	com	r24
    417a:	90 95       	com	r25
    417c:	bc 01       	movw	r22, r24
    417e:	cd 01       	movw	r24, r26
    4180:	08 95       	ret

00004182 <__udivmodsi4>:
    4182:	a1 e2       	ldi	r26, 0x21	; 33
    4184:	1a 2e       	mov	r1, r26
    4186:	aa 1b       	sub	r26, r26
    4188:	bb 1b       	sub	r27, r27
    418a:	fd 01       	movw	r30, r26
    418c:	0d c0       	rjmp	.+26     	; 0x41a8 <__udivmodsi4_ep>

0000418e <__udivmodsi4_loop>:
    418e:	aa 1f       	adc	r26, r26
    4190:	bb 1f       	adc	r27, r27
    4192:	ee 1f       	adc	r30, r30
    4194:	ff 1f       	adc	r31, r31
    4196:	a2 17       	cp	r26, r18
    4198:	b3 07       	cpc	r27, r19
    419a:	e4 07       	cpc	r30, r20
    419c:	f5 07       	cpc	r31, r21
    419e:	20 f0       	brcs	.+8      	; 0x41a8 <__udivmodsi4_ep>
    41a0:	a2 1b       	sub	r26, r18
    41a2:	b3 0b       	sbc	r27, r19
    41a4:	e4 0b       	sbc	r30, r20
    41a6:	f5 0b       	sbc	r31, r21

000041a8 <__udivmodsi4_ep>:
    41a8:	66 1f       	adc	r22, r22
    41aa:	77 1f       	adc	r23, r23
    41ac:	88 1f       	adc	r24, r24
    41ae:	99 1f       	adc	r25, r25
    41b0:	1a 94       	dec	r1
    41b2:	69 f7       	brne	.-38     	; 0x418e <__udivmodsi4_loop>
    41b4:	60 95       	com	r22
    41b6:	70 95       	com	r23
    41b8:	80 95       	com	r24
    41ba:	90 95       	com	r25
    41bc:	9b 01       	movw	r18, r22
    41be:	ac 01       	movw	r20, r24
    41c0:	bd 01       	movw	r22, r26
    41c2:	cf 01       	movw	r24, r30
    41c4:	08 95       	ret

000041c6 <__prologue_saves__>:
    41c6:	2f 92       	push	r2
    41c8:	3f 92       	push	r3
    41ca:	4f 92       	push	r4
    41cc:	5f 92       	push	r5
    41ce:	6f 92       	push	r6
    41d0:	7f 92       	push	r7
    41d2:	8f 92       	push	r8
    41d4:	9f 92       	push	r9
    41d6:	af 92       	push	r10
    41d8:	bf 92       	push	r11
    41da:	cf 92       	push	r12
    41dc:	df 92       	push	r13
    41de:	ef 92       	push	r14
    41e0:	ff 92       	push	r15
    41e2:	0f 93       	push	r16
    41e4:	1f 93       	push	r17
    41e6:	cf 93       	push	r28
    41e8:	df 93       	push	r29
    41ea:	cd b7       	in	r28, 0x3d	; 61
    41ec:	de b7       	in	r29, 0x3e	; 62
    41ee:	ca 1b       	sub	r28, r26
    41f0:	db 0b       	sbc	r29, r27
    41f2:	0f b6       	in	r0, 0x3f	; 63
    41f4:	f8 94       	cli
    41f6:	de bf       	out	0x3e, r29	; 62
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	cd bf       	out	0x3d, r28	; 61
    41fc:	09 94       	ijmp

000041fe <__epilogue_restores__>:
    41fe:	2a 88       	ldd	r2, Y+18	; 0x12
    4200:	39 88       	ldd	r3, Y+17	; 0x11
    4202:	48 88       	ldd	r4, Y+16	; 0x10
    4204:	5f 84       	ldd	r5, Y+15	; 0x0f
    4206:	6e 84       	ldd	r6, Y+14	; 0x0e
    4208:	7d 84       	ldd	r7, Y+13	; 0x0d
    420a:	8c 84       	ldd	r8, Y+12	; 0x0c
    420c:	9b 84       	ldd	r9, Y+11	; 0x0b
    420e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4210:	b9 84       	ldd	r11, Y+9	; 0x09
    4212:	c8 84       	ldd	r12, Y+8	; 0x08
    4214:	df 80       	ldd	r13, Y+7	; 0x07
    4216:	ee 80       	ldd	r14, Y+6	; 0x06
    4218:	fd 80       	ldd	r15, Y+5	; 0x05
    421a:	0c 81       	ldd	r16, Y+4	; 0x04
    421c:	1b 81       	ldd	r17, Y+3	; 0x03
    421e:	aa 81       	ldd	r26, Y+2	; 0x02
    4220:	b9 81       	ldd	r27, Y+1	; 0x01
    4222:	ce 0f       	add	r28, r30
    4224:	d1 1d       	adc	r29, r1
    4226:	0f b6       	in	r0, 0x3f	; 63
    4228:	f8 94       	cli
    422a:	de bf       	out	0x3e, r29	; 62
    422c:	0f be       	out	0x3f, r0	; 63
    422e:	cd bf       	out	0x3d, r28	; 61
    4230:	ed 01       	movw	r28, r26
    4232:	08 95       	ret

00004234 <_exit>:
    4234:	f8 94       	cli

00004236 <__stop_program>:
    4236:	ff cf       	rjmp	.-2      	; 0x4236 <__stop_program>
